 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
allcrystals="alphaquartz aucu bcc bcc_c bct betaquartz betatin cristobalite cscl dhcp diamond diamond_c fcc fcc_c graphite hcp nacl nickeline sc tridymite wurtzite zincblende"
allcrystals_supercells="sup_alphaquartz sup_anatase sup_aucu sup_bcc sup_bcc_c sup_bct sup_betaquartz sup_betatin sup_cdi2 sup_cristobalite sup_cscl sup_cubiclaves sup_cuprite sup_dhcp sup_diamond sup_diamond_c sup_fcc sup_fcc_c sup_fluorite sup_graphite sup_hcp sup_hexagonallaves sup_molybdenite sup_nacl sup_nickeline sup_pyrite sup_rutile sup_sc sup_tridymite sup_wurtzite sup_zincblende"
allsurfaces="bcc_100 fcc_100 fcc_110 fcc_111 hcp_0001"
allsurfaces_supercells="sup_bcc_100 sup_fcc_100 sup_fcc_110 sup_fcc_111 sup_hcp_0001"
allmolecules="bent_mol diatomic_mol linear_mol monatomic_mol"
allmolecules_supercells=""
 
TOTALTIME=0 
 
ALLPOTCARS=/home/ws2006/potcars
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
alphaquartz () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=hexagonal
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=9
ATOMS_PER_SUBCELL=9

NUMBER_OF_SHIFTS=4

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="3 6"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

C_A_RATIO_alphaquartz=1.10009
SHIFT_alphaquartz_1=0.46990
SHIFT_alphaquartz_2=0.41410
SHIFT_alphaquartz_3=0.26810
SHIFT_alphaquartz_4=0.78540

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_alphaquartz \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

s1=`echo $SHIFT_alphaquartz_1 | bc -l`
s2=`echo -$SHIFT_alphaquartz_1 | bc -l`

s3=`echo $SHIFT_alphaquartz_2 | bc -l`
s4=`echo $SHIFT_alphaquartz_3 | bc -l`
s5=`echo $SHIFT_alphaquartz_4 | bc -l`
s6=`echo -$SHIFT_alphaquartz_2 | bc -l`
s7=`echo -$SHIFT_alphaquartz_3 | bc -l`
s8=`echo -$SHIFT_alphaquartz_4 | bc -l`

s9=`echo $SHIFT_alphaquartz_2 - $SHIFT_alphaquartz_3 | bc -l`
s10=`echo $SHIFT_alphaquartz_3 - $SHIFT_alphaquartz_2 | bc -l`

s11=`echo 0.6666666666666666666666 + $SHIFT_alphaquartz_4 | bc -l`
s12=`echo 0.3333333333333333333333 + $SHIFT_alphaquartz_4 | bc -l`
s13=`echo 0.6666666666666666666666 - $SHIFT_alphaquartz_4 | bc -l`
s14=`echo 0.3333333333333333333333 - $SHIFT_alphaquartz_4 | bc -l`

cat > POSCAR << EOF
alphaquartz crystal $SUPERCELL_FACTOR
-$v
0.5 -0.86602540378443864676372317075294 0
0.5 0.86602540378443864676372317075294 0
0 0 $C_A_RATIO_alphaquartz
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* $s1 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.6666666666666666666666 | bc -l`
x2=`echo $d \* $nx - $d + $d \* $s1 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.3333333333333333333333 | bc -l`
x3=`echo $d \* $nx - $d + $d \* $s2 | bc -l`
y3=`echo $d \* $ny - $d + $d \* $s2 | bc -l`
z3=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
echo $x3 " " $y3 " " $z3 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x4=`echo $d \* $nx - $d + $d \* $s3 | bc -l`
y4=`echo $d \* $ny - $d + $d \* $s4 | bc -l`
z4=`echo $d \* $nz - $d + $d \* $s5 | bc -l`
x5=`echo $d \* $nx - $d + $d \* $s7 | bc -l`
y5=`echo $d \* $ny - $d + $d \* $s9 | bc -l`
z5=`echo $d \* $nz - $d + $d \* $s11 | bc -l`
x6=`echo $d \* $nx - $d + $d \* $s10 | bc -l`
y6=`echo $d \* $ny - $d + $d \* $s6 | bc -l`
z6=`echo $d \* $nz - $d + $d \* $s12 | bc -l`
x7=`echo $d \* $nx - $d + $d \* $s4 | bc -l`
y7=`echo $d \* $ny - $d + $d \* $s3 | bc -l`
z7=`echo $d \* $nz - $d + $d \* $s8 | bc -l`
x8=`echo $d \* $nx - $d + $d \* $s6 | bc -l`
y8=`echo $d \* $ny - $d + $d \* $s10 | bc -l`
z8=`echo $d \* $nz - $d + $d \* $s13 | bc -l`
x9=`echo $d \* $nx - $d + $d \* $s9 | bc -l`
y9=`echo $d \* $ny - $d + $d \* $s7 | bc -l`
z9=`echo $d \* $nz - $d + $d \* $s14 | bc -l`
echo $x4 " " $y4 " " $z4 >> POSCAR
echo $x5 " " $y5 " " $z5 >> POSCAR
echo $x6 " " $y6 " " $z6 >> POSCAR
echo $x7 " " $y7 " " $z7 >> POSCAR
echo $x8 " " $y8 " " $z8 >> POSCAR
echo $x9 " " $y9 " " $z9 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

row=$(sed -n '9p' < CONTCAR)    # nth atom + 8
column=${row[0]}
shift_alphaquartz_1=`echo $column \* $SUPERCELL_FACTOR | bc -l`

if [ "$UPDATEVARIABLES" = true ]; then
SHIFT_alphaquartz_1=$shift_alphaquartz_1
fi

row=$(sed -n '12p' < CONTCAR)    # nth atom + 8
column=${row[0]}
shift_alphaquartz_2=`echo $column \* $SUPERCELL_FACTOR | bc -l`

if [ "$UPDATEVARIABLES" = true ]; then
SHIFT_alphaquartz_2=$shift_alphaquartz_2
fi

row=$(sed -n '12p' < CONTCAR)    # nth atom + 8
column=${row[1]}
shift_alphaquartz_3=`echo $column \* $SUPERCELL_FACTOR | bc -l`

if [ "$UPDATEVARIABLES" = true ]; then
SHIFT_alphaquartz_3=$shift_alphaquartz_3
fi

row=$(sed -n '12p' < CONTCAR)    # nth atom + 8
column=${row[2]}
shift_alphaquartz_4=`echo $column \* $SUPERCELL_FACTOR | bc -l`

if [ "$UPDATEVARIABLES" = true ]; then
SHIFT_alphaquartz_4=$shift_alphaquartz_4
fi

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
aucu () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=tetragonal
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=4
ATOMS_PER_SUBCELL=2

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1 1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

C_A_RATIO_aucu=0.92632

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_aucu \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
aucu crystal $SUPERCELL_FACTOR
-$v
0.5 -0.5 0
0.5 0.5 0
0 0 $C_A_RATIO_aucu
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x2=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
bcc () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=I

ATOMS_PER_CONVENTIONAL_CELL=2
ATOMS_PER_SUBCELL=1

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_bcc \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
bcc crystal $SUPERCELL_FACTOR
-$v
-0.5 0.5 0.5
0.5 -0.5 0.5
0.5 0.5 -0.5
$POTCAR
$natoms1
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
bcc_c () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=I

ATOMS_PER_CONVENTIONAL_CELL=2
ATOMS_PER_SUBCELL=2

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="2"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_bcc_c \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
bcc_c crystal
-$v
1 0 0
0 1 0
0 0 1
$POTCAR
$natoms1
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
bct () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=tetragonal
BRAVAIS_LATTICE=I

ATOMS_PER_CONVENTIONAL_CELL=2
ATOMS_PER_SUBCELL=1

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

C_A_RATIO_bct=1.41421

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_bct \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

c=`echo 0.5 \* $C_A_RATIO_bct | bc -l`

cat > POSCAR << EOF
bct crystal 
-$v
1 0 0
0 1 0
0.5 0.5 $c
$POTCAR
$natoms1
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
betaquartz () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=hexagonal
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=9
ATOMS_PER_SUBCELL=9

NUMBER_OF_SHIFTS=1

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="3 6"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

C_A_RATIO_betaquartz=1.10020
SHIFT_betaquartz_1=0.42020

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_betaquartz \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

s1=`echo $SHIFT_betaquartz_1 | bc -l`
s2=`echo 2 \* $SHIFT_betaquartz_1 | bc -l`
s3=`echo -2 \* $SHIFT_betaquartz_1 | bc -l`
s4=`echo - $SHIFT_betaquartz_1 | bc -l`

cat > POSCAR << EOF
betaquartz crystal $SUPERCELL_FACTOR
-$v
0.5 -0.86602540378443864676372317075294 0
0.5 0.86602540378443864676372317075294 0
0 0 $C_A_RATIO_betaquartz
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.6666666666666666666666 | bc -l`
x3=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y3=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z3=`echo $d \* $nz - $d + $d \* 0.3333333333333333333333 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
echo $x3 " " $y3 " " $z3 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x4=`echo $d \* $nx - $d + $d \* $s1 | bc -l`
y4=`echo $d \* $ny - $d + $d \* $s2 | bc -l`
z4=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x5=`echo $d \* $nx - $d + $d \* $s3 | bc -l`
y5=`echo $d \* $ny - $d + $d \* $s4 | bc -l`
z5=`echo $d \* $nz - $d + $d \* 0.1666666666666666666666 | bc -l`
x6=`echo $d \* $nx - $d + $d \* $s1 | bc -l`
y6=`echo $d \* $ny - $d + $d \* $s4 | bc -l`
z6=`echo $d \* $nz - $d + $d \* 0.833333333333333333333 | bc -l`
x7=`echo $d \* $nx - $d + $d \* $s4 | bc -l`
y7=`echo $d \* $ny - $d + $d \* $s3 | bc -l`
z7=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x8=`echo $d \* $nx - $d + $d \* $s2 | bc -l`
y8=`echo $d \* $ny - $d + $d \* $s1 | bc -l`
z8=`echo $d \* $nz - $d + $d \* 0.1666666666666666666666 | bc -l`
x9=`echo $d \* $nx - $d + $d \* $s4 | bc -l`
y9=`echo $d \* $ny - $d + $d \* $s1 | bc -l`
z9=`echo $d \* $nz - $d + $d \* 0.833333333333333333333 | bc -l`
echo $x4 " " $y4 " " $z4 >> POSCAR
echo $x5 " " $y5 " " $z5 >> POSCAR
echo $x6 " " $y6 " " $z6 >> POSCAR
echo $x7 " " $y7 " " $z7 >> POSCAR
echo $x8 " " $y8 " " $z8 >> POSCAR
echo $x9 " " $y9 " " $z9 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

row=$(sed -n '12p' < CONTCAR)    # nth atom + 8
column=${row[0]}
shift_betaquartz_1=`echo $column \* $SUPERCELL_FACTOR | bc -l`

if [ "$UPDATEVARIABLES" = true ]; then
SHIFT_betaquartz_1=$shift_betaquartz_1
fi

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
betatin () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=tetragonal
BRAVAIS_LATTICE=I

ATOMS_PER_CONVENTIONAL_CELL=2
ATOMS_PER_SUBCELL=2

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="2"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_betatin \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
betatin crystal 
-$v
1 0 0
0 1 0
0.5 0.5 0.5
$POTCAR
$natoms1
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* -0.125 | bc -l`
y1=`echo $d \* $ny - $d + $d \* -0.375 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.125 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.375 | bc -l`
z2=`echo $d \* $nz - $d + $d \* -0.25 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
cristobalite () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=F

ATOMS_PER_CONVENTIONAL_CELL=24
ATOMS_PER_SUBCELL=6

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="2 4"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_cristobalite \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
cristobalite crystal $SUPERCELL_FACTOR
-$v
0.0 0.5 0.5
0.5 0.0 0.5
0.5 0.5 0.0
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.125 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.125 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.125 | bc -l`
x2=`echo $d \* $nx - $d + $d \* -0.125 | bc -l`
y2=`echo $d \* $ny - $d + $d \* -0.125 | bc -l`
z2=`echo $d \* $nz - $d + $d \* -0.125 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x3=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y3=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z3=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x4=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y4=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z4=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x5=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y5=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z5=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x6=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y6=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z6=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
echo $x3 " " $y3 " " $z3 >> POSCAR
echo $x4 " " $y4 " " $z4 >> POSCAR
echo $x5 " " $y5 " " $z5 >> POSCAR
echo $x6 " " $y6 " " $z6 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
cscl () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=2
ATOMS_PER_SUBCELL=2

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1 1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_cscl \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
cscl crystal $SUPERCELL_FACTOR
-$v
1 0 0
0 1 0
0 0 1
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x2=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
dhcp () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=hexagonal
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=4
ATOMS_PER_SUBCELL=4

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="4"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

C_A_RATIO_dhcp=3.26598

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_dhcp \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
dhcp crystal
-$v
0.5 -0.86602540378443864676372317075294 0
0.5 0.86602540378443864676372317075294 0
0 0 $C_A_RATIO_dhcp
$POTCAR
$natoms1
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x3=`echo $d \* $nx - $d + $d \* 0.3333333333333333333333 | bc -l`
y3=`echo $d \* $ny - $d + $d \* 0.6666666666666666666666 | bc -l`
z3=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
x4=`echo $d \* $nx - $d + $d \* 0.6666666666666666666666 | bc -l`
y4=`echo $d \* $ny - $d + $d \* 0.3333333333333333333333 | bc -l`
z4=`echo $d \* $nz - $d + $d \* 0.75 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
echo $x3 " " $y3 " " $z3 >> POSCAR
echo $x4 " " $y4 " " $z4 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
diamond () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=F

ATOMS_PER_CONVENTIONAL_CELL=8
ATOMS_PER_SUBCELL=2

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="2"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_diamond \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
diamond crystal 
-$v
0.0 0.5 0.5
0.5 0.0 0.5
0.5 0.5 0.0
$POTCAR
$natoms1
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* -0.125 | bc -l`
y1=`echo $d \* $ny - $d + $d \* -0.125 | bc -l`
z1=`echo $d \* $nz - $d + $d \* -0.125 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.125 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.125 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.125 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
diamond_c () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=F

ATOMS_PER_CONVENTIONAL_CELL=8
ATOMS_PER_SUBCELL=8

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="8"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_diamond_c \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
diamond_c crystal 
-$v
1 0 0
0 1 0
0 0 1
$POTCAR
$natoms1
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x3=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y3=`echo $d \* $ny - $d + $d \* 0 | bc -l`
z3=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x4=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y4=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z4=`echo $d \* $nz - $d + $d \* 0 | bc -l`
x5=`echo $d \* $nx - $d + $d \* 0.25 | bc -l`
y5=`echo $d \* $ny - $d + $d \* 0.25 | bc -l`
z5=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
x6=`echo $d \* $nx - $d + $d \* 0.25 | bc -l`
y6=`echo $d \* $ny - $d + $d \* 0.75 | bc -l`
z6=`echo $d \* $nz - $d + $d \* 0.75 | bc -l`
x7=`echo $d \* $nx - $d + $d \* 0.75 | bc -l`
y7=`echo $d \* $ny - $d + $d \* 0.25 | bc -l`
z7=`echo $d \* $nz - $d + $d \* 0.75 | bc -l`
x8=`echo $d \* $nx - $d + $d \* 0.75 | bc -l`
y8=`echo $d \* $ny - $d + $d \* 0.75 | bc -l`
z8=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
echo $x3 " " $y3 " " $z3 >> POSCAR
echo $x4 " " $y4 " " $z4 >> POSCAR
echo $x5 " " $y5 " " $z5 >> POSCAR
echo $x6 " " $y6 " " $z6 >> POSCAR
echo $x7 " " $y7 " " $z7 >> POSCAR
echo $x8 " " $y8 " " $z8 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
fcc () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=F

ATOMS_PER_CONVENTIONAL_CELL=4
ATOMS_PER_SUBCELL=1

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_fcc \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
fcc crystal
-$v
0.0 0.5 0.5
0.5 0.0 0.5
0.5 0.5 0.0
$POTCAR
$natoms1
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
fcc_c () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=F

ATOMS_PER_CONVENTIONAL_CELL=4
ATOMS_PER_SUBCELL=4

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="4"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_fcc_c \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
fcc_c crystal
-$v
1 0 0
0 1 0
0 0 1
$POTCAR
$natoms1
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x3=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y3=`echo $d \* $ny - $d + $d \* 0 | bc -l`
z3=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x4=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y4=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z4=`echo $d \* $nz - $d + $d \* 0 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
echo $x3 " " $y3 " " $z3 >> POSCAR
echo $x4 " " $y4 " " $z4 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
graphite () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=hexagonal
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=4
ATOMS_PER_SUBCELL=4

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="4"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

C_A_RATIO_graphite=2.00000

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_graphite \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
graphite crystal 
-$v
0.5 -0.86602540378443864676372317075294 0
0.5 0.86602540378443864676372317075294 0
0 0 $C_A_RATIO_graphite
$POTCAR
$natoms1
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.75 | bc -l`
x3=`echo $d \* $nx - $d + $d \* 0.3333333333333333333333 | bc -l`
y3=`echo $d \* $ny - $d + $d \* 0.6666666666666666666666 | bc -l`
z3=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
x4=`echo $d \* $nx - $d + $d \* 0.6666666666666666666666 | bc -l`
y4=`echo $d \* $ny - $d + $d \* 0.3333333333333333333333 | bc -l`
z4=`echo $d \* $nz - $d + $d \* 0.75 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
echo $x3 " " $y3 " " $z3 >> POSCAR
echo $x4 " " $y4 " " $z4 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
hcp () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=hexagonal
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=2
ATOMS_PER_SUBCELL=2

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="2"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

C_A_RATIO_hcp=1.63299

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_hcp \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
hcp crystal $SUPERCELL_FACTOR
-$v
0.5 -0.86602540378443864676372317075294 0
0.5 0.86602540378443864676372317075294 0
0 0 $C_A_RATIO_hcp
$POTCAR
$natoms1
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.3333333333333333333333 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.6666666666666666666666 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.6666666666666666666666 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.3333333333333333333333 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.75 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
nacl () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=F

ATOMS_PER_CONVENTIONAL_CELL=8
ATOMS_PER_SUBCELL=2

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1 1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_nacl \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
nacl crystal $SUPERCELL_FACTOR
-$v
0.0 0.5 0.5
0.5 0.0 0.5
0.5 0.5 0.0
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x2=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
nickeline () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=hexagonal
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=4
ATOMS_PER_SUBCELL=4

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="2 2"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

C_A_RATIO_nickeline=1.63299

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_nickeline \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
nickeline crystal $SUPERCELL_FACTOR
-$v
0.5 -0.86602540378443864676372317075294 0
0.5 0.86602540378443864676372317075294 0
0 0 $C_A_RATIO_nickeline
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x3=`echo $d \* $nx - $d + $d \* 0.3333333333333333333333 | bc -l`
y3=`echo $d \* $ny - $d + $d \* 0.6666666666666666666666 | bc -l`
z3=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
x4=`echo $d \* $nx - $d + $d \* 0.6666666666666666666666 | bc -l`
y4=`echo $d \* $ny - $d + $d \* 0.3333333333333333333333 | bc -l`
z4=`echo $d \* $nz - $d + $d \* 0.75 | bc -l`
echo $x3 " " $y3 " " $z3 >> POSCAR
echo $x4 " " $y4 " " $z4 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sc () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=1
ATOMS_PER_SUBCELL=1

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sc \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
sc crystal 
-$v
1 0 0
0 1 0
0 0 1
$POTCAR
$natoms1
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
tridymite () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=hexagonal
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=12
ATOMS_PER_SUBCELL=12

NUMBER_OF_SHIFTS=1

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="4 8"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

C_A_RATIO_tridymite=1.63698
SHIFT_tridymite_1=0.06200

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_tridymite \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

s1=`echo $SHIFT_tridymite_1 | bc -l`
s2=`echo -$SHIFT_tridymite_1 | bc -l`
s3=`echo 0.5 + $SHIFT_tridymite_1 | bc -l`
s4=`echo 0.5 - $SHIFT_tridymite_1 | bc -l`


cat > POSCAR << EOF
tridymite crystal $SUPERCELL_FACTOR
-$v
0.5 -0.86602540378443864676372317075294 0
0.5 0.86602540378443864676372317075294 0
0 0 $C_A_RATIO_tridymite
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.3333333333333333333333 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.6666666666666666666666 | bc -l`
z1=`echo $d \* $nz - $d + $d \* $s1 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.6666666666666666666666 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.3333333333333333333333 | bc -l`
z2=`echo $d \* $nz - $d + $d \* $s2 | bc -l`
x3=`echo $d \* $nx - $d + $d \* 0.6666666666666666666666 | bc -l`
y3=`echo $d \* $ny - $d + $d \* 0.3333333333333333333333 | bc -l`
z3=`echo $d \* $nz - $d + $d \* $s3 | bc -l`
x4=`echo $d \* $nx - $d + $d \* 0.3333333333333333333333 | bc -l`
y4=`echo $d \* $ny - $d + $d \* 0.6666666666666666666666 | bc -l`
z4=`echo $d \* $nz - $d + $d \* $s4 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
echo $x3 " " $y3 " " $z3 >> POSCAR
echo $x4 " " $y4 " " $z4 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x5=`echo $d \* $nx - $d + $d \* 0.3333333333333333333333 | bc -l`
y5=`echo $d \* $ny - $d + $d \* 0.6666666666666666666666 | bc -l`
z5=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
x6=`echo $d \* $nx - $d + $d \* 0.6666666666666666666666 | bc -l`
y6=`echo $d \* $ny - $d + $d \* 0.3333333333333333333333 | bc -l`
z6=`echo $d \* $nz - $d + $d \* 0.75 | bc -l`
x7=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y7=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z7=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x8=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y8=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z8=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x9=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y9=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z9=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x10=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y10=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z10=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x11=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y11=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z11=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x12=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y12=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z12=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
echo $x5 " " $y5 " " $z5 >> POSCAR
echo $x6 " " $y6 " " $z6 >> POSCAR
echo $x7 " " $y7 " " $z7 >> POSCAR
echo $x8 " " $y8 " " $z8 >> POSCAR
echo $x9 " " $y9 " " $z9 >> POSCAR
echo $x10 " " $y10 " " $z10 >> POSCAR
echo $x11 " " $y11 " " $z11 >> POSCAR
echo $x12 " " $y12 " " $z12 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

row=$(sed -n '9p' < CONTCAR)    # nth atom + 8
column=${row[2]}
shift_tridymite_1=`echo $column \* $SUPERCELL_FACTOR | bc -l`

if [ "$UPDATEVARIABLES" = true ]; then
SHIFT_tridymite_1=$shift_tridymite_1
fi

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
wurtzite () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=hexagonal
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=4
ATOMS_PER_SUBCELL=4

NUMBER_OF_SHIFTS=1

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="2 2"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

C_A_RATIO_wurtzite=1.63299
SHIFT_wurtzite_1=0.37480

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_wurtzite \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

s1=`echo $SHIFT_wurtzite_1 | bc -l`
s2=`echo 0.5 + $SHIFT_wurtzite_1 | bc -l`

cat > POSCAR << EOF
wurtzite crystal $SUPERCELL_FACTOR
-$v
0.5 -0.86602540378443864676372317075294 0
0.5 0.86602540378443864676372317075294 0
0 0 $C_A_RATIO_wurtzite
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.3333333333333333333333 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.6666666666666666666666 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.6666666666666666666666 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.3333333333333333333333 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x3=`echo $d \* $nx - $d + $d \* 0.3333333333333333333333 | bc -l`
y3=`echo $d \* $ny - $d + $d \* 0.6666666666666666666666 | bc -l`
z3=`echo $d \* $nz - $d + $d \* $s1 | bc -l`
x4=`echo $d \* $nx - $d + $d \* 0.6666666666666666666666 | bc -l`
y4=`echo $d \* $ny - $d + $d \* 0.3333333333333333333333 | bc -l`
z4=`echo $d \* $nz - $d + $d \* $s2 | bc -l`
echo $x3 " " $y3 " " $z3 >> POSCAR
echo $x4 " " $y4 " " $z4 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

row=$(sed -n '11p' < CONTCAR)    # nth atom + 8
column=${row[2]}
shift_wurtzite_1=`echo $column \* $SUPERCELL_FACTOR | bc -l`

if [ "$UPDATEVARIABLES" = true ]; then
SHIFT_wurtzite_1=$shift_wurtzite_1
fi

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
zincblende () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=F

ATOMS_PER_CONVENTIONAL_CELL=8
ATOMS_PER_SUBCELL=2

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1 1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_zincblende \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
zincblende crystal $SUPERCELL_FACTOR
-$v
0.0 0.5 0.5
0.5 0.0 0.5
0.5 0.5 0.0
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x2=`echo $d \* $nx - $d + $d \* 0.25 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.25 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_alphaquartz () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_alphaquartz

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=hexagonal
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=9
ATOMS_PER_SUBCELL=9

NUMBER_OF_SHIFTS=4

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="3 6"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

C_A_RATIO_sup_alphaquartz=1.10009
SHIFT_sup_alphaquartz_1=0.46990
SHIFT_sup_alphaquartz_2=0.41410
SHIFT_sup_alphaquartz_3=0.26810
SHIFT_sup_alphaquartz_4=0.78540

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_alphaquartz \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

s1=`echo $SHIFT_sup_alphaquartz_1 | bc -l`
s2=`echo -$SHIFT_sup_alphaquartz_1 | bc -l`

s3=`echo $SHIFT_sup_alphaquartz_2 | bc -l`
s4=`echo $SHIFT_sup_alphaquartz_3 | bc -l`
s5=`echo $SHIFT_sup_alphaquartz_4 | bc -l`
s6=`echo -$SHIFT_sup_alphaquartz_2 | bc -l`
s7=`echo -$SHIFT_sup_alphaquartz_3 | bc -l`
s8=`echo -$SHIFT_sup_alphaquartz_4 | bc -l`

s9=`echo $SHIFT_sup_alphaquartz_2 - $SHIFT_sup_alphaquartz_3 | bc -l`
s10=`echo $SHIFT_sup_alphaquartz_3 - $SHIFT_sup_alphaquartz_2 | bc -l`

s11=`echo 0.6666666666666666666666 + $SHIFT_sup_alphaquartz_4 | bc -l`
s12=`echo 0.3333333333333333333333 + $SHIFT_sup_alphaquartz_4 | bc -l`
s13=`echo 0.6666666666666666666666 - $SHIFT_sup_alphaquartz_4 | bc -l`
s14=`echo 0.3333333333333333333333 - $SHIFT_sup_alphaquartz_4 | bc -l`

cat > POSCAR << EOF
sup_alphaquartz crystal $SUPERCELL_FACTOR
-$v
0.5 -0.86602540378443864676372317075294 0
0.5 0.86602540378443864676372317075294 0
0 0 $C_A_RATIO_sup_alphaquartz
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* $s1 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.6666666666666666666666 | bc -l`
x2=`echo $d \* $nx - $d + $d \* $s1 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.3333333333333333333333 | bc -l`
x3=`echo $d \* $nx - $d + $d \* $s2 | bc -l`
y3=`echo $d \* $ny - $d + $d \* $s2 | bc -l`
z3=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
echo $x3 " " $y3 " " $z3 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x4=`echo $d \* $nx - $d + $d \* $s3 | bc -l`
y4=`echo $d \* $ny - $d + $d \* $s4 | bc -l`
z4=`echo $d \* $nz - $d + $d \* $s5 | bc -l`
x5=`echo $d \* $nx - $d + $d \* $s7 | bc -l`
y5=`echo $d \* $ny - $d + $d \* $s9 | bc -l`
z5=`echo $d \* $nz - $d + $d \* $s11 | bc -l`
x6=`echo $d \* $nx - $d + $d \* $s10 | bc -l`
y6=`echo $d \* $ny - $d + $d \* $s6 | bc -l`
z6=`echo $d \* $nz - $d + $d \* $s12 | bc -l`
x7=`echo $d \* $nx - $d + $d \* $s4 | bc -l`
y7=`echo $d \* $ny - $d + $d \* $s3 | bc -l`
z7=`echo $d \* $nz - $d + $d \* $s8 | bc -l`
x8=`echo $d \* $nx - $d + $d \* $s6 | bc -l`
y8=`echo $d \* $ny - $d + $d \* $s10 | bc -l`
z8=`echo $d \* $nz - $d + $d \* $s13 | bc -l`
x9=`echo $d \* $nx - $d + $d \* $s9 | bc -l`
y9=`echo $d \* $ny - $d + $d \* $s7 | bc -l`
z9=`echo $d \* $nz - $d + $d \* $s14 | bc -l`
echo $x4 " " $y4 " " $z4 >> POSCAR
echo $x5 " " $y5 " " $z5 >> POSCAR
echo $x6 " " $y6 " " $z6 >> POSCAR
echo $x7 " " $y7 " " $z7 >> POSCAR
echo $x8 " " $y8 " " $z8 >> POSCAR
echo $x9 " " $y9 " " $z9 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

row=$(sed -n '9p' < CONTCAR)    # nth atom + 8
column=${row[0]}
shift_sup_alphaquartz_1=`echo $column \* $SUPERCELL_FACTOR | bc -l`

if [ "$UPDATEVARIABLES" = true ]; then
SHIFT_sup_alphaquartz_1=$shift_sup_alphaquartz_1
fi

row=$(sed -n '12p' < CONTCAR)    # nth atom + 8
column=${row[0]}
shift_sup_alphaquartz_2=`echo $column \* $SUPERCELL_FACTOR | bc -l`

if [ "$UPDATEVARIABLES" = true ]; then
SHIFT_sup_alphaquartz_2=$shift_sup_alphaquartz_2
fi

row=$(sed -n '12p' < CONTCAR)    # nth atom + 8
column=${row[1]}
shift_sup_alphaquartz_3=`echo $column \* $SUPERCELL_FACTOR | bc -l`

if [ "$UPDATEVARIABLES" = true ]; then
SHIFT_sup_alphaquartz_3=$shift_sup_alphaquartz_3
fi

row=$(sed -n '12p' < CONTCAR)    # nth atom + 8
column=${row[2]}
shift_sup_alphaquartz_4=`echo $column \* $SUPERCELL_FACTOR | bc -l`

if [ "$UPDATEVARIABLES" = true ]; then
SHIFT_sup_alphaquartz_4=$shift_sup_alphaquartz_4
fi

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_anatase () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_anatase

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=tetragonal
BRAVAIS_LATTICE=I

ATOMS_PER_CONVENTIONAL_CELL=12
ATOMS_PER_SUBCELL=6

NUMBER_OF_SHIFTS=1

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="2 4"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

C_A_RATIO_sup_anatase=2.51430
SHIFT_sup_anatase_1=0.08310

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_anatase \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

s1=`echo $SHIFT_sup_anatase_1 | bc -l`
s2=`echo 0.5 + $SHIFT_sup_anatase_1 | bc -l`
s3=`echo 0.5 - $SHIFT_sup_anatase_1 | bc -l`
s4=`echo 0.25 + $SHIFT_sup_anatase_1 | bc -l`
s5=`echo 0.25 - $SHIFT_sup_anatase_1 | bc -l`
s6=`echo 0.5 + 2 \* $SHIFT_sup_anatase_1 | bc -l`
s7=`echo 0.5 - 2 \* $SHIFT_sup_anatase_1 | bc -l`
s8=`echo 1 - 2 \* $SHIFT_sup_anatase_1 | bc -l`
s9=`echo 2 \* $SHIFT_sup_anatase_1 | bc -l`

cat > POSCAR << EOF
sup_anatase crystal $SUPERCELL_FACTOR
-$v
1 0 0
0 1 0
0 0 $C_A_RATIO_sup_anatase
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* -0.125 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.625 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.125 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.375 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.75 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x3=`echo $d \* $nx - $d + $d \* -$s1 | bc -l`
y3=`echo $d \* $ny - $d + $d \* $s5 | bc -l`
z3=`echo $d \* $nz - $d + $d \* $s9 | bc -l`
x4=`echo $d \* $nx - $d + $d \* -$s4 | bc -l`
y4=`echo $d \* $ny - $d + $d \* $s3 | bc -l`
z4=`echo $d \* $nz - $d + $d \* $s6 | bc -l`
x5=`echo $d \* $nx - $d + $d \* $s1 | bc -l`
y5=`echo $d \* $ny - $d + $d \* -$s5 | bc -l`
z5=`echo $d \* $nz - $d + $d \* $s8 | bc -l`
x6=`echo $d \* $nx - $d + $d \* $s4 | bc -l`
y6=`echo $d \* $ny - $d + $d \* $s2 | bc -l`
z6=`echo $d \* $nz - $d + $d \* $s7 | bc -l`
echo $x3 " " $y3 " " $z3 >> POSCAR
echo $x4 " " $y4 " " $z4 >> POSCAR
echo $x5 " " $y5 " " $z5 >> POSCAR
echo $x6 " " $y6 " " $z6 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

row=$(sed -n '13p' < CONTCAR)    # nth atom + 8
column=${row[0]}
shift_sup_anatase_1=`echo $column \* $SUPERCELL_FACTOR | bc -l`

if [ "$UPDATEVARIABLES" = true ]; then
SHIFT_sup_anatase_1=$shift_sup_anatase_1
fi

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_aucu () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_aucu

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=tetragonal
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=4
ATOMS_PER_SUBCELL=2

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1 1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

C_A_RATIO_sup_aucu=0.92632

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_aucu \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
sup_aucu crystal $SUPERCELL_FACTOR
-$v
0.5 -0.5 0
0.5 0.5 0
0 0 $C_A_RATIO_sup_aucu
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x2=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_bcc () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_bcc

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=I

ATOMS_PER_CONVENTIONAL_CELL=2
ATOMS_PER_SUBCELL=1

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_bcc \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
sup_bcc crystal $SUPERCELL_FACTOR
-$v
-0.5 0.5 0.5
0.5 -0.5 0.5
0.5 0.5 -0.5
$POTCAR
$natoms1
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_bcc_c () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_bcc_c

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=I

ATOMS_PER_CONVENTIONAL_CELL=2
ATOMS_PER_SUBCELL=2

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="2"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_bcc_c \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
sup_bcc_c crystal $SUPERCELL_FACTOR
-$v
1 0 0
0 1 0
0 0 1
$POTCAR
$natoms1
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_bct () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_bct

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=tetragonal
BRAVAIS_LATTICE=I

ATOMS_PER_CONVENTIONAL_CELL=2
ATOMS_PER_SUBCELL=1

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

C_A_RATIO_sup_bct=1.41421

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_bct \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

c=`echo 0.5 \* $C_A_RATIO_sup_bct | bc -l`

cat > POSCAR << EOF
sup_bct crystal $SUPERCELL_FACTOR
-$v
1 0 0
0 1 0
0.5 0.5 $c
$POTCAR
$natoms1
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_betaquartz () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_betaquartz

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=hexagonal
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=9
ATOMS_PER_SUBCELL=9

NUMBER_OF_SHIFTS=1

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="3 6"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

C_A_RATIO_sup_betaquartz=1.10020
SHIFT_sup_betaquartz_1=0.42020

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_betaquartz \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

s1=`echo $SHIFT_sup_betaquartz_1 | bc -l`
s2=`echo 2 \* $SHIFT_sup_betaquartz_1 | bc -l`
s3=`echo -2 \* $SHIFT_sup_betaquartz_1 | bc -l`
s4=`echo - $SHIFT_sup_betaquartz_1 | bc -l`

cat > POSCAR << EOF
sup_betaquartz crystal $SUPERCELL_FACTOR
-$v
0.5 -0.86602540378443864676372317075294 0
0.5 0.86602540378443864676372317075294 0
0 0 $C_A_RATIO_sup_betaquartz
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.6666666666666666666666 | bc -l`
x3=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y3=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z3=`echo $d \* $nz - $d + $d \* 0.3333333333333333333333 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
echo $x3 " " $y3 " " $z3 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x4=`echo $d \* $nx - $d + $d \* $s1 | bc -l`
y4=`echo $d \* $ny - $d + $d \* $s2 | bc -l`
z4=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x5=`echo $d \* $nx - $d + $d \* $s3 | bc -l`
y5=`echo $d \* $ny - $d + $d \* $s4 | bc -l`
z5=`echo $d \* $nz - $d + $d \* 0.1666666666666666666666 | bc -l`
x6=`echo $d \* $nx - $d + $d \* $s1 | bc -l`
y6=`echo $d \* $ny - $d + $d \* $s4 | bc -l`
z6=`echo $d \* $nz - $d + $d \* 0.833333333333333333333 | bc -l`
x7=`echo $d \* $nx - $d + $d \* $s4 | bc -l`
y7=`echo $d \* $ny - $d + $d \* $s3 | bc -l`
z7=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x8=`echo $d \* $nx - $d + $d \* $s2 | bc -l`
y8=`echo $d \* $ny - $d + $d \* $s1 | bc -l`
z8=`echo $d \* $nz - $d + $d \* 0.1666666666666666666666 | bc -l`
x9=`echo $d \* $nx - $d + $d \* $s4 | bc -l`
y9=`echo $d \* $ny - $d + $d \* $s1 | bc -l`
z9=`echo $d \* $nz - $d + $d \* 0.833333333333333333333 | bc -l`
echo $x4 " " $y4 " " $z4 >> POSCAR
echo $x5 " " $y5 " " $z5 >> POSCAR
echo $x6 " " $y6 " " $z6 >> POSCAR
echo $x7 " " $y7 " " $z7 >> POSCAR
echo $x8 " " $y8 " " $z8 >> POSCAR
echo $x9 " " $y9 " " $z9 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

row=$(sed -n '12p' < CONTCAR)    # nth atom + 8
column=${row[0]}
shift_sup_betaquartz_1=`echo $column \* $SUPERCELL_FACTOR | bc -l`

if [ "$UPDATEVARIABLES" = true ]; then
SHIFT_sup_betaquartz_1=$shift_sup_betaquartz_1
fi

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_betatin () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_betatin

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=tetragonal
BRAVAIS_LATTICE=I

ATOMS_PER_CONVENTIONAL_CELL=2
ATOMS_PER_SUBCELL=2

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="2"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_betatin \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
sup_betatin crystal $SUPERCELL_FACTOR
-$v
1 0 0
0 1 0
0.5 0.5 0.5
$POTCAR
$natoms1
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* -0.125 | bc -l`
y1=`echo $d \* $ny - $d + $d \* -0.375 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.125 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.375 | bc -l`
z2=`echo $d \* $nz - $d + $d \* -0.25 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_cdi2 () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_cdi2

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=hexagonal
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=3
ATOMS_PER_SUBCELL=3

NUMBER_OF_SHIFTS=1

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1 2"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

C_A_RATIO_sup_cdi2=2.44949
SHIFT_sup_cdi2_1=0.16667

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_cdi2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

s1=`echo 0.5 - $SHIFT_sup_cdi2_1 | bc -l`
s2=`echo 0.5 + $SHIFT_sup_cdi2_1 | bc -l`

cat > POSCAR << EOF
sup_cdi2 crystal $SUPERCELL_FACTOR
-$v
0.5 -0.86602540378443864676372317075294 0
0.5 0.86602540378443864676372317075294 0
0 0 $C_A_RATIO_sup_cdi2
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x2=`echo $d \* $nx - $d + $d \* 0.3333333333333333333333 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.6666666666666666666666 | bc -l`
z2=`echo $d \* $nz - $d + $d \* $s1 | bc -l`
x3=`echo $d \* $nx - $d + $d \* 0.6666666666666666666666 | bc -l`
y3=`echo $d \* $ny - $d + $d \* 0.3333333333333333333333 | bc -l`
z3=`echo $d \* $nz - $d + $d \* $s2 | bc -l`
echo $x2 " " $y2 " " $z2 >> POSCAR
echo $x3 " " $y3 " " $z3 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

row=$(sed -n '11p' < CONTCAR)    # nth atom + 8
column=${row[2]}
shift_sup_cdi2_1=`echo $column \* $SUPERCELL_FACTOR - 0.5 \* $SUPERCELL_FACTOR | bc -l`

if [ "$UPDATEVARIABLES" = true ]; then
SHIFT_sup_cdi2_1=$shift_sup_cdi2_1
fi

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_cristobalite () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_cristobalite

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=F

ATOMS_PER_CONVENTIONAL_CELL=24
ATOMS_PER_SUBCELL=6

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="2 4"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_cristobalite \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
sup_cristobalite crystal $SUPERCELL_FACTOR
-$v
0.0 0.5 0.5
0.5 0.0 0.5
0.5 0.5 0.0
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.125 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.125 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.125 | bc -l`
x2=`echo $d \* $nx - $d + $d \* -0.125 | bc -l`
y2=`echo $d \* $ny - $d + $d \* -0.125 | bc -l`
z2=`echo $d \* $nz - $d + $d \* -0.125 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x3=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y3=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z3=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x4=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y4=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z4=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x5=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y5=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z5=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x6=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y6=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z6=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
echo $x3 " " $y3 " " $z3 >> POSCAR
echo $x4 " " $y4 " " $z4 >> POSCAR
echo $x5 " " $y5 " " $z5 >> POSCAR
echo $x6 " " $y6 " " $z6 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_cscl () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_cscl

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=2
ATOMS_PER_SUBCELL=2

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1 1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_cscl \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
sup_cscl crystal $SUPERCELL_FACTOR
-$v
1 0 0
0 1 0
0 0 1
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x2=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_cubiclaves () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_cubiclaves

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=F

ATOMS_PER_CONVENTIONAL_CELL=24
ATOMS_PER_SUBCELL=6

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="2 4"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_cubiclaves \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
sup_cubiclaves crystal $SUPERCELL_FACTOR
-$v
0.0 0.5 0.5
0.5 0.0 0.5
0.5 0.5 0.0
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.125 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.125 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.125 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.875 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.875 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.875 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x3=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y3=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z3=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x4=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y4=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z4=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x5=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y5=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z5=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x6=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y6=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z6=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
echo $x3 " " $y3 " " $z3 >> POSCAR
echo $x4 " " $y4 " " $z4 >> POSCAR
echo $x5 " " $y5 " " $z5 >> POSCAR
echo $x6 " " $y6 " " $z6 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_cuprite () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_cuprite

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=6
ATOMS_PER_SUBCELL=6

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="4 2"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_cuprite \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
sup_cuprite crystal $SUPERCELL_FACTOR
-$v
1 0 0
0 1 0
0 0 1
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x3=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y3=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z3=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x4=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y4=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z4=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
echo $x3 " " $y3 " " $z3 >> POSCAR
echo $x4 " " $y4 " " $z4 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x5=`echo $d \* $nx - $d + $d \* 0.25 | bc -l`
y5=`echo $d \* $ny - $d + $d \* 0.25 | bc -l`
z5=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
x6=`echo $d \* $nx - $d + $d \* 0.75 | bc -l`
y6=`echo $d \* $ny - $d + $d \* 0.75 | bc -l`
z6=`echo $d \* $nz - $d + $d \* 0.75 | bc -l`
echo $x5 " " $y5 " " $z5 >> POSCAR
echo $x6 " " $y6 " " $z6 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_dhcp () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_dhcp

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=hexagonal
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=4
ATOMS_PER_SUBCELL=4

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="4"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

C_A_RATIO_sup_dhcp=3.26598

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_dhcp \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
sup_dhcp crystal $SUPERCELL_FACTOR
-$v
0.5 -0.86602540378443864676372317075294 0
0.5 0.86602540378443864676372317075294 0
0 0 $C_A_RATIO_sup_dhcp
$POTCAR
$natoms1
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x3=`echo $d \* $nx - $d + $d \* 0.3333333333333333333333 | bc -l`
y3=`echo $d \* $ny - $d + $d \* 0.6666666666666666666666 | bc -l`
z3=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
x4=`echo $d \* $nx - $d + $d \* 0.6666666666666666666666 | bc -l`
y4=`echo $d \* $ny - $d + $d \* 0.3333333333333333333333 | bc -l`
z4=`echo $d \* $nz - $d + $d \* 0.75 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
echo $x3 " " $y3 " " $z3 >> POSCAR
echo $x4 " " $y4 " " $z4 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_diamond () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_diamond

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=F

ATOMS_PER_CONVENTIONAL_CELL=8
ATOMS_PER_SUBCELL=2

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="2"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_diamond \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
sup_diamond crystal $SUPERCELL_FACTOR
-$v
0.0 0.5 0.5
0.5 0.0 0.5
0.5 0.5 0.0
$POTCAR
$natoms1
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* -0.125 | bc -l`
y1=`echo $d \* $ny - $d + $d \* -0.125 | bc -l`
z1=`echo $d \* $nz - $d + $d \* -0.125 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.125 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.125 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.125 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_diamond_c () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_diamond_c

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=F

ATOMS_PER_CONVENTIONAL_CELL=8
ATOMS_PER_SUBCELL=8

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="8"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_diamond_c \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
sup_diamond_c crystal $SUPERCELL_FACTOR
-$v
1 0 0
0 1 0
0 0 1
$POTCAR
$natoms1
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x3=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y3=`echo $d \* $ny - $d + $d \* 0 | bc -l`
z3=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x4=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y4=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z4=`echo $d \* $nz - $d + $d \* 0 | bc -l`
x5=`echo $d \* $nx - $d + $d \* 0.25 | bc -l`
y5=`echo $d \* $ny - $d + $d \* 0.25 | bc -l`
z5=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
x6=`echo $d \* $nx - $d + $d \* 0.25 | bc -l`
y6=`echo $d \* $ny - $d + $d \* 0.75 | bc -l`
z6=`echo $d \* $nz - $d + $d \* 0.75 | bc -l`
x7=`echo $d \* $nx - $d + $d \* 0.75 | bc -l`
y7=`echo $d \* $ny - $d + $d \* 0.25 | bc -l`
z7=`echo $d \* $nz - $d + $d \* 0.75 | bc -l`
x8=`echo $d \* $nx - $d + $d \* 0.75 | bc -l`
y8=`echo $d \* $ny - $d + $d \* 0.75 | bc -l`
z8=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
echo $x3 " " $y3 " " $z3 >> POSCAR
echo $x4 " " $y4 " " $z4 >> POSCAR
echo $x5 " " $y5 " " $z5 >> POSCAR
echo $x6 " " $y6 " " $z6 >> POSCAR
echo $x7 " " $y7 " " $z7 >> POSCAR
echo $x8 " " $y8 " " $z8 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_fcc () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_fcc

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=F

ATOMS_PER_CONVENTIONAL_CELL=4
ATOMS_PER_SUBCELL=1

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_fcc \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
sup_fcc crystal $SUPERCELL_FACTOR
-$v
0.0 0.5 0.5
0.5 0.0 0.5
0.5 0.5 0.0
$POTCAR
$natoms1
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_fcc_c () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_fcc_c

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=F

ATOMS_PER_CONVENTIONAL_CELL=4
ATOMS_PER_SUBCELL=4

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="4"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_fcc_c \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
sup_fcc_c crystal $SUPERCELL_FACTOR
-$v
1 0 0
0 1 0
0 0 1
$POTCAR
$natoms1
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x3=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y3=`echo $d \* $ny - $d + $d \* 0 | bc -l`
z3=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x4=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y4=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z4=`echo $d \* $nz - $d + $d \* 0 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
echo $x3 " " $y3 " " $z3 >> POSCAR
echo $x4 " " $y4 " " $z4 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_fluorite () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_fluorite

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=F

ATOMS_PER_CONVENTIONAL_CELL=12
ATOMS_PER_SUBCELL=3

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1 2"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_fluorite \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
sup_fluorite crystal $SUPERCELL_FACTOR
-$v
0.0 0.5 0.5
0.5 0.0 0.5
0.5 0.5 0.0
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x2=`echo $d \* $nx - $d + $d \* 0.25 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.25 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
x3=`echo $d \* $nx - $d + $d \* -0.25 | bc -l`
y3=`echo $d \* $ny - $d + $d \* -0.25 | bc -l`
z3=`echo $d \* $nz - $d + $d \* -0.25 | bc -l`
echo $x2 " " $y2 " " $z2 >> POSCAR
echo $x3 " " $y3 " " $z3 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_graphite () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_graphite

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=hexagonal
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=4
ATOMS_PER_SUBCELL=4

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="4"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

C_A_RATIO_sup_graphite=2.00000

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_graphite \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
sup_graphite crystal $SUPERCELL_FACTOR
-$v
0.5 -0.86602540378443864676372317075294 0
0.5 0.86602540378443864676372317075294 0
0 0 $C_A_RATIO_sup_graphite
$POTCAR
$natoms1
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.75 | bc -l`
x3=`echo $d \* $nx - $d + $d \* 0.3333333333333333333333 | bc -l`
y3=`echo $d \* $ny - $d + $d \* 0.6666666666666666666666 | bc -l`
z3=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
x4=`echo $d \* $nx - $d + $d \* 0.6666666666666666666666 | bc -l`
y4=`echo $d \* $ny - $d + $d \* 0.3333333333333333333333 | bc -l`
z4=`echo $d \* $nz - $d + $d \* 0.75 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
echo $x3 " " $y3 " " $z3 >> POSCAR
echo $x4 " " $y4 " " $z4 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_hcp () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_hcp

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=hexagonal
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=2
ATOMS_PER_SUBCELL=2

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="2"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

C_A_RATIO_sup_hcp=1.63299

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_hcp \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
sup_hcp crystal $SUPERCELL_FACTOR
-$v
0.5 -0.86602540378443864676372317075294 0
0.5 0.86602540378443864676372317075294 0
0 0 $C_A_RATIO_sup_hcp
$POTCAR
$natoms1
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.3333333333333333333333 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.6666666666666666666666 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.6666666666666666666666 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.3333333333333333333333 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.75 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_hexagonallaves () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_hexagonallaves

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=hexagonal
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=12
ATOMS_PER_SUBCELL=12

NUMBER_OF_SHIFTS=2

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="8 4"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

C_A_RATIO_sup_hexagonallaves=1.64479
SHIFT_sup_hexagonallaves_1=-0.16988
SHIFT_sup_hexagonallaves_2=0.06681

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_hexagonallaves \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

s1=`echo $SHIFT_sup_hexagonallaves_1 | bc -l`
s2=`echo 2 \* $SHIFT_sup_hexagonallaves_1 | bc -l`
s3=`echo -2 \* $SHIFT_sup_hexagonallaves_1 | bc -l`
s4=`echo 0.0 - $SHIFT_sup_hexagonallaves_1 | bc -l`

s5=`echo $SHIFT_sup_hexagonallaves_2 | bc -l`
s6=`echo -$SHIFT_sup_hexagonallaves_2 | bc -l`
s7=`echo 0.5 + $SHIFT_sup_hexagonallaves_2 | bc -l`
s8=`echo 0.5 - $SHIFT_sup_hexagonallaves_2 | bc -l`

cat > POSCAR << EOF
sup_hexagonallaves crystal $SUPERCELL_FACTOR
-$v
0.5 -0.86602540378443864676372317075294 0
0.5 0.86602540378443864676372317075294 0
0 0 $C_A_RATIO_sup_hexagonallaves
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x3=`echo $d \* $nx - $d + $d \* $s1 | bc -l`
y3=`echo $d \* $ny - $d + $d \* $s2 | bc -l`
z3=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
x4=`echo $d \* $nx - $d + $d \* $s3 | bc -l`
y4=`echo $d \* $ny - $d + $d \* $s4 | bc -l`
z4=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
x5=`echo $d \* $nx - $d + $d \* $s1 | bc -l`
y5=`echo $d \* $ny - $d + $d \* $s4 | bc -l`
z5=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
x6=`echo $d \* $nx - $d + $d \* $s4 | bc -l`
y6=`echo $d \* $ny - $d + $d \* $s3 | bc -l`
z6=`echo $d \* $nz - $d + $d \* 0.75 | bc -l`
x7=`echo $d \* $nx - $d + $d \* $s2 | bc -l`
y7=`echo $d \* $ny - $d + $d \* $s1 | bc -l`
z7=`echo $d \* $nz - $d + $d \* 0.75 | bc -l`
x8=`echo $d \* $nx - $d + $d \* $s4 | bc -l`
y8=`echo $d \* $ny - $d + $d \* $s1 | bc -l`
z8=`echo $d \* $nz - $d + $d \* 0.75 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
echo $x3 " " $y3 " " $z3 >> POSCAR
echo $x4 " " $y4 " " $z4 >> POSCAR
echo $x5 " " $y5 " " $z5 >> POSCAR
echo $x6 " " $y6 " " $z6 >> POSCAR
echo $x7 " " $y7 " " $z7 >> POSCAR
echo $x8 " " $y8 " " $z8 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x9=`echo $d \* $nx - $d + $d \* 0.3333333333333333333333 | bc -l`
y9=`echo $d \* $ny - $d + $d \* 0.6666666666666666666666 | bc -l`
z9=`echo $d \* $nz - $d + $d \* $s5 | bc -l`
x10=`echo $d \* $nx - $d + $d \* 0.6666666666666666666666 | bc -l`
y10=`echo $d \* $ny - $d + $d \* 0.3333333333333333333333 | bc -l`
z10=`echo $d \* $nz - $d + $d \* $s6 | bc -l`
x11=`echo $d \* $nx - $d + $d \* 0.6666666666666666666666 | bc -l`
y11=`echo $d \* $ny - $d + $d \* 0.3333333333333333333333 | bc -l`
z11=`echo $d \* $nz - $d + $d \* $s7 | bc -l`
x12=`echo $d \* $nx - $d + $d \* 0.3333333333333333333333 | bc -l`
y12=`echo $d \* $ny - $d + $d \* 0.6666666666666666666666 | bc -l`
z12=`echo $d \* $nz - $d + $d \* $s8 | bc -l`
echo $x9 " " $y9 " " $z9 >> POSCAR
echo $x10 " " $y10 " " $z10 >> POSCAR
echo $x11 " " $y11 " " $z11 >> POSCAR
echo $x12 " " $y12 " " $z12 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

row=$(sed -n '11p' < CONTCAR)    # nth atom + 8
column=${row[0]}
shift_sup_hexagonallaves_1=`echo $column \* $SUPERCELL_FACTOR | bc -l`

row=$(sed -n '17p' < CONTCAR)    # nth atom + 8
column=${row[2]}
shift_sup_hexagonallaves_2=`echo $column \* $SUPERCELL_FACTOR | bc -l`

if [ "$UPDATEVARIABLES" = true ]; then
SHIFT_sup_hexagonallaves_1=$shift_sup_hexagonallaves_1
SHIFT_sup_hexagonallaves_2=$shift_sup_hexagonallaves_2
fi

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_molybdenite () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_molybdenite

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=hexagonal
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=6
ATOMS_PER_SUBCELL=6

NUMBER_OF_SHIFTS=1

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="2 4"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

C_A_RATIO_sup_molybdenite=3.88924
SHIFT_sup_molybdenite_1=0.62000

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_molybdenite \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

s1=`echo $SHIFT_sup_molybdenite_1 | bc -l`
s2=`echo 0.5 + $SHIFT_sup_molybdenite_1 | bc -l`
s3=`echo 0.5 - $SHIFT_sup_molybdenite_1 | bc -l`
s4=`echo - $SHIFT_sup_molybdenite_1 | bc -l`

cat > POSCAR << EOF
sup_molybdenite crystal $SUPERCELL_FACTOR
-$v
0.5 -0.86602540378443864676372317075294 0
0.5 0.86602540378443864676372317075294 0
0 0 $C_A_RATIO_sup_molybdenite
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.3333333333333333333333 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.6666666666666666666666 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.6666666666666666666666 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.3333333333333333333333 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.75 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x3=`echo $d \* $nx - $d + $d \* 0.3333333333333333333333 | bc -l`
y3=`echo $d \* $ny - $d + $d \* 0.6666666666666666666666 | bc -l`
z3=`echo $d \* $nz - $d + $d \* $s1 | bc -l`
x4=`echo $d \* $nx - $d + $d \* 0.6666666666666666666666 | bc -l`
y4=`echo $d \* $ny - $d + $d \* 0.3333333333333333333333 | bc -l`
z4=`echo $d \* $nz - $d + $d \* $s2 | bc -l`
x5=`echo $d \* $nx - $d + $d \* 0.3333333333333333333333 | bc -l`
y5=`echo $d \* $ny - $d + $d \* 0.6666666666666666666666 | bc -l`
z5=`echo $d \* $nz - $d + $d \* $s3 | bc -l`
x6=`echo $d \* $nx - $d + $d \* 0.6666666666666666666666 | bc -l`
y6=`echo $d \* $ny - $d + $d \* 0.3333333333333333333333 | bc -l`
z6=`echo $d \* $nz - $d + $d \* $s4 | bc -l`
echo $x3 " " $y3 " " $z3 >> POSCAR
echo $x4 " " $y4 " " $z4 >> POSCAR
echo $x5 " " $y5 " " $z5 >> POSCAR
echo $x6 " " $y6 " " $z6 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

row=$(sed -n '11p' < CONTCAR)    # nth atom + 8
column=${row[2]}
shift_sup_molybdenite_1=`echo $column \* $SUPERCELL_FACTOR | bc -l`

if [ "$UPDATEVARIABLES" = true ]; then
SHIFT_sup_molybdenite_1=$shift_sup_molybdenite_1
fi

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_nacl () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_nacl

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=F

ATOMS_PER_CONVENTIONAL_CELL=8
ATOMS_PER_SUBCELL=2

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1 1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_nacl \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
sup_nacl crystal $SUPERCELL_FACTOR
-$v
0.0 0.5 0.5
0.5 0.0 0.5
0.5 0.5 0.0
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x2=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_nickeline () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_nickeline

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=hexagonal
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=4
ATOMS_PER_SUBCELL=4

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="2 2"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

C_A_RATIO_sup_nickeline=1.63299

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_nickeline \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
sup_nickeline crystal $SUPERCELL_FACTOR
-$v
0.5 -0.86602540378443864676372317075294 0
0.5 0.86602540378443864676372317075294 0
0 0 $C_A_RATIO_sup_nickeline
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x3=`echo $d \* $nx - $d + $d \* 0.3333333333333333333333 | bc -l`
y3=`echo $d \* $ny - $d + $d \* 0.6666666666666666666666 | bc -l`
z3=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
x4=`echo $d \* $nx - $d + $d \* 0.6666666666666666666666 | bc -l`
y4=`echo $d \* $ny - $d + $d \* 0.3333333333333333333333 | bc -l`
z4=`echo $d \* $nz - $d + $d \* 0.75 | bc -l`
echo $x3 " " $y3 " " $z3 >> POSCAR
echo $x4 " " $y4 " " $z4 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_pyrite () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_pyrite

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=12
ATOMS_PER_SUBCELL=12

NUMBER_OF_SHIFTS=1

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="4 8"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

SHIFT_sup_pyrite_1=0.38600

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_pyrite \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

s1=`echo $SHIFT_sup_pyrite_1 | bc -l`
s2=`echo 0.5 + $SHIFT_sup_pyrite_1 | bc -l`
s3=`echo 0.5 - $SHIFT_sup_pyrite_1 | bc -l`

cat > POSCAR << EOF
sup_pyrite crystal $SUPERCELL_FACTOR
-$v
1 0 0
0 1 0
0 0 1
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x3=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y3=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z3=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x4=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y4=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z4=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
echo $x3 " " $y3 " " $z3 >> POSCAR
echo $x4 " " $y4 " " $z4 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x5=`echo $d \* $nx - $d + $d \* $s1 | bc -l`
y5=`echo $d \* $ny - $d + $d \* $s1 | bc -l`
z5=`echo $d \* $nz - $d + $d \* $s1 | bc -l`
x6=`echo $d \* $nx - $d + $d \* -$s1 | bc -l`
y6=`echo $d \* $ny - $d + $d \* -$s1 | bc -l`
z6=`echo $d \* $nz - $d + $d \* -$s1 | bc -l`
x7=`echo $d \* $nx - $d + $d \* $s2 | bc -l`
y7=`echo $d \* $ny - $d + $d \* $s3 | bc -l`
z7=`echo $d \* $nz - $d + $d \* -$s1 | bc -l`
x8=`echo $d \* $nx - $d + $d \* -$s2 | bc -l`
y8=`echo $d \* $ny - $d + $d \* -$s3 | bc -l`
z8=`echo $d \* $nz - $d + $d \* $s1 | bc -l`
x9=`echo $d \* $nx - $d + $d \* -$s1 | bc -l`
y9=`echo $d \* $ny - $d + $d \* $s2 | bc -l`
z9=`echo $d \* $nz - $d + $d \* $s3 | bc -l`
x10=`echo $d \* $nx - $d + $d \* $s1 | bc -l`
y10=`echo $d \* $ny - $d + $d \* -$s2 | bc -l`
z10=`echo $d \* $nz - $d + $d \* -$s3 | bc -l`
x11=`echo $d \* $nx - $d + $d \* $s3 | bc -l`
y11=`echo $d \* $ny - $d + $d \* -$s1 | bc -l`
z11=`echo $d \* $nz - $d + $d \* $s2 | bc -l`
x12=`echo $d \* $nx - $d + $d \* -$s3 | bc -l`
y12=`echo $d \* $ny - $d + $d \* $s1 | bc -l`
z12=`echo $d \* $nz - $d + $d \* -$s2 | bc -l`
echo $x5 " " $y5 " " $z5 >> POSCAR
echo $x6 " " $y6 " " $z6 >> POSCAR
echo $x7 " " $y7 " " $z7 >> POSCAR
echo $x8 " " $y8 " " $z8 >> POSCAR
echo $x9 " " $y9 " " $z9 >> POSCAR
echo $x10 " " $y10 " " $z10 >> POSCAR
echo $x11 " " $y11 " " $z11 >> POSCAR
echo $x12 " " $y12 " " $z12 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

row=$(sed -n '13p' < CONTCAR)    # nth atom + 8
column=${row[2]}
shift_sup_pyrite_1=`echo $column \* $SUPERCELL_FACTOR | bc -l`

if [ "$UPDATEVARIABLES" = true ]; then
SHIFT_sup_pyrite_1=$shift_sup_pyrite_1
fi

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_rutile () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_rutile

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=tetragonal
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=6
ATOMS_PER_SUBCELL=6

NUMBER_OF_SHIFTS=1

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="2 4"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

C_A_RATIO_sup_rutile=0.64395
SHIFT_sup_rutile_1=0.30530

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_rutile \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

s1=`echo $SHIFT_sup_rutile_1 | bc -l`
s2=`echo 0.5 + $SHIFT_sup_rutile_1 | bc -l`
s3=`echo 0.5 - $SHIFT_sup_rutile_1 | bc -l`

cat > POSCAR << EOF
sup_rutile crystal $SUPERCELL_FACTOR
-$v
1 0 0
0 1 0
0 0 $C_A_RATIO_sup_rutile
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x3=`echo $d \* $nx - $d + $d \* $s1 | bc -l`
y3=`echo $d \* $ny - $d + $d \* $s1 | bc -l`
z3=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x4=`echo $d \* $nx - $d + $d \* -$s1 | bc -l`
y4=`echo $d \* $ny - $d + $d \* -$s1 | bc -l`
z4=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x5=`echo $d \* $nx - $d + $d \* $s2 | bc -l`
y5=`echo $d \* $ny - $d + $d \* $s3 | bc -l`
z5=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x6=`echo $d \* $nx - $d + $d \* $s3 | bc -l`
y6=`echo $d \* $ny - $d + $d \* $s2 | bc -l`
z6=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
echo $x3 " " $y3 " " $z3 >> POSCAR
echo $x4 " " $y4 " " $z4 >> POSCAR
echo $x5 " " $y5 " " $z5 >> POSCAR
echo $x6 " " $y6 " " $z6 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

row=$(sed -n '11p' < CONTCAR)    # nth atom + 8
column=${row[0]}
shift_sup_rutile_1=`echo $column \* $SUPERCELL_FACTOR | bc -l`

if [ "$UPDATEVARIABLES" = true ]; then
SHIFT_sup_rutile_1=$shift_sup_rutile_1
fi

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_sc () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_sc

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=1
ATOMS_PER_SUBCELL=1

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_sc \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
sup_sc crystal $SUPERCELL_FACTOR
-$v
1 0 0
0 1 0
0 0 1
$POTCAR
$natoms1
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_tridymite () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_tridymite

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=hexagonal
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=12
ATOMS_PER_SUBCELL=12

NUMBER_OF_SHIFTS=1

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="4 8"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

C_A_RATIO_sup_tridymite=1.63698
SHIFT_sup_tridymite_1=0.06200

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_tridymite \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

s1=`echo $SHIFT_sup_tridymite_1 | bc -l`
s2=`echo -$SHIFT_sup_tridymite_1 | bc -l`
s3=`echo 0.5 + $SHIFT_sup_tridymite_1 | bc -l`
s4=`echo 0.5 - $SHIFT_sup_tridymite_1 | bc -l`


cat > POSCAR << EOF
sup_tridymite crystal $SUPERCELL_FACTOR
-$v
0.5 -0.86602540378443864676372317075294 0
0.5 0.86602540378443864676372317075294 0
0 0 $C_A_RATIO_sup_tridymite
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.3333333333333333333333 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.6666666666666666666666 | bc -l`
z1=`echo $d \* $nz - $d + $d \* $s1 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.6666666666666666666666 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.3333333333333333333333 | bc -l`
z2=`echo $d \* $nz - $d + $d \* $s2 | bc -l`
x3=`echo $d \* $nx - $d + $d \* 0.6666666666666666666666 | bc -l`
y3=`echo $d \* $ny - $d + $d \* 0.3333333333333333333333 | bc -l`
z3=`echo $d \* $nz - $d + $d \* $s3 | bc -l`
x4=`echo $d \* $nx - $d + $d \* 0.3333333333333333333333 | bc -l`
y4=`echo $d \* $ny - $d + $d \* 0.6666666666666666666666 | bc -l`
z4=`echo $d \* $nz - $d + $d \* $s4 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
echo $x3 " " $y3 " " $z3 >> POSCAR
echo $x4 " " $y4 " " $z4 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x5=`echo $d \* $nx - $d + $d \* 0.3333333333333333333333 | bc -l`
y5=`echo $d \* $ny - $d + $d \* 0.6666666666666666666666 | bc -l`
z5=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
x6=`echo $d \* $nx - $d + $d \* 0.6666666666666666666666 | bc -l`
y6=`echo $d \* $ny - $d + $d \* 0.3333333333333333333333 | bc -l`
z6=`echo $d \* $nz - $d + $d \* 0.75 | bc -l`
x7=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y7=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z7=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x8=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y8=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z8=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x9=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y9=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z9=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x10=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y10=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z10=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x11=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y11=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z11=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
x12=`echo $d \* $nx - $d + $d \* 0.5 | bc -l`
y12=`echo $d \* $ny - $d + $d \* 0.5 | bc -l`
z12=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
echo $x5 " " $y5 " " $z5 >> POSCAR
echo $x6 " " $y6 " " $z6 >> POSCAR
echo $x7 " " $y7 " " $z7 >> POSCAR
echo $x8 " " $y8 " " $z8 >> POSCAR
echo $x9 " " $y9 " " $z9 >> POSCAR
echo $x10 " " $y10 " " $z10 >> POSCAR
echo $x11 " " $y11 " " $z11 >> POSCAR
echo $x12 " " $y12 " " $z12 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

row=$(sed -n '9p' < CONTCAR)    # nth atom + 8
column=${row[2]}
shift_sup_tridymite_1=`echo $column \* $SUPERCELL_FACTOR | bc -l`

if [ "$UPDATEVARIABLES" = true ]; then
SHIFT_sup_tridymite_1=$shift_sup_tridymite_1
fi

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_wurtzite () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_wurtzite

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=hexagonal
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=4
ATOMS_PER_SUBCELL=4

NUMBER_OF_SHIFTS=1

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="2 2"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

C_A_RATIO_sup_wurtzite=1.63299
SHIFT_sup_wurtzite_1=0.37480

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_wurtzite \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

s1=`echo $SHIFT_sup_wurtzite_1 | bc -l`
s2=`echo 0.5 + $SHIFT_sup_wurtzite_1 | bc -l`

cat > POSCAR << EOF
sup_wurtzite crystal $SUPERCELL_FACTOR
-$v
0.5 -0.86602540378443864676372317075294 0
0.5 0.86602540378443864676372317075294 0
0 0 $C_A_RATIO_sup_wurtzite
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.3333333333333333333333 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.6666666666666666666666 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
x2=`echo $d \* $nx - $d + $d \* 0.6666666666666666666666 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.3333333333333333333333 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.5 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x3=`echo $d \* $nx - $d + $d \* 0.3333333333333333333333 | bc -l`
y3=`echo $d \* $ny - $d + $d \* 0.6666666666666666666666 | bc -l`
z3=`echo $d \* $nz - $d + $d \* $s1 | bc -l`
x4=`echo $d \* $nx - $d + $d \* 0.6666666666666666666666 | bc -l`
y4=`echo $d \* $ny - $d + $d \* 0.3333333333333333333333 | bc -l`
z4=`echo $d \* $nz - $d + $d \* $s2 | bc -l`
echo $x3 " " $y3 " " $z3 >> POSCAR
echo $x4 " " $y4 " " $z4 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

row=$(sed -n '11p' < CONTCAR)    # nth atom + 8
column=${row[2]}
shift_sup_wurtzite_1=`echo $column \* $SUPERCELL_FACTOR | bc -l`

if [ "$UPDATEVARIABLES" = true ]; then
SHIFT_sup_wurtzite_1=$shift_sup_wurtzite_1
fi

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_zincblende () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_zincblende

STRUCTURE_TYPE=crystal
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=F

ATOMS_PER_CONVENTIONAL_CELL=8
ATOMS_PER_SUBCELL=2

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=2
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1 1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

v=`echo $ATOMS_PER_SUBCELL \* $VOLUME_sup_zincblende \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}
natoms2=${array[1]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
natoms2=`echo $natoms2 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

cat > POSCAR << EOF
sup_zincblende crystal $SUPERCELL_FACTOR
-$v
0.0 0.5 0.5
0.5 0.0 0.5
0.5 0.5 0.0
$POTCAR
$natoms1 $natoms2
Direct
EOF

d=`echo 1.0 / $SUPERCELL_FACTOR | bc -l`

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x1=`echo $d \* $nx - $d + $d \* 0.0 | bc -l`
y1=`echo $d \* $ny - $d + $d \* 0.0 | bc -l`
z1=`echo $d \* $nz - $d + $d \* 0.0 | bc -l`
echo $x1 " " $y1 " " $z1 >> POSCAR
done
done
done
for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
x2=`echo $d \* $nx - $d + $d \* 0.25 | bc -l`
y2=`echo $d \* $ny - $d + $d \* 0.25 | bc -l`
z2=`echo $d \* $nz - $d + $d \* 0.25 | bc -l`
echo $x2 " " $y2 " " $z2 >> POSCAR
done
done
done

if [ "$READSHIFTS" = true ]; then
cat > readshifts << EOF
readshifts () {

x=x

}
EOF
fi

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
addadsorbate () {

name="ADSORPTION_DISTANCE_${1}"
adsdist=`echo ${!name}`

h=`echo 9 + $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $NUMBER_OF_LAYERS \* $NUMBER_OF_ATOMS_PER_LAYER_PER_CELL | bc -l`
harray=($(sed -n "$h"'p' < POSCAR))
hight=${harray[2]}

vector1=($(sed -n '3p' < POSCAR))
vector2=($(sed -n '4p' < POSCAR))

vector11=${vector1[0]}
vector12=${vector1[1]}
vector21=${vector2[0]}
vector22=${vector2[1]}

vector11=`echo $vector11 / $SUPERCELL_FACTOR  | bc -l`
vector12=`echo $vector12 / $SUPERCELL_FACTOR  | bc -l`
vector21=`echo $vector21 / $SUPERCELL_FACTOR  | bc -l`
vector22=`echo $vector22 / $SUPERCELL_FACTOR  | bc -l`

array1=($2)
adir=${array1[0]}
bdir=${array1[1]}

array2=($3)
asup=${array2[0]}
bsup=${array2[1]}

let asup=$asup-1
let bsup=$bsup-1

mkdir teemp
cd teemp
$1
cd ..
rm -r teemp

setpotcar $POTCAR $4
sed -i "/surface/{n;n;n;n;n;s/.*/$POTCAR/}" POSCAR
buildpotcar


for irrr in $(seq 1 1 $ATOMS_PER_SUBCELL) ; do

fjhvbu=$(sed -n '7p' < POSCAR)
fjhvbu=$fjhvbu" 1"
sed -i "/surface/{n;n;n;n;n;n;s/.*/$fjhvbu/}" POSCAR

name="POSITION_ATOM_${irrr}_${1}"
poss=`echo ${!name}`

pos=($poss)
value1=${pos[0]}
value2=${pos[1]}
value3=${pos[2]}

let h2=$h+$irrr+$numberofatomsthatwereaddedbefore-1

value1=`echo $asup \* $vector11 + $bsup \* $vector21 + $adir \* $vector11 + $bdir \* $vector21 + $value1 | bc -l`
value2=`echo $asup \* $vector12 + $bsup \* $vector22 + $adir \* $vector12 + $bdir \* $vector22 + $value2 | bc -l`
value3=`echo $hight + $adsdist + $value3 | bc -l`


btbeb=" $value1 $value2 $value3 T T T"

sed -i "$h2""a $btbeb" POSCAR

done

let numberofatomsthatwereaddedbefore=$numberofatomsthatwereaddedbefore+$ATOMS_PER_SUBCELL

source poscardescription
poscardescription

}
 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
addsubstitution () {

natpelarray=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
elemarray=($POTCAR)

array=($3)
a=${array[0]}
b=${array[1]}
c=${array[2]}

for irrr in $(seq 0 1 8); do
if [ "${elemarray[$irrr]}" = $1 ]; then

jhct=($(sed -n '7p' < POSCAR))
jdcnj=${jhct[$irrr]}
let fvvwknf=$jdcnj-1
jhct[$irrr]=$fvvwknf
sdfvfkjvn=${jhct[@]}
sed -i "/crystal/{n;n;n;n;n;n;s/.*/$sdfvfkjvn/}" POSCAR


m=0

if [ "$NUMBER_OF_ELEMENTS" != 1 ]; then
for jrrr in $(seq 1 1 $irrr); do
let jrrr=$jrrr-1

echo "hello"

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
let m=$m+${natpelarray[$jrrr]}
done
done
done

done
fi

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
let m=$m+${natpelarray[$irrr]}
if [ "$nx $ny $nz" = "$a $b $c" ]; then
break 3
fi
done
done
done


let m=8+$m+$2-${natpelarray[$irrr]}

btbeb=$(sed -n "$m"'p' < POSCAR)

sed -i "$m"'d' POSCAR

setpotcar $POTCAR $4
sed -i "/crystal/{n;n;n;n;n;s/.*/$POTCAR/}" POSCAR
buildpotcar

fjhvbu=$(sed -n '7p' < POSCAR)
fjhvbu=$fjhvbu" 1"
sed -i "/crystal/{n;n;n;n;n;n;s/.*/$fjhvbu/}" POSCAR


let M=7+$ATOMS_PER_SUBCELL*$SUPERCELL_FACTOR*$SUPERCELL_FACTOR*$SUPERCELL_FACTOR
sed -i "$M""a $btbeb" POSCAR

fi
done


}
 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
addvacancy () {

natpelarray=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
elemarray=($POTCAR)

array=($3)
a=${array[0]}
b=${array[1]}
c=${array[2]}

for irrr in $(seq 0 1 8); do
if [ "${elemarray[$irrr]}" = $1 ]; then

jhct=($(sed -n '7p' < POSCAR))
jdcnj=${jhct[$irrr]}
let fvvwknf=$jdcnj-1
jhct[$irrr]=$fvvwknf
sdfvfkjvn=${jhct[@]}
sed -i "/crystal/{n;n;n;n;n;n;s/.*/$sdfvfkjvn/}" POSCAR


m=0

if [ "$NUMBER_OF_ELEMENTS" != 1 ]; then
for jrrr in $(seq 1 1 $irrr); do
let jrrr=$jrrr-1

echo "hello"

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
let m=$m+${natpelarray[$jrrr]}
done
done
done

done
fi

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do
for nz in $(seq 1 1 $SUPERCELL_FACTOR); do
let m=$m+${natpelarray[$irrr]}
if [ "$nx $ny $nz" = "$a $b $c" ]; then
break 3
fi
done
done
done


let m=8+$m+$2-${natpelarray[$irrr]}

sed -i "$m"'d' POSCAR

fi
done

}


 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
bent_mol () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=molecule

ATOMS_PER_SUBCELL=3

}
EOF

source poscardescription
poscardescription

cat > defaultatomicpositions << EOF
defaultatomicpositions () {

POSITION_ATOM_1_bent_mol="0 0 0"
POSITION_ATOM_2_bent_mol="0 1 0.5"
POSITION_ATOM_3_bent_mol="0 -1 0.5"

}
EOF

xx=`echo $MOLECULE_CELL_SIZE_bent_mol \* $SUPERCELL_FACTOR - $MOLECULE_ASYMETRY_bent_mol | bc -l`
yy=`echo $MOLECULE_CELL_SIZE_bent_mol \* $SUPERCELL_FACTOR | bc -l`
zz=`echo $MOLECULE_CELL_SIZE_bent_mol \* $SUPERCELL_FACTOR + $MOLECULE_ASYMETRY_bent_mol | bc -l`

cat > POSCAR << EOF
bent_mol molecule
1.0
$xx 0 0
0 $yy 0
0 0 $zz
$POTCAR
1 1 1
Cartesian
$POSITION_ATOM_1_bent_mol
$POSITION_ATOM_2_bent_mol
$POSITION_ATOM_3_bent_mol
EOF

}

 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
diatomic_mol () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=molecule

ATOMS_PER_SUBCELL=2

}
EOF

source poscardescription
poscardescription

cat > defaultatomicpositions << EOF
defaultatomicpositions () {

POSITION_ATOM_1_diatomic_mol="0 0 0"
POSITION_ATOM_2_diatomic_mol="0 0 1"

}
EOF

xx=`echo $MOLECULE_CELL_SIZE_diatomic_mol \* $SUPERCELL_FACTOR - $MOLECULE_ASYMETRY_diatomic_mol | bc -l`
yy=`echo $MOLECULE_CELL_SIZE_diatomic_mol \* $SUPERCELL_FACTOR | bc -l`
zz=`echo $MOLECULE_CELL_SIZE_diatomic_mol \* $SUPERCELL_FACTOR + $MOLECULE_ASYMETRY_diatomic_mol | bc -l`

cat > POSCAR << EOF
diatomic_mol molecule
1.0
$xx 0 0
0 $yy 0
0 0 $zz
$POTCAR
1 1
Cartesian
$POSITION_ATOM_1_diatomic_mol
$POSITION_ATOM_2_diatomic_mol
EOF

}
 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
linear_mol () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=molecule

ATOMS_PER_SUBCELL=3

}
EOF

source poscardescription
poscardescription

cat > defaultatomicpositions << EOF
defaultatomicpositions () {

POSITION_ATOM_1_linear_mol="0 0 0"
POSITION_ATOM_2_linear_mol="0 0 1"
POSITION_ATOM_3_linear_mol="0 0 2"

}
EOF

xx=`echo $MOLECULE_CELL_SIZE_linear_mol \* $SUPERCELL_FACTOR - $MOLECULE_ASYMETRY_linear_mol | bc -l`
yy=`echo $MOLECULE_CELL_SIZE_linear_mol \* $SUPERCELL_FACTOR | bc -l`
zz=`echo $MOLECULE_CELL_SIZE_linear_mol \* $SUPERCELL_FACTOR + $MOLECULE_ASYMETRY_linear_mol | bc -l`

cat > POSCAR << EOF
linear_mol molecule
1.0
$xx 0 0
0 $yy 0
0 0 $zz
$POTCAR
1 1 1
Cartesian
$POSITION_ATOM_1_linear_mol
$POSITION_ATOM_2_linear_mol
$POSITION_ATOM_3_linear_mol
EOF

}

 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
monatomic_mol () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1

STRUCTURE_TYPE=molecule

ATOMS_PER_SUBCELL=1

}
EOF

source poscardescription
poscardescription

cat > defaultatomicpositions << EOF
defaultatomicpositions () {

POSITION_ATOM_1_monatomic_mol="0 0 0"

}
EOF

xx=`echo $MOLECULE_CELL_SIZE_monatomic_mol \* $SUPERCELL_FACTOR - $MOLECULE_ASYMETRY_monatomic_mol | bc -l`
yy=`echo $MOLECULE_CELL_SIZE_monatomic_mol \* $SUPERCELL_FACTOR | bc -l`
zz=`echo $MOLECULE_CELL_SIZE_monatomic_mol \* $SUPERCELL_FACTOR + $MOLECULE_ASYMETRY_monatomic_mol | bc -l`

cat > POSCAR << EOF
monatomic_mol molecule
1.0
$xx 0 0
0 $yy 0
0 0 $zz
$POTCAR
1 
Cartesian
$POSITION_ATOM_1_monatomic_mol
EOF

}

 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
bcc_100 () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1
NUMBER_OF_LAYERS=$NUMBER_OF_LAYERS_bcc_100

STRUCTURE_TYPE=surface
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=I

ATOMS_PER_CONVENTIONAL_CELL=2
ATOMS_PER_SUBCELL=2

NUMBER_OF_ATOMS_PER_LAYER_PER_CELL=1

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $NUMBER_OF_LAYERS | bc -l`

v=`echo $ATOMS_PER_CONVENTIONAL_CELL \* $VOLUME_bcc_100 | bc -l`
c=`echo " e( l($v)/3 ) " | bc -l`
c=`echo $c \* $SUPERCELL_FACTOR / 1.4142135623730950488016887242097 | bc -l`
h=`echo 0.5 \* $NUMBER_OF_LAYERS / $SUPERCELL_FACTOR + $VACUUM_SIZE_bcc_100 / $c | bc -l`

xx=`echo 1 \* $c | bc -l`
xy=`echo 0 \* $c | bc -l`
xz=`echo 0 \* $c | bc -l`
yx=`echo 0 \* $c | bc -l`
yy=`echo 1 \* $c | bc -l`
yz=`echo 0 \* $c | bc -l`
zx=`echo 0 \* $c | bc -l`
zy=`echo 0 \* $c | bc -l`
zz=`echo $h \* $c | bc -l`

cat > POSCAR << EOF
bcc_100 surface ; layers: $NUMBER_OF_LAYERS ; vacuum: $VACUUM_SIZE_bcc_100
1.0
$xx $xy $xz
$yx $yy $yz
$zx $zy $zz
$POTCAR
$natoms1
Selective dynamics
Cartesian
EOF

for ig in $(seq 1 1 $NUMBER_OF_LAYERS); do

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do

x1=`echo 1 \* $nx - 1 + 0 \* $ny - 0 + 0.00000000000000000000000000000000 | bc -l`
y1=`echo 0 \* $nx - 0 + 1 \* $ny - 1 + 0.00000000000000000000000000000000 | bc -l`
x2=`echo 1 \* $nx - 1 + 0 \* $ny - 0 + 0.50000000000000000000000000000000 | bc -l`
y2=`echo 0 \* $nx - 0 + 1 \* $ny - 1 + 0.50000000000000000000000000000000 | bc -l`

x1=`echo $c \* $x1 / $SUPERCELL_FACTOR | bc -l`
y1=`echo $c \* $y1 / $SUPERCELL_FACTOR | bc -l`
x2=`echo $c \* $x2 / $SUPERCELL_FACTOR | bc -l`
y2=`echo $c \* $y2 / $SUPERCELL_FACTOR | bc -l`


if [ "$LAYER_HIGHTS_bcc_100" = "defaulthights" ]; then
hight=`echo  0.5 \* $ig - 0.5 | bc -l`
hight=`echo  $c \* $hight / $SUPERCELL_FACTOR | bc -l`
else
let iii=$ig-1
hightsarray=($LAYER_HIGHTS_bcc_100)
hight=${hightsarray[$iii]}
fi

res=$(($ig % $ATOMS_PER_SUBCELL))


seldynup=`echo $NUMBER_OF_LAYERS - $ig | bc -l`
seldyndown=`echo $SELECTIVE_DYNAMICS_DEPTH_bcc_100 + 1 | bc -l`

if [ $(echo "$seldynup < $SELECTIVE_DYNAMICS_DEPTH_bcc_100" | bc) -eq 1 ]; then

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " T T T "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " T T T "  >> POSCAR
fi

elif [ $(echo "$ig < $seldyndown" | bc) -eq 1 ]; then

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " T T T "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " T T T "  >> POSCAR
fi

else

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " F F F "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " F F F "  >> POSCAR
fi

fi


done
done

done

numberofatomsthatwereaddedbefore=0

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
fcc_100 () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1
NUMBER_OF_LAYERS=$NUMBER_OF_LAYERS_fcc_100

STRUCTURE_TYPE=surface
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=F

ATOMS_PER_CONVENTIONAL_CELL=4
ATOMS_PER_SUBCELL=2

NUMBER_OF_ATOMS_PER_LAYER_PER_CELL=1

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $NUMBER_OF_LAYERS | bc -l`

v=`echo $ATOMS_PER_CONVENTIONAL_CELL \* $VOLUME_fcc_100 | bc -l`
c=`echo " e( l($v)/3 ) " | bc -l`
c=`echo $c \* $SUPERCELL_FACTOR / 1.4142135623730950488016887242097 | bc -l`
h=`echo 0.70710678118654752440084436210485 \* $NUMBER_OF_LAYERS / $SUPERCELL_FACTOR + $VACUUM_SIZE_fcc_100 / $c | bc -l`

xx=`echo 1 \* $c | bc -l`
xy=`echo 0 \* $c | bc -l`
xz=`echo 0 \* $c | bc -l`
yx=`echo 0 \* $c | bc -l`
yy=`echo 1 \* $c | bc -l`
yz=`echo 0 \* $c | bc -l`
zx=`echo 0 \* $c | bc -l`
zy=`echo 0 \* $c | bc -l`
zz=`echo $h \* $c | bc -l`

cat > POSCAR << EOF
fcc_100 surface ; layers: $NUMBER_OF_LAYERS ; vacuum: $VACUUM_SIZE_fcc_100
1.0
$xx $xy $xz
$yx $yy $yz
$zx $zy $zz
$POTCAR
$natoms1
Selective dynamics
Cartesian
EOF

for ig in $(seq 1 1 $NUMBER_OF_LAYERS); do

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do

x1=`echo 1 \* $nx - 1 + 0 \* $ny - 0 + 0.00000000000000000000000000000000 | bc -l`
y1=`echo 0 \* $nx - 0 + 1 \* $ny - 1 + 0.00000000000000000000000000000000 | bc -l`
x2=`echo 1 \* $nx - 1 + 0 \* $ny - 0 + 0.50000000000000000000000000000000 | bc -l`
y2=`echo 0 \* $nx - 0 + 1 \* $ny - 1 + 0.50000000000000000000000000000000 | bc -l`

x1=`echo $c \* $x1 / $SUPERCELL_FACTOR | bc -l`
y1=`echo $c \* $y1 / $SUPERCELL_FACTOR | bc -l`
x2=`echo $c \* $x2 / $SUPERCELL_FACTOR | bc -l`
y2=`echo $c \* $y2 / $SUPERCELL_FACTOR | bc -l`


if [ "$LAYER_HIGHTS_fcc_100" = "defaulthights" ]; then
hight=`echo  0.70710678118654752440084436210485 \* $ig - 0.70710678118654752440084436210485 | bc -l`
hight=`echo  $c \* $hight / $SUPERCELL_FACTOR | bc -l`
else
let iii=$ig-1
hightsarray=($LAYER_HIGHTS_fcc_100)
hight=${hightsarray[$iii]}
fi

res=$(($ig % $ATOMS_PER_SUBCELL))


seldynup=`echo $NUMBER_OF_LAYERS - $ig | bc -l`
seldyndown=`echo $SELECTIVE_DYNAMICS_DEPTH_fcc_100 + 1 | bc -l`

if [ $(echo "$seldynup < $SELECTIVE_DYNAMICS_DEPTH_fcc_100" | bc) -eq 1 ]; then

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " T T T "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " T T T "  >> POSCAR
fi

elif [ $(echo "$ig < $seldyndown" | bc) -eq 1 ]; then

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " T T T "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " T T T "  >> POSCAR
fi

else

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " F F F "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " F F F "  >> POSCAR
fi

fi


done
done

done

numberofatomsthatwereaddedbefore=0

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
fcc_110 () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1
NUMBER_OF_LAYERS=$NUMBER_OF_LAYERS_fcc_110

STRUCTURE_TYPE=surface
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=F

ATOMS_PER_CONVENTIONAL_CELL=4
ATOMS_PER_SUBCELL=2

NUMBER_OF_ATOMS_PER_LAYER_PER_CELL=1

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $NUMBER_OF_LAYERS | bc -l`

v=`echo $ATOMS_PER_CONVENTIONAL_CELL \* $VOLUME_fcc_110 | bc -l`
c=`echo " e( l($v)/3 ) " | bc -l`
c=`echo $c \* $SUPERCELL_FACTOR / 1.4142135623730950488016887242097 | bc -l`
h=`echo 0.5 \* $NUMBER_OF_LAYERS / $SUPERCELL_FACTOR + $VACUUM_SIZE_fcc_110 / $c | bc -l`

xx=`echo 1 \* $c | bc -l`
xy=`echo 0 \* $c | bc -l`
xz=`echo 0 \* $c | bc -l`
yx=`echo 0 \* $c | bc -l`
yy=`echo 1.4142135623730950488016887242097 \* $c | bc -l`
yz=`echo 0 \* $c | bc -l`
zx=`echo 0 \* $c | bc -l`
zy=`echo 0 \* $c | bc -l`
zz=`echo $h \* $c | bc -l`

cat > POSCAR << EOF
fcc_110 surface ; layers: $NUMBER_OF_LAYERS ; vacuum: $VACUUM_SIZE_fcc_110
1.0
$xx $xy $xz
$yx $yy $yz
$zx $zy $zz
$POTCAR
$natoms1
Selective dynamics
Cartesian
EOF

for ig in $(seq 1 1 $NUMBER_OF_LAYERS); do

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do

x1=`echo 1 \* $nx - 1 + 0 \* $ny - 0 + 0.00000000000000000000000000000000 | bc -l`
y1=`echo 0 \* $nx - 0 + 1.4142135623730950488016887242097 \* $ny - 1.4142135623730950488016887242097 + 0.00000000000000000000000000000000 | bc -l`
x2=`echo 1 \* $nx - 1 + 0 \* $ny - 0 + 0.50000000000000000000000000000000 | bc -l`
y2=`echo 0 \* $nx - 0 + 1.4142135623730950488016887242097 \* $ny - 1.4142135623730950488016887242097 + 0.70710678118654752440084436210485 | bc -l`

x1=`echo $c \* $x1 / $SUPERCELL_FACTOR | bc -l`
y1=`echo $c \* $y1 / $SUPERCELL_FACTOR | bc -l`
x2=`echo $c \* $x2 / $SUPERCELL_FACTOR | bc -l`
y2=`echo $c \* $y2 / $SUPERCELL_FACTOR | bc -l`


if [ "$LAYER_HIGHTS_fcc_110" = "defaulthights" ]; then
hight=`echo  0.5 \* $ig - 0.5 | bc -l`
hight=`echo  $c \* $hight / $SUPERCELL_FACTOR | bc -l`
else
let iii=$ig-1
hightsarray=($LAYER_HIGHTS_fcc_110)
hight=${hightsarray[$iii]}
fi

res=$(($ig % $ATOMS_PER_SUBCELL))


seldynup=`echo $NUMBER_OF_LAYERS - $ig | bc -l`
seldyndown=`echo $SELECTIVE_DYNAMICS_DEPTH_fcc_110 + 1 | bc -l`

if [ $(echo "$seldynup < $SELECTIVE_DYNAMICS_DEPTH_fcc_110" | bc) -eq 1 ]; then

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " T T T "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " T T T "  >> POSCAR
fi

elif [ $(echo "$ig < $seldyndown" | bc) -eq 1 ]; then

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " T T T "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " T T T "  >> POSCAR
fi

else

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " F F F "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " F F F "  >> POSCAR
fi

fi


done
done

done

numberofatomsthatwereaddedbefore=0

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
fcc_111 () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1
NUMBER_OF_LAYERS=$NUMBER_OF_LAYERS_fcc_111

STRUCTURE_TYPE=surface
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=F

ATOMS_PER_CONVENTIONAL_CELL=4
ATOMS_PER_SUBCELL=3

NUMBER_OF_ATOMS_PER_LAYER_PER_CELL=1

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $NUMBER_OF_LAYERS | bc -l`

v=`echo $ATOMS_PER_CONVENTIONAL_CELL \* $VOLUME_fcc_111 | bc -l`
c=`echo " e( l($v)/3 ) " | bc -l`
c=`echo $c \* $SUPERCELL_FACTOR / 1.4142135623730950488016887242097 | bc -l`
h=`echo 0.81649658092772603273242802490195 \* $NUMBER_OF_LAYERS / $SUPERCELL_FACTOR + $VACUUM_SIZE_fcc_111 / $c | bc -l`

xx=`echo 1 \* $c | bc -l`
xy=`echo 0 \* $c | bc -l`
xz=`echo 0 \* $c | bc -l`
yx=`echo 0.5 \* $c | bc -l`
yy=`echo 0.86602540378443864676372317075294 \* $c | bc -l`
yz=`echo 0 \* $c | bc -l`
zx=`echo 0 \* $c | bc -l`
zy=`echo 0 \* $c | bc -l`
zz=`echo $h \* $c | bc -l`

cat > POSCAR << EOF
fcc_111 surface $SUPERCELL_FACTOR ; layers: $NUMBER_OF_LAYERS ; vacuum: $VACUUM_SIZE_fcc_111
1.0
$xx $xy $xz
$yx $yy $yz
$zx $zy $zz
$POTCAR
$natoms1
Selective dynamics
Cartesian
EOF

for ig in $(seq 1 1 $NUMBER_OF_LAYERS); do

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do

x1=`echo 1 \* $nx - 1 + 0.5 \* $ny - 0.5 + 1.00000000000000000000000000000000 | bc -l`
y1=`echo 0 \* $nx - 0 + 0.86602540378443864676372317075294 \* $ny - 0.86602540378443864676372317075294 + 0.57735026918962576450914878050196 | bc -l`
x2=`echo 1 \* $nx - 1 + 0.5 \* $ny - 0.5 + 0.00000000000000000000000000000000 | bc -l`
y2=`echo 0 \* $nx - 0 + 0.86602540378443864676372317075294 \* $ny - 0.86602540378443864676372317075294 + 0.00000000000000000000000000000000 | bc -l`
x3=`echo 1 \* $nx - 1 + 0.5 \* $ny - 0.5 + 0.50000000000000000000000000000000 | bc -l`
y3=`echo 0 \* $nx - 0 + 0.86602540378443864676372317075294 \* $ny - 0.86602540378443864676372317075294 + 0.28867513459481288225457439025098 | bc -l`

x1=`echo $c \* $x1 / $SUPERCELL_FACTOR | bc -l`
y1=`echo $c \* $y1 / $SUPERCELL_FACTOR | bc -l`
x2=`echo $c \* $x2 / $SUPERCELL_FACTOR | bc -l`
y2=`echo $c \* $y2 / $SUPERCELL_FACTOR | bc -l`
x3=`echo $c \* $x3 / $SUPERCELL_FACTOR | bc -l`
y3=`echo $c \* $y3 / $SUPERCELL_FACTOR | bc -l`


if [ "$LAYER_HIGHTS_fcc_111" = "defaulthights" ]; then
hight=`echo  0.81649658092772603273242802490195 \* $ig - 0.81649658092772603273242802490195 | bc -l`
hight=`echo  $c \* $hight / $SUPERCELL_FACTOR | bc -l`
else
let iii=$ig-1
hightsarray=($LAYER_HIGHTS_fcc_111)
hight=${hightsarray[$iii]}
fi

res=$(($ig % $ATOMS_PER_SUBCELL))

seldynup=`echo $NUMBER_OF_LAYERS - $ig | bc -l`
seldyndown=`echo $SELECTIVE_DYNAMICS_DEPTH_fcc_111 + 1 | bc -l`

if [ $(echo "$seldynup < $SELECTIVE_DYNAMICS_DEPTH_fcc_111" | bc) -eq 1 ]; then

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " T T T "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " T T T "  >> POSCAR
fi
if [ $(echo "$res == 2" | bc) -eq 1 ]; then
echo "$x3  $y3 " $hight " T T T "  >> POSCAR
fi

elif [ $(echo "$ig < $seldyndown" | bc) -eq 1 ]; then

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " T T T "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " T T T "  >> POSCAR
fi
if [ $(echo "$res == 2" | bc) -eq 1 ]; then
echo "$x3  $y3 " $hight " T T T "  >> POSCAR
fi

else

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " F F F "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " F F F "  >> POSCAR
fi
if [ $(echo "$res == 2" | bc) -eq 1 ]; then
echo "$x3  $y3 " $hight " F F F "  >> POSCAR
fi

fi


done
done

done

numberofatomsthatwereaddedbefore=0

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
hcp_0001 () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=false
SUPERCELL_FACTOR=1
NUMBER_OF_LAYERS=$NUMBER_OF_LAYERS_hcp_0001

STRUCTURE_TYPE=surface
LATTICE_SYSTEM=hexagonal
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=2
ATOMS_PER_SUBCELL=2

NUMBER_OF_ATOMS_PER_LAYER_PER_CELL=1

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $NUMBER_OF_LAYERS | bc -l`

v=`echo $ATOMS_PER_CONVENTIONAL_CELL \* $VOLUME_hcp_0001 | bc -l`
c=`echo " e( l($v)/3 ) " | bc -l`
c=`echo $c \* $SUPERCELL_FACTOR | bc -l`
h=`echo 0.81649658092772603273242802490195 \* $NUMBER_OF_LAYERS / $SUPERCELL_FACTOR + $VACUUM_SIZE_hcp_0001 / $c | bc -l`

xx=`echo 1 \* $c | bc -l`
xy=`echo 0 \* $c | bc -l`
xz=`echo 0 \* $c | bc -l`
yx=`echo 0.5 \* $c | bc -l`
yy=`echo 0.86602540378443864676372317075294 \* $c | bc -l`
yz=`echo 0 \* $c | bc -l`
zx=`echo 0 \* $c | bc -l`
zy=`echo 0 \* $c | bc -l`
zz=`echo $h \* $c | bc -l`

cat > POSCAR << EOF
hcp_0001 surface $SUPERCELL_FACTOR ; layers: $NUMBER_OF_LAYERS ; vacuum: $VACUUM_SIZE_hcp_0001
1.0
$xx $xy $xz
$yx $yy $yz
$zx $zy $zz
$POTCAR
$natoms1
Selective dynamics
Cartesian
EOF

for ig in $(seq 1 1 $NUMBER_OF_LAYERS); do

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do

x1=`echo 1 \* $nx - 1 + 0.5 \* $ny - 0.5 + 1.00000000000000000000000000000000 | bc -l`
y1=`echo 0 \* $nx - 0 + 0.86602540378443864676372317075294 \* $ny - 0.86602540378443864676372317075294 + 0.57735026918962576450914878050196 | bc -l`
x2=`echo 1 \* $nx - 1 + 0.5 \* $ny - 0.5 + 0.00000000000000000000000000000000 | bc -l`
y2=`echo 0 \* $nx - 0 + 0.86602540378443864676372317075294 \* $ny - 0.86602540378443864676372317075294 + 0.00000000000000000000000000000000 | bc -l`

x1=`echo $c \* $x1 / $SUPERCELL_FACTOR | bc -l`
y1=`echo $c \* $y1 / $SUPERCELL_FACTOR | bc -l`
x2=`echo $c \* $x2 / $SUPERCELL_FACTOR | bc -l`
y2=`echo $c \* $y2 / $SUPERCELL_FACTOR | bc -l`


if [ "$LAYER_HIGHTS_hcp_0001" = "defaulthights" ]; then
hight=`echo  0.81649658092772603273242802490195 \* $ig - 0.81649658092772603273242802490195 | bc -l`
hight=`echo  $c \* $hight / $SUPERCELL_FACTOR | bc -l`
else
let iii=$ig-1
hightsarray=($LAYER_HIGHTS_hcp_0001)
hight=${hightsarray[$iii]}
fi

res=$(($ig % $ATOMS_PER_SUBCELL))


seldynup=`echo $NUMBER_OF_LAYERS - $ig | bc -l`
seldyndown=`echo $SELECTIVE_DYNAMICS_DEPTH_hcp_0001 + 1 | bc -l`

if [ $(echo "$seldynup < $SELECTIVE_DYNAMICS_DEPTH_hcp_0001" | bc) -eq 1 ]; then

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " T T T "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " T T T "  >> POSCAR
fi

elif [ $(echo "$ig < $seldyndown" | bc) -eq 1 ]; then

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " T T T "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " T T T "  >> POSCAR
fi

else

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " F F F "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " F F F "  >> POSCAR
fi

fi


done
done

done

numberofatomsthatwereaddedbefore=0

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_bcc_100 () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_bcc_100
NUMBER_OF_LAYERS=$NUMBER_OF_LAYERS_sup_bcc_100

STRUCTURE_TYPE=surface
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=I

ATOMS_PER_CONVENTIONAL_CELL=2
ATOMS_PER_SUBCELL=2

NUMBER_OF_ATOMS_PER_LAYER_PER_CELL=1

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $NUMBER_OF_LAYERS | bc -l`

v=`echo $ATOMS_PER_CONVENTIONAL_CELL \* $VOLUME_sup_bcc_100 | bc -l`
c=`echo " e( l($v)/3 ) " | bc -l`
c=`echo $c \* $SUPERCELL_FACTOR / 1.4142135623730950488016887242097 | bc -l`
h=`echo 0.5 \* $NUMBER_OF_LAYERS / $SUPERCELL_FACTOR + $VACUUM_SIZE_sup_bcc_100 / $c | bc -l`

xx=`echo 1 \* $c | bc -l`
xy=`echo 0 \* $c | bc -l`
xz=`echo 0 \* $c | bc -l`
yx=`echo 0 \* $c | bc -l`
yy=`echo 1 \* $c | bc -l`
yz=`echo 0 \* $c | bc -l`
zx=`echo 0 \* $c | bc -l`
zy=`echo 0 \* $c | bc -l`
zz=`echo $h \* $c | bc -l`

cat > POSCAR << EOF
sup_bcc_100 surface $SUPERCELL_FACTOR ; layers: $NUMBER_OF_LAYERS ; vacuum: $VACUUM_SIZE_sup_bcc_100
1.0
$xx $xy $xz
$yx $yy $yz
$zx $zy $zz
$POTCAR
$natoms1
Selective dynamics
Cartesian
EOF

for ig in $(seq 1 1 $NUMBER_OF_LAYERS); do

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do

x1=`echo 1 \* $nx - 1 + 0 \* $ny - 0 + 0.00000000000000000000000000000000 | bc -l`
y1=`echo 0 \* $nx - 0 + 1 \* $ny - 1 + 0.00000000000000000000000000000000 | bc -l`
x2=`echo 1 \* $nx - 1 + 0 \* $ny - 0 + 0.50000000000000000000000000000000 | bc -l`
y2=`echo 0 \* $nx - 0 + 1 \* $ny - 1 + 0.50000000000000000000000000000000 | bc -l`

x1=`echo $c \* $x1 / $SUPERCELL_FACTOR | bc -l`
y1=`echo $c \* $y1 / $SUPERCELL_FACTOR | bc -l`
x2=`echo $c \* $x2 / $SUPERCELL_FACTOR | bc -l`
y2=`echo $c \* $y2 / $SUPERCELL_FACTOR | bc -l`


if [ "$LAYER_HIGHTS_sup_bcc_100" = "defaulthights" ]; then
hight=`echo  0.5 \* $ig - 0.5 | bc -l`
hight=`echo  $c \* $hight / $SUPERCELL_FACTOR | bc -l`
else
let iii=$ig-1
hightsarray=($LAYER_HIGHTS_sup_bcc_100)
hight=${hightsarray[$iii]}
fi

res=$(($ig % $ATOMS_PER_SUBCELL))


seldynup=`echo $NUMBER_OF_LAYERS - $ig | bc -l`
seldyndown=`echo $SELECTIVE_DYNAMICS_DEPTH_sup_bcc_100 + 1 | bc -l`

if [ $(echo "$seldynup < $SELECTIVE_DYNAMICS_DEPTH_sup_bcc_100" | bc) -eq 1 ]; then

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " T T T "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " T T T "  >> POSCAR
fi

elif [ $(echo "$ig < $seldyndown" | bc) -eq 1 ]; then

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " T T T "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " T T T "  >> POSCAR
fi

else

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " F F F "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " F F F "  >> POSCAR
fi

fi


done
done

done

numberofatomsthatwereaddedbefore=0

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_fcc_100 () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_fcc_100
NUMBER_OF_LAYERS=$NUMBER_OF_LAYERS_sup_fcc_100

STRUCTURE_TYPE=surface
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=F

ATOMS_PER_CONVENTIONAL_CELL=4
ATOMS_PER_SUBCELL=2

NUMBER_OF_ATOMS_PER_LAYER_PER_CELL=1

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $NUMBER_OF_LAYERS | bc -l`

v=`echo $ATOMS_PER_CONVENTIONAL_CELL \* $VOLUME_sup_fcc_100 | bc -l`
c=`echo " e( l($v)/3 ) " | bc -l`
c=`echo $c \* $SUPERCELL_FACTOR / 1.4142135623730950488016887242097 | bc -l`
h=`echo 0.70710678118654752440084436210485 \* $NUMBER_OF_LAYERS / $SUPERCELL_FACTOR + $VACUUM_SIZE_sup_fcc_100 / $c | bc -l`

xx=`echo 1 \* $c | bc -l`
xy=`echo 0 \* $c | bc -l`
xz=`echo 0 \* $c | bc -l`
yx=`echo 0 \* $c | bc -l`
yy=`echo 1 \* $c | bc -l`
yz=`echo 0 \* $c | bc -l`
zx=`echo 0 \* $c | bc -l`
zy=`echo 0 \* $c | bc -l`
zz=`echo $h \* $c | bc -l`

cat > POSCAR << EOF
sup_fcc_100 surface $SUPERCELL_FACTOR ; layers: $NUMBER_OF_LAYERS ; vacuum: $VACUUM_SIZE_sup_fcc_100
1.0
$xx $xy $xz
$yx $yy $yz
$zx $zy $zz
$POTCAR
$natoms1
Selective dynamics
Cartesian
EOF

for ig in $(seq 1 1 $NUMBER_OF_LAYERS); do

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do

x1=`echo 1 \* $nx - 1 + 0 \* $ny - 0 + 0.00000000000000000000000000000000 | bc -l`
y1=`echo 0 \* $nx - 0 + 1 \* $ny - 1 + 0.00000000000000000000000000000000 | bc -l`
x2=`echo 1 \* $nx - 1 + 0 \* $ny - 0 + 0.50000000000000000000000000000000 | bc -l`
y2=`echo 0 \* $nx - 0 + 1 \* $ny - 1 + 0.50000000000000000000000000000000 | bc -l`

x1=`echo $c \* $x1 / $SUPERCELL_FACTOR | bc -l`
y1=`echo $c \* $y1 / $SUPERCELL_FACTOR | bc -l`
x2=`echo $c \* $x2 / $SUPERCELL_FACTOR | bc -l`
y2=`echo $c \* $y2 / $SUPERCELL_FACTOR | bc -l`


if [ "$LAYER_HIGHTS_sup_fcc_100" = "defaulthights" ]; then
hight=`echo  0.70710678118654752440084436210485 \* $ig - 0.70710678118654752440084436210485 | bc -l`
hight=`echo  $c \* $hight / $SUPERCELL_FACTOR | bc -l`
else
let iii=$ig-1
hightsarray=($LAYER_HIGHTS_sup_fcc_100)
hight=${hightsarray[$iii]}
fi

res=$(($ig % $ATOMS_PER_SUBCELL))


seldynup=`echo $NUMBER_OF_LAYERS - $ig | bc -l`
seldyndown=`echo $SELECTIVE_DYNAMICS_DEPTH_sup_fcc_100 + 1 | bc -l`

if [ $(echo "$seldynup < $SELECTIVE_DYNAMICS_DEPTH_sup_fcc_100" | bc) -eq 1 ]; then

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " T T T "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " T T T "  >> POSCAR
fi

elif [ $(echo "$ig < $seldyndown" | bc) -eq 1 ]; then

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " T T T "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " T T T "  >> POSCAR
fi

else

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " F F F "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " F F F "  >> POSCAR
fi

fi


done
done

done

numberofatomsthatwereaddedbefore=0

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_fcc_110 () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_fcc_110
NUMBER_OF_LAYERS=$NUMBER_OF_LAYERS_sup_fcc_110

STRUCTURE_TYPE=surface
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=F

ATOMS_PER_CONVENTIONAL_CELL=4
ATOMS_PER_SUBCELL=2

NUMBER_OF_ATOMS_PER_LAYER_PER_CELL=1

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $NUMBER_OF_LAYERS | bc -l`

v=`echo $ATOMS_PER_CONVENTIONAL_CELL \* $VOLUME_sup_fcc_110 | bc -l`
c=`echo " e( l($v)/3 ) " | bc -l`
c=`echo $c \* $SUPERCELL_FACTOR / 1.4142135623730950488016887242097 | bc -l`
h=`echo 0.5 \* $NUMBER_OF_LAYERS / $SUPERCELL_FACTOR + $VACUUM_SIZE_sup_fcc_110 / $c | bc -l`

xx=`echo 1 \* $c | bc -l`
xy=`echo 0 \* $c | bc -l`
xz=`echo 0 \* $c | bc -l`
yx=`echo 0 \* $c | bc -l`
yy=`echo 1.4142135623730950488016887242097 \* $c | bc -l`
yz=`echo 0 \* $c | bc -l`
zx=`echo 0 \* $c | bc -l`
zy=`echo 0 \* $c | bc -l`
zz=`echo $h \* $c | bc -l`

cat > POSCAR << EOF
sup_fcc_110 surface $SUPERCELL_FACTOR ; layers: $NUMBER_OF_LAYERS ; vacuum: $VACUUM_SIZE_sup_fcc_110
1.0
$xx $xy $xz
$yx $yy $yz
$zx $zy $zz
$POTCAR
$natoms1
Selective dynamics
Cartesian
EOF

for ig in $(seq 1 1 $NUMBER_OF_LAYERS); do

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do

x1=`echo 1 \* $nx - 1 + 0 \* $ny - 0 + 0.00000000000000000000000000000000 | bc -l`
y1=`echo 0 \* $nx - 0 + 1.4142135623730950488016887242097 \* $ny - 1.4142135623730950488016887242097 + 0.00000000000000000000000000000000 | bc -l`
x2=`echo 1 \* $nx - 1 + 0 \* $ny - 0 + 0.50000000000000000000000000000000 | bc -l`
y2=`echo 0 \* $nx - 0 + 1.4142135623730950488016887242097 \* $ny - 1.4142135623730950488016887242097 + 0.70710678118654752440084436210485 | bc -l`

x1=`echo $c \* $x1 / $SUPERCELL_FACTOR | bc -l`
y1=`echo $c \* $y1 / $SUPERCELL_FACTOR | bc -l`
x2=`echo $c \* $x2 / $SUPERCELL_FACTOR | bc -l`
y2=`echo $c \* $y2 / $SUPERCELL_FACTOR | bc -l`


if [ "$LAYER_HIGHTS_sup_fcc_100" = "defaulthights" ]; then
hight=`echo  0.5 \* $ig - 0.5 | bc -l`
hight=`echo  $c \* $hight / $SUPERCELL_FACTOR | bc -l`
else
let iii=$ig-1
hightsarray=($LAYER_HIGHTS_sup_fcc_100)
hight=${hightsarray[$iii]}
fi

res=$(($ig % $ATOMS_PER_SUBCELL))


seldynup=`echo $NUMBER_OF_LAYERS - $ig | bc -l`
seldyndown=`echo $SELECTIVE_DYNAMICS_DEPTH_sup_fcc_110 + 1 | bc -l`

if [ $(echo "$seldynup < $SELECTIVE_DYNAMICS_DEPTH_sup_fcc_110" | bc) -eq 1 ]; then

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " T T T "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " T T T "  >> POSCAR
fi

elif [ $(echo "$ig < $seldyndown" | bc) -eq 1 ]; then

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " T T T "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " T T T "  >> POSCAR
fi

else

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " F F F "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " F F F "  >> POSCAR
fi

fi


done
done

done

numberofatomsthatwereaddedbefore=0

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_fcc_111 () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_fcc_111
NUMBER_OF_LAYERS=$NUMBER_OF_LAYERS_sup_fcc_111

STRUCTURE_TYPE=surface
LATTICE_SYSTEM=cubic
BRAVAIS_LATTICE=F

ATOMS_PER_CONVENTIONAL_CELL=4
ATOMS_PER_SUBCELL=3

NUMBER_OF_ATOMS_PER_LAYER_PER_CELL=1

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $NUMBER_OF_LAYERS | bc -l`

v=`echo $ATOMS_PER_CONVENTIONAL_CELL \* $VOLUME_sup_fcc_111 | bc -l`
c=`echo " e( l($v)/3 ) " | bc -l`
c=`echo $c \* $SUPERCELL_FACTOR / 1.4142135623730950488016887242097 | bc -l`
h=`echo 0.81649658092772603273242802490195 \* $NUMBER_OF_LAYERS / $SUPERCELL_FACTOR + $VACUUM_SIZE_sup_fcc_111 / $c | bc -l`

xx=`echo 1 \* $c | bc -l`
xy=`echo 0 \* $c | bc -l`
xz=`echo 0 \* $c | bc -l`
yx=`echo 0.5 \* $c | bc -l`
yy=`echo 0.86602540378443864676372317075294 \* $c | bc -l`
yz=`echo 0 \* $c | bc -l`
zx=`echo 0 \* $c | bc -l`
zy=`echo 0 \* $c | bc -l`
zz=`echo $h \* $c | bc -l`

cat > POSCAR << EOF
sup_fcc_111 surface $SUPERCELL_FACTOR ; layers: $NUMBER_OF_LAYERS ; vacuum: $VACUUM_SIZE_sup_fcc_111
1.0
$xx $xy $xz
$yx $yy $yz
$zx $zy $zz
$POTCAR
$natoms1
Selective dynamics
Cartesian
EOF

for ig in $(seq 1 1 $NUMBER_OF_LAYERS); do

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do

x1=`echo 1 \* $nx - 1 + 0.5 \* $ny - 0.5 + 1.00000000000000000000000000000000 | bc -l`
y1=`echo 0 \* $nx - 0 + 0.86602540378443864676372317075294 \* $ny - 0.86602540378443864676372317075294 + 0.57735026918962576450914878050196 | bc -l`
x2=`echo 1 \* $nx - 1 + 0.5 \* $ny - 0.5 + 0.00000000000000000000000000000000 | bc -l`
y2=`echo 0 \* $nx - 0 + 0.86602540378443864676372317075294 \* $ny - 0.86602540378443864676372317075294 + 0.00000000000000000000000000000000 | bc -l`
x3=`echo 1 \* $nx - 1 + 0.5 \* $ny - 0.5 + 0.50000000000000000000000000000000 | bc -l`
y3=`echo 0 \* $nx - 0 + 0.86602540378443864676372317075294 \* $ny - 0.86602540378443864676372317075294 + 0.28867513459481288225457439025098 | bc -l`

x1=`echo $c \* $x1 / $SUPERCELL_FACTOR | bc -l`
y1=`echo $c \* $y1 / $SUPERCELL_FACTOR | bc -l`
x2=`echo $c \* $x2 / $SUPERCELL_FACTOR | bc -l`
y2=`echo $c \* $y2 / $SUPERCELL_FACTOR | bc -l`
x3=`echo $c \* $x3 / $SUPERCELL_FACTOR | bc -l`
y3=`echo $c \* $y3 / $SUPERCELL_FACTOR | bc -l`


if [ "$LAYER_HIGHTS_sup_fcc_111" = "defaulthights" ]; then
hight=`echo  0.81649658092772603273242802490195 \* $ig - 0.81649658092772603273242802490195 | bc -l`
hight=`echo  $c \* $hight / $SUPERCELL_FACTOR | bc -l`
else
let iii=$ig-1
hightsarray=($LAYER_HIGHTS_sup_fcc_111)
hight=${hightsarray[$iii]}
fi

res=$(($ig % $ATOMS_PER_SUBCELL))

seldynup=`echo $NUMBER_OF_LAYERS - $ig | bc -l`
seldyndown=`echo $SELECTIVE_DYNAMICS_DEPTH_sup_fcc_111 + 1 | bc -l`

if [ $(echo "$seldynup < $SELECTIVE_DYNAMICS_DEPTH_sup_fcc_111" | bc) -eq 1 ]; then

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " T T T "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " T T T "  >> POSCAR
fi
if [ $(echo "$res == 2" | bc) -eq 1 ]; then
echo "$x3  $y3 " $hight " T T T "  >> POSCAR
fi

elif [ $(echo "$ig < $seldyndown" | bc) -eq 1 ]; then

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " T T T "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " T T T "  >> POSCAR
fi
if [ $(echo "$res == 2" | bc) -eq 1 ]; then
echo "$x3  $y3 " $hight " T T T "  >> POSCAR
fi

else

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " F F F "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " F F F "  >> POSCAR
fi
if [ $(echo "$res == 2" | bc) -eq 1 ]; then
echo "$x3  $y3 " $hight " F F F "  >> POSCAR
fi

fi


done
done

done

numberofatomsthatwereaddedbefore=0

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sup_hcp_0001 () {

cat > poscardescription << EOF
poscardescription () {

THISISSUPERCELL=true
SUPERCELL_FACTOR=$SUPERCELL_FACTOR_sup_hcp_0001
NUMBER_OF_LAYERS=$NUMBER_OF_LAYERS_sup_hcp_0001

STRUCTURE_TYPE=surface
LATTICE_SYSTEM=hexagonal
BRAVAIS_LATTICE=P

ATOMS_PER_CONVENTIONAL_CELL=2
ATOMS_PER_SUBCELL=2

NUMBER_OF_ATOMS_PER_LAYER_PER_CELL=1

NUMBER_OF_SHIFTS=0

NUMBER_OF_ELEMENTS=1
NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT="1"

}
EOF

source poscardescription
poscardescription

cat > defaultshiftsandratios << EOF
defaultshiftsandratios () {

x=x

}
EOF

array=($NUMBER_OF_ATOMS_PER_SUBCELL_PER_ELEMENT)
natoms1=${array[0]}

natoms1=`echo $natoms1 \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $NUMBER_OF_LAYERS | bc -l`

v=`echo $ATOMS_PER_CONVENTIONAL_CELL \* $VOLUME_sup_hcp_0001 | bc -l`
c=`echo " e( l($v)/3 ) " | bc -l`
c=`echo $c \* $SUPERCELL_FACTOR | bc -l`
h=`echo 0.81649658092772603273242802490195 \* $NUMBER_OF_LAYERS / $SUPERCELL_FACTOR + $VACUUM_SIZE_sup_hcp_0001 / $c | bc -l`

xx=`echo 1 \* $c | bc -l`
xy=`echo 0 \* $c | bc -l`
xz=`echo 0 \* $c | bc -l`
yx=`echo 0.5 \* $c | bc -l`
yy=`echo 0.86602540378443864676372317075294 \* $c | bc -l`
yz=`echo 0 \* $c | bc -l`
zx=`echo 0 \* $c | bc -l`
zy=`echo 0 \* $c | bc -l`
zz=`echo $h \* $c | bc -l`

cat > POSCAR << EOF
sup_hcp_0001 surface $SUPERCELL_FACTOR ; layers: $NUMBER_OF_LAYERS ; vacuum: $VACUUM_SIZE_sup_hcp_0001
1.0
$xx $xy $xz
$yx $yy $yz
$zx $zy $zz
$POTCAR
$natoms1
Selective dynamics
Cartesian
EOF

for ig in $(seq 1 1 $NUMBER_OF_LAYERS); do

for nx in $(seq 1 1 $SUPERCELL_FACTOR); do
for ny in $(seq 1 1 $SUPERCELL_FACTOR); do

x1=`echo 1 \* $nx - 1 + 0.5 \* $ny - 0.5 + 1.00000000000000000000000000000000 | bc -l`
y1=`echo 0 \* $nx - 0 + 0.86602540378443864676372317075294 \* $ny - 0.86602540378443864676372317075294 + 0.57735026918962576450914878050196 | bc -l`
x2=`echo 1 \* $nx - 1 + 0.5 \* $ny - 0.5 + 0.00000000000000000000000000000000 | bc -l`
y2=`echo 0 \* $nx - 0 + 0.86602540378443864676372317075294 \* $ny - 0.86602540378443864676372317075294 + 0.00000000000000000000000000000000 | bc -l`

x1=`echo $c \* $x1 / $SUPERCELL_FACTOR | bc -l`
y1=`echo $c \* $y1 / $SUPERCELL_FACTOR | bc -l`
x2=`echo $c \* $x2 / $SUPERCELL_FACTOR | bc -l`
y2=`echo $c \* $y2 / $SUPERCELL_FACTOR | bc -l`


if [ "$LAYER_HIGHTS_sup_hcp_0001" = "defaulthights" ]; then
hight=`echo  0.81649658092772603273242802490195 \* $ig - 0.81649658092772603273242802490195 | bc -l`
hight=`echo  $c \* $hight / $SUPERCELL_FACTOR | bc -l`
else
let iii=$ig-1
hightsarray=($LAYER_HIGHTS_sup_hcp_0001)
hight=${hightsarray[$iii]}
fi

res=$(($ig % $ATOMS_PER_SUBCELL))


seldynup=`echo $NUMBER_OF_LAYERS - $ig | bc -l`
seldyndown=`echo $SELECTIVE_DYNAMICS_DEPTH_sup_hcp_0001 + 1 | bc -l`

if [ $(echo "$seldynup < $SELECTIVE_DYNAMICS_DEPTH_sup_hcp_0001" | bc) -eq 1 ]; then

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " T T T "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " T T T "  >> POSCAR
fi

elif [ $(echo "$ig < $seldyndown" | bc) -eq 1 ]; then

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " T T T "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " T T T "  >> POSCAR
fi

else

if [ $(echo "$res == 0" | bc) -eq 1 ]; then
echo "$x1  $y1 " $hight " F F F "  >> POSCAR
fi
if [ $(echo "$res == 1" | bc) -eq 1 ]; then
echo "$x2  $y2 " $hight " F F F "  >> POSCAR
fi

fi


done
done

done

numberofatomsthatwereaddedbefore=0

}



 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
supercellconvergence () {

if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ###########################################################################################"
echo " "
echo " Running now: supercellconvergence $1 \"$2\" $3 $4 $5 $6 $7 $8 $9  ;   $GGA $POTCAR "
echo " " >> $MAINDIR/output.txt
echo " ###########################################################################################" >> $MAINDIR/output.txt
echo " " >> $MAINDIR/output.txt
echo " Running now: supercellconvergence $1 \"$2\" $3 $4 $5 $6 $7 $8 $9  ;   $GGA $POTCAR " >> $MAINDIR/output.txt
fi

name="SUPERCELL_FACTOR_$1"
backupsup=`echo ${!name}`

mkdir supercellconvergence_${1}
cd supercellconvergence_${1}
VARIABLEFORCONVERGENCE_last=0
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " supercell factor        Result                      Difference"
echo " " >> $MAINDIR/output.txt
echo " supercell factor        Result                      Difference" >> $MAINDIR/output.txt
fi
for i in $(seq $2); do
mkdir $i
cd $i
name="SUPERCELL_FACTOR_$1"
eval $name=$i
PRINTOUTPUT=false
"$5" "$6" "$7" "$8" "$9" "${10}" "${11}" "${12}" "${13}" "${14}" "${15}" "${16}" "${17}" "${18}" "${19}" "${20}" "${21}" "${22}" "${23}" "${24}" "${25}" "${26}" "${27}" "${28}" "${29}" "${30}" "${31}" "${32}" "${33}" "${34}" "${35}" "${36}" "${37}" "${38}" "${39}" "${40}" "${41}" "${42}" "${43}" "${44}" "${45}" "${46}" "${47}" "${48}" "${49}" "${50}" "${51}" "${52}" "${53}" "${54}" "${55}" "${56}" "${57}" "${58}" "${59}" "${60}" "${61}" "${62}" "${63}" "${64}" "${65}" "${66}" "${67}" "${68}" "${69}" "${70}" "${71}" "${72}" "${73}" "${74}" "${75}" "${76}" "${77}" "${78}" "${79}" "${80}" "${81}" "${82}" "${83}" "${84}" "${85}" "${86}"
PRINTOUTPUT=true
cd ..

if [ "$4" != "autovar" ]; then
name="$4"
VARIABLEFORCONVERGENCE=`echo ${!name}`
fi

diff=`echo $VARIABLEFORCONVERGENCE - $VARIABLEFORCONVERGENCE_last | bc -l`
echo " $i                       $VARIABLEFORCONVERGENCE     $diff"
echo " $i                       $VARIABLEFORCONVERGENCE     $diff" >> $MAINDIR/output.txt
if [ $(echo "$diff > 0.0" | bc) -eq 1 ]; then
if [ $(echo "$3 > $diff" | bc) -eq 1 ]; then
if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " convergence criterion of " $3 " was reached at a supercell factor of " $i
if [ "$UPDATEVARIABLES" = true ]; then
  echo " SUPERCELL_FACTOR_$1 has been updated to the optimized value "
fi
  echo " " >> $MAINDIR/output.txt
  echo " convergence criterion of " $3 " was reached at a supercell factor of " $i >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " SUPERCELL_FACTOR_$1 has been updated to the optimized value " >> $MAINDIR/output.txt
fi
fi
  break
fi
fi
if [ $(echo "0.0 > $diff" | bc) -eq 1 ]; then
if [ $(echo "$diff > -$3" | bc) -eq 1 ]; then
if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " convergence criterion of " $3 " was reached at a supercell factor of " $i
if [ "$UPDATEVARIABLES" = true ]; then
  echo " SUPERCELL_FACTOR_$1 has been updated to the optimized value "
fi
  echo " " >> $MAINDIR/output.txt
  echo " convergence criterion of " $3 " was reached at a supercell factor of " $i >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " SUPERCELL_FACTOR_$1 has been updated to the optimized value " >> $MAINDIR/output.txt
fi
fi
  break
fi
fi
hhh=($2)
hhhhhh=${hhh[2]}
if [ $(echo "$i == $hhhhhh" | bc) -eq 1 ]; then
if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " CONVERGENCE CRITERION OF " $3 " WAS NOT REACHED!!!"
if [ "$UPDATEVARIABLES" = true ]; then
  echo " SUPERCELL_FACTOR_$1 has been updated to $hhhhhh "
fi
  echo " " >> $MAINDIR/output.txt
  echo " CONVERGENCE CRITERION OF " $3 " WAS NOT REACHED!!!" >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " SUPERCELL_FACTOR_$1 has been updated to $hhhhhh " >> $MAINDIR/output.txt
fi
fi
fi
VARIABLEFORCONVERGENCE_last=$VARIABLEFORCONVERGENCE
done

if [ "$UPDATEVARIABLES" = false ]; then
name="SUPERCELL_FACTOR_$i"
eval $name=$backupsup
fi

cd ..

}

 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
encutconvergence () {

secsencutconvergence=$SECONDS

if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ###########################################################################################"
echo " "
echo " Running now: encutconvergence $1 \"$2\" $3 $4 $5 $6 $7 $8 $9  ;   $GGA $POTCAR "       #encutconvergence fcc "15 1 25" 0.001 autovar electronicmin fcc addvacancy $potcar 1 "1 1 1" v
echo " " >> $MAINDIR/output.txt
echo " ###########################################################################################" >> $MAINDIR/output.txt
echo " " >> $MAINDIR/output.txt
echo " Running now: encutconvergence $1 \"$2\" $3 $4 $5 $6 $7 $8 $9  ;   $GGA $POTCAR " >> $MAINDIR/output.txt
fi

backupencut=$ENCUT

mkdir encutconvergence_${1}
cd encutconvergence_${1}
VARIABLEFORCONVERGENCE_last=0
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ENCUT                  Result                      Difference"
echo " " >> $MAINDIR/output.txt
echo " ENCUT                  Result                      Difference" >> $MAINDIR/output.txt
fi
array=($(echo "$2"))
value1=`echo ${array[0]} | bc -l`
value2=`echo ${array[1]} | bc -l`
value3=`echo ${array[2]} | bc -l`
for i in $(seq ${value1%.*} ${value2%.*} ${value3%.*}); do
mkdir $i
cd $i
ENCUT=$i
PRINTOUTPUT=false
"$5" "$6" "$7" "$8" "$9" "${10}" "${11}" "${12}" "${13}" "${14}" "${15}" "${16}" "${17}" "${18}" "${19}" "${20}" "${21}" "${22}" "${23}" "${24}" "${25}" "${26}" "${27}" "${28}" "${29}" "${30}" "${31}" "${32}" "${33}" "${34}" "${35}" "${36}" "${37}" "${38}" "${39}" "${40}" "${41}" "${42}" "${43}" "${44}" "${45}" "${46}" "${47}" "${48}" "${49}" "${50}" "${51}" "${52}" "${53}" "${54}" "${55}" "${56}" "${57}" "${58}" "${59}" "${60}" "${61}" "${62}" "${63}" "${64}" "${65}" "${66}" "${67}" "${68}" "${69}" "${70}" "${71}" "${72}" "${73}" "${74}" "${75}" "${76}" "${77}" "${78}" "${79}" "${80}" "${81}" "${82}" "${83}" "${84}" "${85}" "${86}"
PRINTOUTPUT=true
cd ..

if [ "$4" != "autovar" ]; then
name="$4"
VARIABLEFORCONVERGENCE=`echo ${!name}`
fi

echo " $i $VARIABLEFORCONVERGENCE " >> data.dat

diff=`echo $VARIABLEFORCONVERGENCE - $VARIABLEFORCONVERGENCE_last | bc -l`
echo " $i                     $VARIABLEFORCONVERGENCE     $diff"
echo " $i                     $VARIABLEFORCONVERGENCE     $diff" >> $MAINDIR/output.txt
if [ $(echo "$diff > 0.0" | bc) -eq 1 ]; then
if [ $(echo "$3 > $diff" | bc) -eq 1 ]; then
if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " convergence criterion of " $3 " was reached at ENCUT = " $i
if [ "$UPDATEVARIABLES" = true ]; then
  echo " ENCUT has been updated to the optimized value "
fi
  echo " " >> $MAINDIR/output.txt
  echo " convergence criterion of " $3 " was reached at ENCUT = " $i >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " ENCUT has been updated to the optimized value " >> $MAINDIR/output.txt
fi
fi
  break
fi
fi
if [ $(echo "0.0 > $diff" | bc) -eq 1 ]; then
if [ $(echo "$diff > -$3" | bc) -eq 1 ]; then
if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " convergence criterion of " $3 " was reached at ENCUT = " $i
if [ "$UPDATEVARIABLES" = true ]; then
  echo " ENCUT has been updated to the optimized value "
fi
  echo " " >> $MAINDIR/output.txt
  echo " convergence criterion of " $3 " was reached at ENCUT = " $i >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " ENCUT has been updated to the optimized value " >> $MAINDIR/output.txt
fi
fi
  break
fi
fi
hhh=($2)
hhhhhh=${hhh[2]}
if [ $(echo "$i == $hhhhhh" | bc) -eq 1 ]; then
if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " CONVERGENCE CRITERION OF " $3 " WAS NOT REACHED!!!"
if [ "$UPDATEVARIABLES" = true ]; then
  echo " ENCUT has been updated to $hhhhhh "
fi
  echo " " >> $MAINDIR/output.txt
  echo " CONVERGENCE CRITERION OF " $3 " WAS NOT REACHED!!!" >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " ENCUT has been updated to $hhhhhh " >> $MAINDIR/output.txt
fi
fi
fi
VARIABLEFORCONVERGENCE_last=$VARIABLEFORCONVERGENCE
done

if [ "$UPDATEVARIABLES" = false ]; then
ENCUT=$backupencut
fi

plotxydata data.dat

if [ "$4" = "autovar" ]; then
if [ "$5" = "electronicmin" ]; then
ylabel="Total free energy per atom (eV)"
fi
if [ "$5" = "relaxation" ]; then
ylabel="Volume per atom ({\305}^3)"
fi
fi

if [ "$4" != "autovar" ]; then
ylabel="$4"
fi

cat > encutconvergence_gnup_${1}_${GGA} << EOF
set title "$1 ENCUT convergence test ;  GGA = $GGA, POTCAR = $POTCAR"
set encoding iso_8859_1
set xlabel "Cutoff energy (eV)"
set ylabel "$ylabel"
unset key
set term png
set output "encutconvergence_${1}_${GGA}.png"
p 'data.dat' u 1:2 w lp
EOF
if [ -n "$GNUPLOT" ]; then
$GNUPLOT encutconvergence_gnup_${1}_${GGA}
fi

let secs=$SECONDS-$secsencutconvergence
let TOTALTIME=$TOTALTIME+$secs
hrs=$(( secs/3600 )); mins=$(( (secs-hrs*3600)/60 )); secs=$(( secs-hrs*3600-mins*60 ))
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ellapsed time: $hrs h $mins min $secs s"
echo " " >> $MAINDIR/output.txt
echo " ellapsed time: $hrs h $mins min $secs s" >> $MAINDIR/output.txt
fi


cd ..

}

 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
kpointsconvergence () {

secskpointsconvergence=$SECONDS

if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ###########################################################################################"
echo " "
echo " Running now: kpointsconvergence $1 \"$2\" $3 $4 $5 $6 $7 $8 $9  ;   $GGA $POTCAR "
echo " "
echo " Number of kpoints      Result                      Difference"
echo " " >> $MAINDIR/output.txt
echo " ###########################################################################################" >> $MAINDIR/output.txt
echo " " >> $MAINDIR/output.txt
echo " Running now: kpointsconvergence $1 \"$2\" $3 $4 $5 $6 $7 $8 $9  ;   $GGA $POTCAR " >> $MAINDIR/output.txt
echo " " >> $MAINDIR/output.txt
echo " Number of kpoints      Result                      Difference" >> $MAINDIR/output.txt
fi

mkdir kpointsconvergence_${1}
cd kpointsconvergence_${1}
VARIABLEFORCONVERGENCE_last=0

name="KPOINTS_$1"
backupkpts=`echo ${!name}`

for i in $(seq $2); do
mkdir $i
cd $i
name="KPOINTS_$1"
eval $name=$i
PRINTOUTPUT=false
"$5" "$6" "$7" "$8" "$9" "${10}" "${11}" "${12}" "${13}" "${14}" "${15}" "${16}" "${17}" "${18}" "${19}" "${20}" "${21}" "${22}" "${23}" "${24}" "${25}" "${26}" "${27}" "${28}" "${29}" "${30}" "${31}" "${32}" "${33}" "${34}" "${35}" "${36}" "${37}" "${38}" "${39}" "${40}" "${41}" "${42}" "${43}" "${44}" "${45}" "${46}" "${47}" "${48}" "${49}" "${50}" "${51}" "${52}" "${53}" "${54}" "${55}" "${56}" "${57}" "${58}" "${59}" "${60}" "${61}" "${62}" "${63}" "${64}" "${65}" "${66}" "${67}" "${68}" "${69}" "${70}" "${71}" "${72}" "${73}" "${74}" "${75}" "${76}" "${77}" "${78}" "${79}" "${80}" "${81}" "${82}" "${83}" "${84}" "${85}" "${86}"
PRINTOUTPUT=true
cd ..

if [ "$4" != "autovar" ]; then                                                                           
name="$4"                                                                                                
VARIABLEFORCONVERGENCE=`echo ${!name}`                                                                   
fi

echo " $i $VARIABLEFORCONVERGENCE " >> data.dat

diff=`echo $VARIABLEFORCONVERGENCE - $VARIABLEFORCONVERGENCE_last | bc -l`
echo " $i                       $VARIABLEFORCONVERGENCE     $diff"
echo " $i                       $VARIABLEFORCONVERGENCE     $diff" >> $MAINDIR/output.txt
if [ $(echo "$diff > 0.0" | bc) -eq 1 ]; then
if [ $(echo "$3 > $diff" | bc) -eq 1 ]; then
if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " convergence criterion of " $3 " was reached at " $i " kpoints."
if [ "$UPDATEVARIABLES" = true ]; then
  echo " KPOINTS_$1 has been updated to the optimized value "
fi
  echo " " >> $MAINDIR/output.txt
  echo " convergence criterion of " $3 " was reached at " $i " kpoints." >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " KPOINTS_$1 has been updated to the optimized value " >> $MAINDIR/output.txt
fi
fi
  break
fi
fi
if [ $(echo "0.0 > $diff" | bc) -eq 1 ]; then
if [ $(echo "$diff > -$3" | bc) -eq 1 ]; then
if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " convergence criterion of " $3 " was reached at " $i " kpoints."
if [ "$UPDATEVARIABLES" = true ]; then
  echo " KPOINTS_$1 has been updated to the optimized value "
fi
  echo " " >> $MAINDIR/output.txt
  echo " convergence criterion of " $3 " was reached at " $i " kpoints." >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " KPOINTS_$1 has been updated to the optimized value " >> $MAINDIR/output.txt
fi
fi
  break
fi
fi
hhh=($2)
hhhhhh=${hhh[2]}
if [ $(echo "$i == $hhhhhh" | bc) -eq 1 ]; then
if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " CONVERGENCE CRITERION OF " $3 " WAS NOT REACHED!!!"
if [ "$UPDATEVARIABLES" = true ]; then
  echo " KPOINTS_$1 has been updated to $hhhhhh "
fi
  echo " " >> $MAINDIR/output.txt
  echo " CONVERGENCE CRITERION OF " $3 " WAS NOT REACHED!!!" >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " KPOINTS_$1 has been updated to $hhhhhh " >> $MAINDIR/output.txt
fi
fi
fi
VARIABLEFORCONVERGENCE_last=$VARIABLEFORCONVERGENCE
done

if [ "$UPDATEVARIABLES" = false ]; then
name="KPOINTS_$i"
eval $name=$backupkpts
fi

plotxydata data.dat

if [ "$4" = "autovar" ]; then
if [ "$5" = "electronicmin" ]; then
ylabel="Total free energy per atom (eV)"
fi
if [ "$5" = "relaxation" ]; then
ylabel="Volume per atom ({\305}^3)"
fi
fi

if [ "$4" != "autovar" ]; then
ylabel="$4"
fi

cat > kpointsconvergence_gnup_${1}_${GGA} << EOF
set title "$1 kpoints convergence test ;  GGA = $GGA, POTCAR = $POTCAR"
set encoding iso_8859_1
set xlabel "Number of kpoints along x-, y-, z- direction"
set ylabel "$ylabel"
unset key
set term png
set output "kpointsconvergence_${1}_${GGA}.png"
p 'data.dat' u 1:2 w lp
EOF
if [ -n "$GNUPLOT" ]; then
$GNUPLOT kpointsconvergence_gnup_${1}_${GGA}
fi

let secs=$SECONDS-$secskpointsconvergence
let TOTALTIME=$TOTALTIME+$secs
hrs=$(( secs/3600 )); mins=$(( (secs-hrs*3600)/60 )); secs=$(( secs-hrs*3600-mins*60 ))
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ellapsed time: $hrs h $mins min $secs s"
echo " " >> $MAINDIR/output.txt
echo " ellapsed time: $hrs h $mins min $secs s" >> $MAINDIR/output.txt
fi


cd ..

}

 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
nomegaconvergence () {

secsnomegaconvergence=$SECONDS

if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ###########################################################################################"
echo " "
echo " Running now: nomegaconvergence $1 \"$2\" $3 $4 $5 $6 $7 $8 $9  ;   $GGA $POTCAR "
echo " " >> $MAINDIR/output.txt
echo " ###########################################################################################" >> $MAINDIR/output.txt
echo " " >> $MAINDIR/output.txt
echo " Running now: nomegaconvergence $1 \"$2\" $3 $4 $5 $6 $7 $8 $9  ;   $GGA $POTCAR " >> $MAINDIR/output.txt
fi

backupnomega=$NOMEGA

mkdir nomegaconvergence_${1}
cd nomegaconvergence_${1}
VARIABLEFORCONVERGENCE_last=0
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " NOMEGA                  Result                      Difference"
echo " " >> $MAINDIR/output.txt
echo " NOMEGA                  Result                      Difference" >> $MAINDIR/output.txt
fi
for i in $(seq $2); do
mkdir $i
cd $i
NOMEGA=$i
PRINTOUTPUT=false
"$5" "$6" "$7" "$8" "$9" "${10}" "${11}" "${12}" "${13}" "${14}" "${15}" "${16}" "${17}" "${18}" "${19}" "${20}" "${21}" "${22}" "${23}" "${24}" "${25}" "${26}" "${27}" "${28}" "${29}" "${30}" "${31}" "${32}" "${33}" "${34}" "${35}" "${36}" "${37}" "${38}" "${39}" "${40}" "${41}" "${42}" "${43}" "${44}" "${45}" "${46}" "${47}" "${48}" "${49}" "${50}" "${51}" "${52}" "${53}" "${54}" "${55}" "${56}" "${57}" "${58}" "${59}" "${60}" "${61}" "${62}" "${63}" "${64}" "${65}" "${66}" "${67}" "${68}" "${69}" "${70}" "${71}" "${72}" "${73}" "${74}" "${75}" "${76}" "${77}" "${78}" "${79}" "${80}" "${81}" "${82}" "${83}" "${84}" "${85}" "${86}"
PRINTOUTPUT=true
cd ..

if [ "$4" != "autovar" ]; then
name="$4"
VARIABLEFORCONVERGENCE=`echo ${!name}`
fi

echo " $i $VARIABLEFORCONVERGENCE " >> data.dat

diff=`echo $VARIABLEFORCONVERGENCE - $VARIABLEFORCONVERGENCE_last | bc -l`
echo " $s  $VARIABLEFORCONVERGENCE     $diff"
echo " $s  $VARIABLEFORCONVERGENCE     $diff" >> $MAINDIR/output.txt
if [ $(echo "$diff > 0.0" | bc) -eq 1 ]; then
if [ $(echo "$3 > $diff" | bc) -eq 1 ]; then
if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " convergence criterion of " $3 " was reached at NOMEGA = " $i
if [ "$UPDATEVARIABLES" = true ]; then
  echo " NOMEGA has been updated to the optimized value "
fi
  echo " " >> $MAINDIR/output.txt
  echo " convergence criterion of " $3 " was reached at NOMEGA = " $i >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " NOMEGA has been updated to the optimized value " >> $MAINDIR/output.txt
fi
fi
  break
fi
fi
if [ $(echo "0.0 > $diff" | bc) -eq 1 ]; then
if [ $(echo "$diff > -$3" | bc) -eq 1 ]; then
if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " convergence criterion of " $3 " was reached at NOMEGA = " $i
if [ "$UPDATEVARIABLES" = true ]; then
  echo " NOMEGA has been updated to the optimized value "
fi
  echo " " >> $MAINDIR/output.txt
  echo " convergence criterion of " $3 " was reached at NOMEGA = " $i >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " NOMEGA has been updated to the optimized value " >> $MAINDIR/output.txt
fi
fi
  break
fi
fi
hhh=($2)
hhhhhh=${hhh[2]}
if [ $(echo "$i == $hhhhhh" | bc) -eq 1 ]; then
if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " CONVERGENCE CRITERION OF " $3 " WAS NOT REACHED!!!"
if [ "$UPDATEVARIABLES" = true ]; then
  echo " NOMEGA has been updated to $hhhhhh "
fi
  echo " " >> $MAINDIR/output.txt
  echo " CONVERGENCE CRITERION OF " $3 " WAS NOT REACHED!!!" >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " NOMEGA has been updated to $hhhhhh " >> $MAINDIR/output.txt
fi
fi
fi
VARIABLEFORCONVERGENCE_last=$VARIABLEFORCONVERGENCE
done

if [ "$UPDATEVARIABLES" = false ]; then
NOMEGA=$backupnomega
fi

plotxydata data.dat

if [ "$4" = "autovar" ]; then
if [ "$5" = "electronicmin" ]; then
ylabel="Total free energy per atom (eV)"
fi
if [ "$5" = "relaxation" ]; then
ylabel="Volume per atom ({\305}^3)"
fi
fi

if [ "$4" != "autovar" ]; then
ylabel="$4"
fi

cat > nomegaconvergence_gnup_${1}_${GGA} << EOF
set title "$1 NOMEGA convergence test ;  GGA = $GGA, POTCAR = $POTCAR"
set encoding iso_8859_1
set xlabel "Number of imaginary frequency and time points"
set ylabel "$ylabel"
unset key
set term png
set output "nomegaconvergence_${1}_${GGA}.png"
p 'data.dat' u 1:2 w lp
EOF
if [ -n "$GNUPLOT" ]; then
$GNUPLOT nomegaconvergence_gnup_${1}_${GGA}
fi



let secs=$SECONDS-$secsnomegaconvergence
let TOTALTIME=$TOTALTIME+$secs
hrs=$(( secs/3600 )); mins=$(( (secs-hrs*3600)/60 )); secs=$(( secs-hrs*3600-mins*60 ))
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ellapsed time: $hrs h $mins min $secs s"
echo " " >> $MAINDIR/output.txt
echo " ellapsed time: $hrs h $mins min $secs s" >> $MAINDIR/output.txt
fi


cd ..

}

 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
numberoflayersconvergence () {

secsnumberoflayersconvergence=$SECONDS

if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ###########################################################################################"
echo " "
echo " Running now: numberoflayersconvergence $1 \"$2\" $3 $4 $5 $6 $7 $8 $9  ;   $GGA $POTCAR "
echo " "
echo " Number of layers       Result                      Difference"
echo " " >> $MAINDIR/output.txt
echo " ###########################################################################################" >> $MAINDIR/output.txt
echo " " >> $MAINDIR/output.txt
echo " Running now: numberoflayersconvergence $1 \"$2\" $3 $4 $5 $6 $7 $8 $9  ;   $GGA $POTCAR " >> $MAINDIR/output.txt
echo " " >> $MAINDIR/output.txt
echo " Number of layers       Result                      Difference" >> $MAINDIR/output.txt
fi

mkdir numberoflayersconvergence_${1}
cd numberoflayersconvergence_${1}
VARIABLEFORCONVERGENCE_last=0

name="NUMBER_OF_LAYERS_$1"
backupnum=`echo ${!name}`

for i in $(seq $2); do
mkdir $i
cd $i
name="NUMBER_OF_LAYERS_$1"
eval $name=$i
PRINTOUTPUT=false
"$5" "$6" "$7" "$8" "$9" "${10}" "${11}" "${12}" "${13}" "${14}" "${15}" "${16}" "${17}" "${18}" "${19}" "${20}" "${21}" "${22}" "${23}" "${24}" "${25}" "${26}" "${27}" "${28}" "${29}" "${30}" "${31}" "${32}" "${33}" "${34}" "${35}" "${36}" "${37}" "${38}" "${39}" "${40}" "${41}" "${42}" "${43}" "${44}" "${45}" "${46}" "${47}" "${48}" "${49}" "${50}" "${51}" "${52}" "${53}" "${54}" "${55}" "${56}" "${57}" "${58}" "${59}" "${60}" "${61}" "${62}" "${63}" "${64}" "${65}" "${66}" "${67}" "${68}" "${69}" "${70}" "${71}" "${72}" "${73}" "${74}" "${75}" "${76}" "${77}" "${78}" "${79}" "${80}" "${81}" "${82}" "${83}" "${84}" "${85}" "${86}"
PRINTOUTPUT=true
cd ..

if [ "$4" != "autovar" ]; then
name="$4"
VARIABLEFORCONVERGENCE=`echo ${!name}`
fi

echo " $i $VARIABLEFORCONVERGENCE " >> data.dat

diff=`echo $VARIABLEFORCONVERGENCE - $VARIABLEFORCONVERGENCE_last | bc -l`
echo " $i                       $VARIABLEFORCONVERGENCE     $diff"
echo " $i                       $VARIABLEFORCONVERGENCE     $diff" >> $MAINDIR/output.txt
if [ $(echo "$diff > 0.0" | bc) -eq 1 ]; then
if [ $(echo "$3 > $diff" | bc) -eq 1 ]; then
if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " convergence criterion of " $3 " was reached at " $i " layers."
if [ "$UPDATEVARIABLES" = true ]; then
  echo " NUMBER_OF_LAYERS_$1 has been updated to the optimized value "
fi
  echo " " >> $MAINDIR/output.txt
  echo " convergence criterion of " $3 " was reached at " $i " layers." >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " NUMBER_OF_LAYERS_$1 has been updated to the optimized value " >> $MAINDIR/output.txt
fi
fi
  break
fi
fi
if [ $(echo "0.0 > $diff" | bc) -eq 1 ]; then
if [ $(echo "$diff > -$3" | bc) -eq 1 ]; then
if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " convergence criterion of " $3 " was reached at " $i " layers."
if [ "$UPDATEVARIABLES" = true ]; then
  echo " NUMBER_OF_LAYERS_$1 has been updated to the optimized value "
fi
  echo " " >> $MAINDIR/output.txt
  echo " convergence criterion of " $3 " was reached at " $i " layers." >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " NUMBER_OF_LAYERS_$1 has been updated to the optimized value " >> $MAINDIR/output.txt
fi
fi
  break
fi
fi
hhh=($2)
hhhhhh=${hhh[2]}
if [ $(echo "$i == $hhhhhh" | bc) -eq 1 ]; then
if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " CONVERGENCE CRITERION OF " $3 " WAS NOT REACHED!!!"
if [ "$UPDATEVARIABLES" = true ]; then
  echo " NUMBER_OF_LAYERS_$1 has been updated to $hhhhhh "
fi
  echo " " >> $MAINDIR/output.txt
  echo " CONVERGENCE CRITERION OF " $3 " WAS NOT REACHED!!!" >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " NUMBER_OF_LAYERS_$1 has been updated to $hhhhhh " >> $MAINDIR/output.txt
fi
fi
fi
VARIABLEFORCONVERGENCE_last=$VARIABLEFORCONVERGENCE
done

if [ "$UPDATEVARIABLES" = false ]; then
name="NUMBER_OF_LAYERS_$i"
eval $name=$backupnum
fi

plotxydata data.dat

if [ "$4" = "autovar" ]; then
if [ "$5" = "electronicmin" ]; then
ylabel="Total free energy per atom (eV)"
fi
if [ "$5" = "relaxation" ]; then
ylabel="Volume per atom ({\305}^3)"
fi
fi

if [ "$4" != "autovar" ]; then
ylabel="$4"
fi

cat > numberoflayersconvergence_gnup_${1}_${GGA} << EOF
set title "$1 number of layers convergence test ;  GGA = $GGA, POTCAR = $POTCAR"
set encoding iso_8859_1
set xlabel "Number of surface layers"
set ylabel "$ylabel"
unset key
set term png
set output "numberoflayersconvergence_${1}_${GGA}.png"
p 'data.dat' u 1:2 w lp
EOF
if [ -n "$GNUPLOT" ]; then
$GNUPLOT numberoflayersconvergence_gnup_${1}_${GGA}
fi


let secs=$SECONDS-$secsnumberoflayersconvergence
let TOTALTIME=$TOTALTIME+$secs
hrs=$(( secs/3600 )); mins=$(( (secs-hrs*3600)/60 )); secs=$(( secs-hrs*3600-mins*60 ))
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ellapsed time: $hrs h $mins min $secs s"
echo " " >> $MAINDIR/output.txt
echo " ellapsed time: $hrs h $mins min $secs s" >> $MAINDIR/output.txt
fi


cd ..

}

 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
sigmaconvergence () {

secssigmaconvergence=$SECONDS

if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ###########################################################################################"
echo " "
echo " Running now: sigmaconvergence $1 \"$2\" $3 $4 $5 $6 $7 $8 $9  ;   $GGA $POTCAR "
echo " " >> $MAINDIR/output.txt
echo " ###########################################################################################" >> $MAINDIR/output.txt
echo " " >> $MAINDIR/output.txt
echo " Running now: sigmaconvergence $1 \"$2\" $3 $4 $5 $6 $7 $8 $9  ;   $GGA $POTCAR " >> $MAINDIR/output.txt
fi

backupsigma=$SIGMA

mkdir sigmaconvergence_${1}
cd sigmaconvergence_${1}
VARIABLEFORCONVERGENCE_last=0
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " SIGMA                  Result                      Difference"
echo " " >> $MAINDIR/output.txt
echo " SIGMA                  Result                      Difference" >> $MAINDIR/output.txt
fi
array=($(echo "$2"))
value1=`echo ${array[0]} \* 10000 | bc -l`
value2=`echo ${array[1]} \* 10000 | bc -l`
value3=`echo ${array[2]} \* 10000 | bc -l`
for i in $(seq ${value1%.*} ${value2%.*} ${value3%.*}); do
s=`echo $i / 10000 | bc -l`
mkdir $s
cd $s
SIGMA=$s
PRINTOUTPUT=false
"$5" "$6" "$7" "$8" "$9" "${10}" "${11}" "${12}" "${13}" "${14}" "${15}" "${16}" "${17}" "${18}" "${19}" "${20}" "${21}" "${22}" "${23}" "${24}" "${25}" "${26}" "${27}" "${28}" "${29}" "${30}" "${31}" "${32}" "${33}" "${34}" "${35}" "${36}" "${37}" "${38}" "${39}" "${40}" "${41}" "${42}" "${43}" "${44}" "${45}" "${46}" "${47}" "${48}" "${49}" "${50}" "${51}" "${52}" "${53}" "${54}" "${55}" "${56}" "${57}" "${58}" "${59}" "${60}" "${61}" "${62}" "${63}" "${64}" "${65}" "${66}" "${67}" "${68}" "${69}" "${70}" "${71}" "${72}" "${73}" "${74}" "${75}" "${76}" "${77}" "${78}" "${79}" "${80}" "${81}" "${82}" "${83}" "${84}" "${85}" "${86}"
PRINTOUTPUT=true
cd ..

if [ "$4" != "autovar" ]; then
name="$4"
VARIABLEFORCONVERGENCE=`echo ${!name}`
fi

echo " $i $VARIABLEFORCONVERGENCE " >> data.dat

diff=`echo $VARIABLEFORCONVERGENCE - $VARIABLEFORCONVERGENCE_last | bc -l`
echo " $s  $VARIABLEFORCONVERGENCE     $diff"
echo " $s  $VARIABLEFORCONVERGENCE     $diff" >> $MAINDIR/output.txt
if [ $(echo "$diff > 0.0" | bc) -eq 1 ]; then
if [ $(echo "$3 > $diff" | bc) -eq 1 ]; then
if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " convergence criterion of " $3 " was reached at SIGMA = " $s
if [ "$UPDATEVARIABLES" = true ]; then
  echo " SIGMA has been updated to the optimized value "
fi
  echo " " >> $MAINDIR/output.txt
  echo " convergence criterion of " $3 " was reached at SIGMA = " $s >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " SIGMA has been updated to the optimized value " >> $MAINDIR/output.txt
fi
fi
  break
fi
fi
if [ $(echo "0.0 > $diff" | bc) -eq 1 ]; then
if [ $(echo "$diff > -$3" | bc) -eq 1 ]; then
if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " convergence criterion of " $3 " was reached at SIGMA = " $s
if [ "$UPDATEVARIABLES" = true ]; then
  echo " SIGMA has been updated to the optimized value "
fi
  echo " " >> $MAINDIR/output.txt
  echo " convergence criterion of " $3 " was reached at SIGMA = " $s >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " SIGMA has been updated to the optimized value " >> $MAINDIR/output.txt
fi
fi
  break
fi
fi
hhh=($2)
hhhhhh=${hhh[2]}
if [ $(echo "$i == $hhhhhh" | bc) -eq 1 ]; then
if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " CONVERGENCE CRITERION OF " $3 " WAS NOT REACHED!!!"
if [ "$UPDATEVARIABLES" = true ]; then
  echo " SIGMA has been updated to $hhhhhh "
fi
  echo " " >> $MAINDIR/output.txt
  echo " CONVERGENCE CRITERION OF " $3 " WAS NOT REACHED!!!" >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " SIGMA has been updated to $hhhhhh " >> $MAINDIR/output.txt
fi
fi
fi
VARIABLEFORCONVERGENCE_last=$VARIABLEFORCONVERGENCE
done

if [ "$UPDATEVARIABLES" = false ]; then
SIGMA=$backupsigma
fi

plotxydata data.dat

if [ "$4" = "autovar" ]; then
if [ "$5" = "electronicmin" ]; then
ylabel="Total free energy per atom (eV)"
fi
if [ "$5" = "relaxation" ]; then
ylabel="Volume per atom ({\305}^3)"
fi
fi

if [ "$4" != "autovar" ]; then
ylabel="$4"
fi

cat > sigmaconvergence_gnup_${1}_${GGA} << EOF
set title "$1 SIGMA convergence test ;  GGA = $GGA, POTCAR = $POTCAR"
set encoding iso_8859_1
set xlabel "Smearing width (eV)"
set ylabel "$ylabel"
unset key
set term png
set output "sigmaconvergence_${1}_${GGA}.png"
p 'data.dat' u 1:2 w lp
EOF
if [ -n "$GNUPLOT" ]; then
$GNUPLOT sigmaconvergence_gnup_${1}_${GGA}
fi


let secs=$SECONDS-$secssigmaconvergence
let TOTALTIME=$TOTALTIME+$secs
hrs=$(( secs/3600 )); mins=$(( (secs-hrs*3600)/60 )); secs=$(( secs-hrs*3600-mins*60 ))
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ellapsed time: $hrs h $mins min $secs s"
echo " " >> $MAINDIR/output.txt
echo " ellapsed time: $hrs h $mins min $secs s" >> $MAINDIR/output.txt
fi


cd ..

}

 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
supercellconvergence () {

secssupercellconvergence=$SECONDS

if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ###########################################################################################"
echo " "
echo " Running now: supercellconvergence $1 \"$2\" $3 $4 $5 $6 $7 $8 $9  ;   $GGA $POTCAR "
echo " " >> $MAINDIR/output.txt
echo " ###########################################################################################" >> $MAINDIR/output.txt
echo " " >> $MAINDIR/output.txt
echo " Running now: supercellconvergence $1 \"$2\" $3 $4 $5 $6 $7 $8 $9  ;   $GGA $POTCAR " >> $MAINDIR/output.txt
fi

name="SUPERCELL_FACTOR_$1"
backupsup=`echo ${!name}`

mkdir supercellconvergence_${1}
cd supercellconvergence_${1}
VARIABLEFORCONVERGENCE_last=0
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " supercell factor        Result                      Difference"
echo " " >> $MAINDIR/output.txt
echo " supercell factor        Result                      Difference" >> $MAINDIR/output.txt
fi
for i in $(seq $2); do
mkdir $i
cd $i
name="SUPERCELL_FACTOR_$1"
eval $name=$i
PRINTOUTPUT=false
"$5" "$6" "$7" "$8" "$9" "${10}" "${11}" "${12}" "${13}" "${14}" "${15}" "${16}" "${17}" "${18}" "${19}" "${20}" "${21}" "${22}" "${23}" "${24}" "${25}" "${26}" "${27}" "${28}" "${29}" "${30}" "${31}" "${32}" "${33}" "${34}" "${35}" "${36}" "${37}" "${38}" "${39}" "${40}" "${41}" "${42}" "${43}" "${44}" "${45}" "${46}" "${47}" "${48}" "${49}" "${50}" "${51}" "${52}" "${53}" "${54}" "${55}" "${56}" "${57}" "${58}" "${59}" "${60}" "${61}" "${62}" "${63}" "${64}" "${65}" "${66}" "${67}" "${68}" "${69}" "${70}" "${71}" "${72}" "${73}" "${74}" "${75}" "${76}" "${77}" "${78}" "${79}" "${80}" "${81}" "${82}" "${83}" "${84}" "${85}" "${86}"
PRINTOUTPUT=true
cd ..

if [ "$4" != "autovar" ]; then
name="$4"
VARIABLEFORCONVERGENCE=`echo ${!name}`
fi

echo " $i $VARIABLEFORCONVERGENCE " >> data.dat

diff=`echo $VARIABLEFORCONVERGENCE - $VARIABLEFORCONVERGENCE_last | bc -l`
echo " $i                       $VARIABLEFORCONVERGENCE     $diff"
echo " $i                       $VARIABLEFORCONVERGENCE     $diff" >> $MAINDIR/output.txt
if [ $(echo "$diff > 0.0" | bc) -eq 1 ]; then
if [ $(echo "$3 > $diff" | bc) -eq 1 ]; then
if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " convergence criterion of " $3 " was reached at a supercell factor of " $i
if [ "$UPDATEVARIABLES" = true ]; then
  echo " SUPERCELL_FACTOR_$1 has been updated to the optimized value "
fi
  echo " " >> $MAINDIR/output.txt
  echo " convergence criterion of " $3 " was reached at a supercell factor of " $i >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " SUPERCELL_FACTOR_$1 has been updated to the optimized value " >> $MAINDIR/output.txt
fi
fi
  break
fi
fi
if [ $(echo "0.0 > $diff" | bc) -eq 1 ]; then
if [ $(echo "$diff > -$3" | bc) -eq 1 ]; then
if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " convergence criterion of " $3 " was reached at a supercell factor of " $i
if [ "$UPDATEVARIABLES" = true ]; then
  echo " SUPERCELL_FACTOR_$1 has been updated to the optimized value "
fi
  echo " " >> $MAINDIR/output.txt
  echo " convergence criterion of " $3 " was reached at a supercell factor of " $i >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " SUPERCELL_FACTOR_$1 has been updated to the optimized value " >> $MAINDIR/output.txt
fi
fi
  break
fi
fi
hhh=($2)
hhhhhh=${hhh[2]}
if [ $(echo "$i == $hhhhhh" | bc) -eq 1 ]; then
if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " CONVERGENCE CRITERION OF " $3 " WAS NOT REACHED!!!"
if [ "$UPDATEVARIABLES" = true ]; then
  echo " SUPERCELL_FACTOR_$1 has been updated to $hhhhhh "
fi
  echo " " >> $MAINDIR/output.txt
  echo " CONVERGENCE CRITERION OF " $3 " WAS NOT REACHED!!!" >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " SUPERCELL_FACTOR_$1 has been updated to $hhhhhh " >> $MAINDIR/output.txt
fi
fi
fi
VARIABLEFORCONVERGENCE_last=$VARIABLEFORCONVERGENCE
done

if [ "$UPDATEVARIABLES" = false ]; then
name="SUPERCELL_FACTOR_$i"
eval $name=$backupsup
fi

plotxydata data.dat

if [ "$4" = "autovar" ]; then
if [ "$5" = "electronicmin" ]; then
ylabel="Total free energy per atom (eV)"
fi
if [ "$5" = "relaxation" ]; then
ylabel="Volume per atom ({\305}^3)"
fi
fi

if [ "$4" != "autovar" ]; then
ylabel="$4"
fi

cat > supercellconvergence_gnup_${1}_${GGA} << EOF
set title "$1 supercell size convergence test ;  GGA = $GGA, POTCAR = $POTCAR"
set encoding iso_8859_1
set xlabel "Supercell factor"
set ylabel "$ylabel"
unset key
set term png
set output "supercellconvergence_${1}_${GGA}.png"
p 'data.dat' u 1:2 w lp
EOF
if [ -n "$GNUPLOT" ]; then
$GNUPLOT supercellconvergence_gnup_${1}_${GGA}
fi


let secs=$SECONDS-$secssupercellconvergence
let TOTALTIME=$TOTALTIME+$secs
hrs=$(( secs/3600 )); mins=$(( (secs-hrs*3600)/60 )); secs=$(( secs-hrs*3600-mins*60 ))
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ellapsed time: $hrs h $mins min $secs s"
echo " " >> $MAINDIR/output.txt
echo " ellapsed time: $hrs h $mins min $secs s" >> $MAINDIR/output.txt
fi


cd ..

}

 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
vacuumsizeconvergence () {

secsvacuumsizeconvergence=$SECONDS

if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ###########################################################################################"
echo " "
echo " Running now: vacuumsizeconvergence $1 \"$2\" $3 $4 $5 $6 $7 $8 $9  ;   $GGA $POTCAR "
echo " "
echo " Vacuum size            Result                      Difference"
echo " " >> $MAINDIR/output.txt
echo " ###########################################################################################" >> $MAINDIR/output.txt
echo " " >> $MAINDIR/output.txt
echo " Running now: vacuumsizeconvergence $1 \"$2\" $3 $4 $5 $6 $7 $8 $9  ;   $GGA $POTCAR " >> $MAINDIR/output.txt
echo " " >> $MAINDIR/output.txt
echo " Vacuum size            Result                      Difference" >> $MAINDIR/output.txt
fi

mkdir vacuumsizeconvergence_${1}
cd vacuumsizeconvergence_${1}
VARIABLEFORCONVERGENCE_last=0

name="VACUUM_SIZE_$1"
backupvac=`echo ${!name}`

for i in $(seq $2); do
mkdir $i
cd $i
name="VACUUM_SIZE_$1"
eval $name=$i
PRINTOUTPUT=false
"$5" "$6" "$7" "$8" "$9" "${10}" "${11}" "${12}" "${13}" "${14}" "${15}" "${16}" "${17}" "${18}" "${19}" "${20}" "${21}" "${22}" "${23}" "${24}" "${25}" "${26}" "${27}" "${28}" "${29}" "${30}" "${31}" "${32}" "${33}" "${34}" "${35}" "${36}" "${37}" "${38}" "${39}" "${40}" "${41}" "${42}" "${43}" "${44}" "${45}" "${46}" "${47}" "${48}" "${49}" "${50}" "${51}" "${52}" "${53}" "${54}" "${55}" "${56}" "${57}" "${58}" "${59}" "${60}" "${61}" "${62}" "${63}" "${64}" "${65}" "${66}" "${67}" "${68}" "${69}" "${70}" "${71}" "${72}" "${73}" "${74}" "${75}" "${76}" "${77}" "${78}" "${79}" "${80}" "${81}" "${82}" "${83}" "${84}" "${85}" "${86}"
PRINTOUTPUT=true
cd ..

if [ "$4" != "autovar" ]; then
name="$4"
VARIABLEFORCONVERGENCE=`echo ${!name}`
fi

echo " $i $VARIABLEFORCONVERGENCE " >> data.dat

diff=`echo $VARIABLEFORCONVERGENCE - $VARIABLEFORCONVERGENCE_last | bc -l`
echo " $i                       $VARIABLEFORCONVERGENCE     $diff"
echo " $i                       $VARIABLEFORCONVERGENCE     $diff" >> $MAINDIR/output.txt
if [ $(echo "$diff > 0.0" | bc) -eq 1 ]; then
if [ $(echo "$3 > $diff" | bc) -eq 1 ]; then
if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " convergence criterion of " $3 " was reached at a vacuum size of " $i " Angstrom."
if [ "$UPDATEVARIABLES" = true ]; then
  echo " VACUUM_SIZE_$1 has been updated to the optimized value "
fi
  echo " " >> $MAINDIR/output.txt
  echo " convergence criterion of " $3 " was reached at a vacuum size of " $i " Angstrom." >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " VACUUM_SIZE_$1 has been updated to the optimized value " >> $MAINDIR/output.txt
fi
fi
  break
fi
fi
if [ $(echo "0.0 > $diff" | bc) -eq 1 ]; then
if [ $(echo "$diff > -$3" | bc) -eq 1 ]; then
if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " convergence criterion of " $3 " was reached at a vacuum size of " $i " Angstrom."
if [ "$UPDATEVARIABLES" = true ]; then
  echo " VACUUM_SIZE_$1 has been updated to the optimized value "
fi
  echo " " >> $MAINDIR/output.txt
  echo " convergence criterion of " $3 " was reached at a vacuum size of " $i " Angstrom." >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " VACUUM_SIZE_$1 has been updated to the optimized value " >> $MAINDIR/output.txt
fi
fi
  break
fi
fi
hhh=($2)
hhhhhh=${hhh[2]}
if [ $(echo "$i == $hhhhhh" | bc) -eq 1 ]; then
if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " CONVERGENCE CRITERION OF " $3 " WAS NOT REACHED!!!"
if [ "$UPDATEVARIABLES" = true ]; then
  echo " VACUUM_SIZE_$1 has been updated to $hhhhhh "
fi
  echo " " >> $MAINDIR/output.txt
  echo " CONVERGENCE CRITERION OF " $3 " WAS NOT REACHED!!!" >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " VACUUM_SIZE_$1 has been updated to $hhhhhh " >> $MAINDIR/output.txt
fi
fi
fi
VARIABLEFORCONVERGENCE_last=$VARIABLEFORCONVERGENCE
done

if [ "$UPDATEVARIABLES" = false ]; then
name="VACUUM_SIZE_$i"
eval $name=$backupvac
fi

plotxydata data.dat

if [ "$4" = "autovar" ]; then
if [ "$5" = "electronicmin" ]; then
ylabel="Total free energy per atom (eV)"
fi
if [ "$5" = "relaxation" ]; then
ylabel="Volume per atom ({\305}^3)"
fi
fi

if [ "$4" != "autovar" ]; then
ylabel="$4"
fi

cat > vacuumsizeconvergence_gnup_${1}_${GGA} << EOF
set title "$1 vacuum size convergence test ;  GGA = $GGA, POTCAR = $POTCAR"
set encoding iso_8859_1
set xlabel "Vacuum size ({\305})"
set ylabel "$ylabel"
unset key
set term png
set output "vacuumsizeconvergence_${1}_${GGA}.png"
p 'data.dat' u 1:2 w lp
EOF
if [ -n "$GNUPLOT" ]; then
$GNUPLOT vacuumsizeconvergence_gnup_${1}_${GGA}
fi


let secs=$SECONDS-$secsvacuumsizeconvergence
let TOTALTIME=$TOTALTIME+$secs
hrs=$(( secs/3600 )); mins=$(( (secs-hrs*3600)/60 )); secs=$(( secs-hrs*3600-mins*60 ))
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ellapsed time: $hrs h $mins min $secs s"
echo " " >> $MAINDIR/output.txt
echo " ellapsed time: $hrs h $mins min $secs s" >> $MAINDIR/output.txt
fi


cd ..

}

 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
densityofstates () {            # $2 is for addpointdefect ... / addadsorbant ...

secs=$SECONDS

mkdir densityofstates_${1}
cd densityofstates_${1}
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ###########################################################################################"
echo " "
echo " Running now: densityofstates $1 $2  ;   $ALGO $GGA $POTCAR "
echo " " >> $MAINDIR/output.txt
echo " ###########################################################################################" >> $MAINDIR/output.txt
echo " " >> $MAINDIR/output.txt
echo " Running now: densityofstates $1 $2  ;   $ALGO $GGA $POTCAR " >> $MAINDIR/output.txt
fi


$1 ;

if [ -n "$2" ]; then
$2 "$3" "$4" "$5" "$6"
fi

if [ -n "$7" ]; then
$7 "$8" "$9" "${10}" "${11}"
fi

if [ -n "${12}" ]; then
${12} "${13}" "${14}" "${15}" "${16}"
fi

if [ -n "${17}" ]; then
${17} "${18}" "${19}" "${20}" "${21}"
fi

if [ -n "${22}" ]; then
${22} "${23}" "${24}" "${25}" "${26}"
fi

if [ -n "${27}" ]; then
${27} "${28}" "${29}" "${30}" "${31}"
fi

if [ -n "${32}" ]; then
${32} "${33}" "${34}" "${35}" "${36}"
fi

if [ -n "${37}" ]; then
${37} "${38}" "${39}" "${40}" "${41}"
fi

if [ -n "${42}" ]; then
${42} "${43}" "${44}" "${45}" "${46}"
fi

if [ -n "${47}" ]; then
${47} "${48}" "${49}" "${50}" "${51}"
fi

if [ -n "${52}" ]; then
${52} "${53}" "${54}" "${55}" "${56}"
fi

if [ -n "${57}" ]; then
${57} "${58}" "${59}" "${60}" "${61}"
fi

if [ -n "${62}" ]; then
${62} "${63}" "${64}" "${65}" "${66}"
fi

if [ -n "${67}" ]; then
${67} "${68}" "${69}" "${70}" "${71}"
fi

if [ -n "${72}" ]; then
${72} "${73}" "${74}" "${75}" "${76}"
fi

if [ -n "${77}" ]; then
${77} "${78}" "${79}" "${80}" "${81}"
fi

buildkpoints $1
backupismear=$ISMEAR
ISMEAR=-5
buildincar
ISMEAR=$backupismear
echo "#density of states:" >> INCAR
echo "LORBIT = 11" >> INCAR
echo "NEDOS = $NEDOS" >> INCAR
echo "EMAX = $EMAX" >> INCAR
echo "EMIN = $EMIN" >> INCAR
echo " " >> INCAR
buildpotcar
$VASP

awk 'BEGIN{i=1} /dos>/,\
                /\/dos>/ \
                 {a[i]=$2 ; b[i]=$3 ; i=i+1} \
     END{for (j=12;j<i-5;j++) print a[j],b[j]}' vasprun.xml > dos.dat

ef=`awk '/efermi/ {print $3}' vasprun.xml`


cat > densityofstates_gnup_${1}_${GGA} << EOF
set title "$1 density of states ;  GGA = $GGA, POTCAR = $POTCAR"
set xlabel "Energy (eV)"
set ylabel "Density of States (states/eV)"
unset key
p "dos.dat" using (\$1-$ef):(\$2) w l
set term png
set output "densityofstates_${1}_${GGA}.png"
p "dos.dat" using (\$1-$ef):(\$2) w l
EOF
if [ -n "$GNUPLOT" ]; then
$GNUPLOT densityofstates_gnup_${1}_${GGA}
fi

echo " "
echo " " >> $MAINDIR/output.txt

lines=$NEDOS

calculatebandgapwidth=false

lineminone=( -1000000 0.0 )
for dkjnvgjnvg in $(seq 1 1 $lines) ; do
line=($(sed -n "$dkjnvgjnvg"'p' < dos.dat))

if [ $(echo "${lineminone[0]} < $ef" | bc) -eq 1 ]; then
x=x
if [ $(echo "${line[0]} > $ef" | bc) -eq 1 ]; then


if [ $(echo "${lineminone[1]} == 0.0000" | bc) -eq 1 ]; then
x=x
if [ $(echo "${line[1]} == 0.0000" | bc) -eq 1 ]; then
echo " Fermi energy = $ef eV - lies within a band gap (insulator/semiconductor) "
echo " Fermi energy = $ef eV - lies within a band gap (insulator/semiconductor) " >> $MAINDIR/output.txt
calculatebandgapwidth=true
fi
fi

if [ $(echo "${lineminone[1]} != 0.0000" | bc) -eq 1 ]; then
x=x
if [ $(echo "${line[1]} != 0.0000" | bc) -eq 1 ]; then
echo " Fermi energy = $ef eV - lies within a band (metal/semimetal) "
echo " Fermi energy = $ef eV - lies within a band (metal/semimetal) " >> $MAINDIR/output.txt
fi
fi

if [ $(echo "${lineminone[1]} == 0.0000" | bc) -eq 1 ]; then
x=x
if [ $(echo "${line[1]} != 0.0000" | bc) -eq 1 ]; then
echo " Fermi energy = $ef eV - lies at the upper band gap border (n-type insulator/semiconductor) "
echo " Fermi energy = $ef eV - lies at the upper band gap border (n-type insulator/semiconductor) " >> $MAINDIR/output.txt
calculatebandgapwidth=true
fi
fi

if [ $(echo "${lineminone[1]} != 0.0000" | bc) -eq 1 ]; then
x=x
if [ $(echo "${line[1]} == 0.0000" | bc) -eq 1 ]; then
echo " Fermi energy = $ef eV - lies at the lower band gap border (p-type insulator/semiconductor) "
echo " Fermi energy = $ef eV - lies at the lower band gap border (p-type insulator/semiconductor) " >> $MAINDIR/output.txt
calculatebandgapwidth=true
fi
fi


fi
fi

lineminone=( "${line[@]}" )
done


if [ "$calculatebandgapwidth" = true ]; then

lineminone=( -1000000 0.0 )
for dkjnvgjnvg in $(seq 1 1 $lines) ; do
line=($(sed -n "$dkjnvgjnvg"'p' < dos.dat))

if [ $(echo "${line[1]} == 0.0000" | bc) -eq 1 ]; then
if [ $(echo "${lineminone[1]} != 0.0000" | bc) -eq 1 ]; then
if [ $(echo "$ef > ${lineminone[0]}" | bc) -eq 1 ]; then
band_gap_lower="${lineminone[0]}"
fi
fi
fi

lineminone=( "${line[@]}" )
done

lineplusone=( 1000000 0.0 )
for dkjnvgjnvg in $(seq 1 1 $lines) ; do

let antiline=$lines-$dkjnvgjnvg

line=($(sed -n "$antiline"'p' < dos.dat))

if [ $(echo "${line[1]} == 0.0000" | bc) -eq 1 ]; then
if [ $(echo "${lineplusone[1]} != 0.0000" | bc) -eq 1 ]; then
if [ $(echo "$ef < ${lineplusone[0]}" | bc) -eq 1 ]; then
band_gap_upper="${lineplusone[0]}"
fi
fi
fi

lineplusone=( "${line[@]}" )
done

band_gap_width=`echo $band_gap_upper - $band_gap_lower | bc -l`

lineminone=( -1000000 0.0 )
for dkjnvgjnvg in $(seq 1 1 $lines) ; do
line=($(sed -n "$dkjnvgjnvg"'p' < dos.dat))

if [ $(echo "${line[1]} != 0.0000" | bc) -eq 1 ]; then
if [ $(echo "${lineminone[1]} == 0.0000" | bc) -eq 1 ]; then
if [ $(echo "$band_gap_lower > ${line[0]}" | bc) -eq 1 ]; then
valence_band_lower="${line[0]}"
fi
fi
fi

lineminone=( "${line[@]}" )
done

lineplusone=( 1000000 0.0 )
for dkjnvgjnvg in $(seq 1 1 $lines) ; do

let antiline=$lines-$dkjnvgjnvg

line=($(sed -n "$antiline"'p' < dos.dat))

if [ $(echo "${line[1]} != 0.0000" | bc) -eq 1 ]; then
if [ $(echo "${lineplusone[1]} == 0.0000" | bc) -eq 1 ]; then
if [ $(echo "$band_gap_upper < ${line[0]}" | bc) -eq 1 ]; then
conduction_band_upper="${line[0]}"
fi
fi
fi

lineplusone=( "${line[@]}" )
done

valence_band_width=`echo $band_gap_lower - $valence_band_lower | bc -l`
conduction_band_width=`echo $conduction_band_upper - $band_gap_upper | bc -l`

echo " conduction band: [$band_gap_upper, $conduction_band_upper] eV (width: $conduction_band_width eV)"
echo " band gap:        [$band_gap_lower, $band_gap_upper] eV (width: $band_gap_width eV)"
echo " valence band:    [$valence_band_lower, $band_gap_lower] eV (width: $valence_band_width eV)"

echo " conduction band: [$band_gap_upper, $conduction_band_upper] eV (width: $conduction_band_width eV)" >> $MAINDIR/output.txt
echo " band gap:        [$band_gap_lower, $band_gap_upper] eV (width: $band_gap_width eV)" >> $MAINDIR/output.txt
echo " valence band:    [$valence_band_lower, $band_gap_lower] eV (width: $valence_band_width eV)" >> $MAINDIR/output.txt

#echo " lower border of band gap: $band_gap_lower eV "
#echo " upper border of band gap: $band_gap_upper eV "
#echo " width of band gap: $width eV "

#echo " lower border of band gap: $band_gap_lower eV " >> $MAINDIR/output.txt
#echo " upper border of band gap: $band_gap_upper eV " >> $MAINDIR/output.txt
#echo " width of band gap: $width eV " >> $MAINDIR/output.txt

fi

plotxydata+ dos.dat

#echo "                                              ^                                             " 
#echo "                                 fermi energy = $ef eV"  
#echo "                                              ^                                             " >> $MAINDIR/output.txt
#echo "                                 fermi energy = $ef eV" >> $MAINDIR/output.txt


let secs=$SECONDS-$secs
let TOTALTIME=$TOTALTIME+$secs
hrs=$(( secs/3600 )); mins=$(( (secs-hrs*3600)/60 )); secs=$(( secs-hrs*3600-mins*60 ))
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ellapsed time: $hrs h $mins min $secs s"
echo " " >> $MAINDIR/output.txt
echo " ellapsed time: $hrs h $mins min $secs s" >> $MAINDIR/output.txt
fi

cd ..

}




 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
electronicmin () {            # $2 is for addpointdefect ... / addadsorbant ...

secs=$SECONDS

mkdir electronicmin_${1}
cd electronicmin_${1}
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ###########################################################################################"
echo " "
echo " Running now: electronicmin $1 $2  ;   $ALGO $GGA $POTCAR "
echo " " >> $MAINDIR/output.txt
echo " ###########################################################################################" >> $MAINDIR/output.txt
echo " " >> $MAINDIR/output.txt
echo " Running now: electronicmin $1 $2  ;   $ALGO $GGA $POTCAR " >> $MAINDIR/output.txt
fi


$1 ;

if [ -n "$2" ]; then
$2 "$3" "$4" "$5" "$6"
fi

if [ -n "$7" ]; then
$7 "$8" "$9" "${10}" "${11}"
fi

if [ -n "${12}" ]; then
${12} "${13}" "${14}" "${15}" "${16}"
fi

if [ -n "${17}" ]; then
${17} "${18}" "${19}" "${20}" "${21}"
fi

if [ -n "${22}" ]; then
${22} "${23}" "${24}" "${25}" "${26}"
fi

if [ -n "${27}" ]; then
${27} "${28}" "${29}" "${30}" "${31}"
fi

if [ -n "${32}" ]; then
${32} "${33}" "${34}" "${35}" "${36}"
fi

if [ -n "${37}" ]; then
${37} "${38}" "${39}" "${40}" "${41}"
fi

if [ -n "${42}" ]; then
${42} "${43}" "${44}" "${45}" "${46}"
fi

if [ -n "${47}" ]; then
${47} "${48}" "${49}" "${50}" "${51}"
fi

if [ -n "${52}" ]; then
${52} "${53}" "${54}" "${55}" "${56}"
fi

if [ -n "${57}" ]; then
${57} "${58}" "${59}" "${60}" "${61}"
fi

if [ -n "${62}" ]; then
${62} "${63}" "${64}" "${65}" "${66}"
fi

if [ -n "${67}" ]; then
${67} "${68}" "${69}" "${70}" "${71}"
fi

if [ -n "${72}" ]; then
${72} "${73}" "${74}" "${75}" "${76}"
fi

if [ -n "${77}" ]; then
${77} "${78}" "${79}" "${80}" "${81}"
fi

buildkpoints $1
buildincar
buildpotcar
$VASP

array1=($(grep 'number of ions' OUTCAR))
value1=${array1[11]}

if [ "$ALGO" = RPAR ]; then

array2=($(grep 'HF-free energy' OUTCAR))
array3=($(grep 'HF+RPA corr. energy' OUTCAR))
array4=($(grep 'HF+E_corr' OUTCAR))
array5=($(grep 'exchange ACFDT corr.' OUTCAR))

value2=${array2[4]}
value3=${array2[5]}
value4=${array2[2]}
value5=${array2[4]}

value2=`echo $value2 / $value1 | bc -l`
value3=`echo $value3 / $value1 | bc -l`
value4=`echo $value4 / $value1 | bc -l`
value5=`echo $value5 / $value1 | bc -l`

VARIABLEFORCONVERGENCE=$value3

cd ..

if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " resulting HF-free energy per atom: $value2 eV"
  echo " resulting HF+RPA corr. energy per atom: $value3 eV"
  echo " resulting HF+E_corr(extrapolated) per atom: $value4 eV"
  echo " resulting exchange ACFDT corr. per atom: $value5 eV"
  echo " " >> $MAINDIR/output.txt
  echo " resulting HF-free energy per atom: $value2 eV" >> $MAINDIR/output.txt
  echo " resulting HF+RPA corr. energy per atom: $value3 eV" >> $MAINDIR/output.txt
  echo " resulting HF+E_corr(extrapolated) per atom: $value4 eV" >> $MAINDIR/output.txt
  echo " resulting exchange ACFDT corr. per atom: $value5 eV" >> $MAINDIR/output.txt
fi


else


array2=($(grep 'free  en' OUTCAR))
value2=${array2[4]}
value3=`echo $value2 / $value1 | bc -l`

if [ "$UPDATEVARIABLES" = true ]; then
name="FREE_ENERGY_$1"
eval $name=$value3
fi
VARIABLEFORCONVERGENCE=$value3

cd ..

if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " resulting free energy per atom: $value3 eV "
if [ "$UPDATEVARIABLES" = true ]; then
  echo " FREE_ENERGY_$1 has been updated accordingly "
fi
  echo " " >> $MAINDIR/output.txt
  echo " resulting free energy per atom: $value3 eV " >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " FREE_ENERGY_$1 has been updated accordingly " >> $MAINDIR/output.txt
fi
fi


fi

let secs=$SECONDS-$secs
let TOTALTIME=$TOTALTIME+$secs
hrs=$(( secs/3600 )); mins=$(( (secs-hrs*3600)/60 )); secs=$(( secs-hrs*3600-mins*60 ))
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ellapsed time: $hrs h $mins min $secs s"
echo " " >> $MAINDIR/output.txt
echo " ellapsed time: $hrs h $mins min $secs s" >> $MAINDIR/output.txt
fi

}

 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
adsorptionenergy () {

secsadsorptionenergy=$SECONDS

mkdir adsorptionenergy_${1}
cd adsorptionenergy_${1}
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ###########################################################################################"
echo " "
echo " Running now: adsorptionenergy $1 \"$2\"  ;   $GGA $POTCAR "
echo " " >> $MAINDIR/output.txt
echo " ###########################################################################################" >> $MAINDIR/output.txt
echo " " >> $MAINDIR/output.txt
echo " Running now: adsorptionenergy $1 \"$2\"  ;   $GGA $POTCAR " >> $MAINDIR/output.txt
fi

printoutputbackup=$PRINTOUTPUT

mkdir clean_surface
cd clean_surface

UPDATEVARIABLES=false
PRINTOUTPUT=false
relaxation $1
PRINTOUTPUT=true
UPDATEVARIABLES=true

cd relaxation_${1}

array2=($(grep 'free  en' OUTCAR | tail -1))
energy_clean_surface=${array2[4]}

cd ..

cd ..


mkdir surface_with_adsorbate
cd surface_with_adsorbate

mkdir part1
cd part1

name="SELECTIVE_DYNAMICS_DEPTH_$1"
backupseldyn=`echo ${!name}`

name="SELECTIVE_DYNAMICS_DEPTH_$1"
eval $name=0

backupediffg=$EDIFFG
EDIFFG=0
backupnsw=$NSW
NSW=16
backupnelm=$NELM
NELM=60

UPDATEVARIABLES=false
PRINTOUTPUT=false

relaxation $1 $2 "$3" "$4" "$5" "$6" $7 "$8" "$9" "${10}" "${11}" ${12} "${13}" "${14}" "${15}" "${16}" ${17} "${18}" "${19}" "${20}" "${21}" ${22} "${23}" "${24}" "${25}" "${26}" ${27} "${28}" "${29}" "${30}" "${31}" ${32} "${33}" "${34}" "${35}" "${36}" ${37} "${38}" "${39}" "${40}" "${41}" ${42} "${43}" "${44}" "${45}" "${46}" ${47} "${48}" "${49}" "${50}" "${51}" ${52} "${53}" "${54}" "${55}" "${56}" ${57} "${58}" "${59}" "${60}" "${61}" ${62} "${63}" "${64}" "${65}" "${66}" ${67} "${68}" "${69}" "${70}" "${71}" ${72} "${73}" "${74}" "${75}" "${76}" ${77} "${78}" "${79}" "${80}" "${81}"

PRINTOUTPUT=true
UPDATEVARIABLES=true

name="SELECTIVE_DYNAMICS_DEPTH_$1"
eval $name=$backupseldyn

EDIFFG=$backupediffg
NSW=$backupnsw
NELM=$backupnelm

cd ..

mkdir part2
cd part2

UPDATEVARIABLES=false
PRINTOUTPUT=false

buildincar
echo "#ionic relaxation:" >> INCAR
echo "IBRION = $IBRION" >> INCAR
echo "EDIFFG = $EDIFFG" >> INCAR
echo "NSW = $NSW" >> INCAR
echo "POTIM = $POTIM" >> INCAR
echo "ISIF = $ISIF" >> INCAR
echo " " >> INCAR

cp ../part1/relaxation_${1}/KPOINTS .
cp ../part1/relaxation_${1}/POTCAR .
cp ../part1/relaxation_${1}/minipotcar .
cp ../part1/relaxation_${1}/defaultshiftsandratios .
cp ../part1/relaxation_${1}/poscardescription .
cp ../part1/relaxation_${1}/CONTCAR .

linewuthint=$(sed -n "7p" CONTCAR)
sumatoms=0
summolatoms=0
for word in $linewuthint; do
let sumatoms=$sumatoms+$word
if [ "$word" -eq "1" ]; then
let summolatoms=$summolatoms+$word
fi
done

let fvwfwvw=$SUPERCELL_FACTOR\*$SUPERCELL_FACTOR\*$backupseldyn
let shdfbv=$fvwfwvw+1+$sumatoms+$summolatoms

tail -n $shdfbv CONTCAR | tr 'F' 'T' > temp_file2
head -n -$shdfbv CONTCAR > temp_file1
rm CONTCAR
cat temp_file1 >> POSCAR
cat temp_file2 >> POSCAR
rm temp_file1
rm temp_file2

$VASP

PRINTOUTPUT=true
UPDATEVARIABLES=true

array2=($(grep 'free  en' OUTCAR | tail -1))
energy_surface_with_adsorbate=${array2[4]}

cd ..

cd ..


adsorption_energy=`echo - $energy_surface_with_adsorbate + $energy_clean_surface | bc -l`

nummol=0
for i in $(seq 0 1 16) ; do

let j=$i\*5+3

name="${j}"
molecccc=`echo ${!name}`

if [ -n "$molecccc" ]; then

let nummol=$nummol+1

name="FREE_ENERGY_$molecccc"
energy_molecule=`echo ${!name}`

mkdir tpdir
cd tpdir
$molecccc
cd ..
rm -r tpdir

adsorption_energy=`echo $adsorption_energy + $energy_molecule \* $ATOMS_PER_SUBCELL | bc -l`

fi

done


adsorption_energy=`echo $adsorption_energy / $nummol | bc -l`


PRINTOUTPUT=$printoutputbackup

if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " resulting adsorption energy: $adsorption_energy eV "
  echo " " >> $MAINDIR/output.txt
  echo " resulting adsorption energy: $adsorption_energy eV " >> $MAINDIR/output.txt
fi


let secs=$SECONDS-$secsadsorptionenergy
let TOTALTIME=$TOTALTIME+$secs
hrs=$(( secs/3600 )); mins=$(( (secs-hrs*3600)/60 )); secs=$(( secs-hrs*3600-mins*60 ))
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ellapsed time: $hrs h $mins min $secs s"
echo " " >> $MAINDIR/output.txt
echo " ellapsed time: $hrs h $mins min $secs s" >> $MAINDIR/output.txt
fi


VARIABLEFORCONVERGENCE=$adsorption_energy


cd ..


}

 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
surfaceenergy () {

secssurfaceenergy=$SECONDS

mkdir surfaceenergy_${1}
cd surfaceenergy_${1}
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ###########################################################################################"
echo " "
echo " Running now: surfaceenergy $1 \"$2\"  ;   $GGA $POTCAR "
echo " " >> $MAINDIR/output.txt
echo " ###########################################################################################" >> $MAINDIR/output.txt
echo " " >> $MAINDIR/output.txt
echo " Running now: surfaceenergy $1 \"$2\"  ;   $GGA $POTCAR " >> $MAINDIR/output.txt
fi

printoutputbackup=$PRINTOUTPUT

mkdir surface
cd surface

UPDATEVARIABLES=false
PRINTOUTPUT=false
relaxation $1
PRINTOUTPUT=true
UPDATEVARIABLES=true

cd relaxation_${1}

array1=($(grep 'number of ions' OUTCAR))
N=${array1[11]}
array2=($(grep 'free  en' OUTCAR | tail -1))
value2=${array2[4]}
energy_slab=`echo $value2 / $N | bc -l`

cd ..

cd ..


mkdir bulk
cd bulk

name="VACUUM_SIZE_$1"
backupvacuum=`echo ${!name}`

name="NUMBER_OF_LAYERS_$1"
backuplayers=`echo ${!name}`

let dif=$backuplayers%$ATOMS_PER_SUBCELL
let newnumberoflayers=$backuplayers-$dif

name="VACUUM_SIZE_$1"
eval $name=0

name="NUMBER_OF_LAYERS_$1"
eval $name=$newnumberoflayers

UPDATEVARIABLES=false
PRINTOUTPUT=false
electronicmin $1
PRINTOUTPUT=true
UPDATEVARIABLES=true

cd electronicmin_${1}

array1=($(grep 'number of ions' OUTCAR))
N=${array1[11]}
array2=($(grep 'free  en' OUTCAR | tail -1))
value2=${array2[4]}
energy_bulk=`echo $value2 / $N | bc -l`

cd ..

name="VACUUM_SIZE_$1"
eval $name=$backupvacuum

name="NUMBER_OF_LAYERS_$1"
eval $name=$backuplayers

cd ..


surface_energy_per_surface_atom=`echo $energy_slab \* $backuplayers \* $NUMBER_OF_ATOMS_PER_LAYER_PER_CELL \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR - $energy_bulk \* $backuplayers \* $NUMBER_OF_ATOMS_PER_LAYER_PER_CELL \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
denom=`echo 2 \* $NUMBER_OF_ATOMS_PER_LAYER_PER_CELL \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
surface_energy_per_surface_atom=`echo $surface_energy_per_surface_atom / $denom | bc -l`


cd surface
cd relaxation_${1}

lattice_vectors=()
count=0
while read line; do
if [ $count -ge 2 ] && [ $count -le 4 ]; then
lattice_vectors+=("$line")
fi
count=$((count + 1))
done < CONTCAR

cd ..
cd ..

lattice_vectors=( $(echo ${lattice_vectors[@]}) )

normal_vector_x=$(echo "${lattice_vectors[1]} * ${lattice_vectors[5]} - ${lattice_vectors[2]} * ${lattice_vectors[4]}" | bc -l)
normal_vector_y=$(echo "${lattice_vectors[2]} * ${lattice_vectors[3]} - ${lattice_vectors[0]} * ${lattice_vectors[5]}" | bc -l)
normal_vector_z=$(echo "${lattice_vectors[0]} * ${lattice_vectors[4]} - ${lattice_vectors[1]} * ${lattice_vectors[3]}" | bc -l)

area=$(echo "sqrt(${normal_vector_x}^2 + ${normal_vector_y}^2 + ${normal_vector_z}^2)" | bc -l)

surface_energy_per_surface_area=`echo $energy_slab \* $backuplayers \* $NUMBER_OF_ATOMS_PER_LAYER_PER_CELL \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR - $energy_bulk \* $backuplayers \* $NUMBER_OF_ATOMS_PER_LAYER_PER_CELL \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`
denom=`echo 2 \* $area | bc -l`
surface_energy_per_surface_area=`echo $surface_energy_per_surface_area / $denom | bc -l`



PRINTOUTPUT=$printoutputbackup

if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " resulting surface energy per surface atom: $surface_energy_per_surface_atom eV "
  echo " resulting surface energy per surface area: $surface_energy_per_surface_area eV / Angstrom^2 "
  echo " energy of relaxed surface slab: $energy_slab eV "
  echo " energy of surface slab without vacuum (# of layers addapted): $energy_bulk eV "
  echo " " >> $MAINDIR/output.txt
  echo " resulting surface energy per surface atom: $surface_energy_per_surface_atom eV " >> $MAINDIR/output.txt
  echo " resulting surface energy per surface area: $surface_energy_per_surface_area eV / Angstrom^2 " >> $MAINDIR/output.txt
  echo " energy of relaxed surface slab: $energy_slab eV " >> $MAINDIR/output.txt
  echo " energy of surface slab without vacuum (# of layers addapted): $energy_bulk eV " >> $MAINDIR/output.txt
fi


let secs=$SECONDS-$secssurfaceenergy
let TOTALTIME=$TOTALTIME+$secs
hrs=$(( secs/3600 )); mins=$(( (secs-hrs*3600)/60 )); secs=$(( secs-hrs*3600-mins*60 ))
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ellapsed time: $hrs h $mins min $secs s"
echo " " >> $MAINDIR/output.txt
echo " ellapsed time: $hrs h $mins min $secs s" >> $MAINDIR/output.txt
fi


VARIABLEFORCONVERGENCE=$surface_energy_per_surface_atom

cd ..

}
 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
vacancyformationenergy () {

secsvacancyformationenergy=$SECONDS

mkdir vacancyformationenergy_${1}
cd vacancyformationenergy_${1}
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ###########################################################################################"
echo " "
echo " Running now: vacancyformationenergy $1 \"$2\"  ;   $GGA $POTCAR "
echo " " >> $MAINDIR/output.txt
echo " ###########################################################################################" >> $MAINDIR/output.txt
echo " " >> $MAINDIR/output.txt
echo " Running now: vacancyformationenergy $1 \"$2\"  ;   $GGA $POTCAR " >> $MAINDIR/output.txt
fi

UPDATEVARIABLES=false
PRINTOUTPUT=false
relaxation $1 $2 "$3" "$4" "$5" "$6" $7 "$8" "$9" "${10}" "${11}" ${12} "${13}" "${14}" "${15}" "${16}" ${17} "${18}" "${19}" "${20}" "${21}" ${22} "${23}" "${24}" "${25}" "${26}" ${27} "${28}" "${29}" "${30}" "${31}" ${32} "${33}" "${34}" "${35}" "${36}" ${37} "${38}" "${39}" "${40}" "${41}" ${42} "${43}" "${44}" "${45}" "${46}" ${47} "${48}" "${49}" "${50}" "${51}" ${52} "${53}" "${54}" "${55}" "${56}" ${57} "${58}" "${59}" "${60}" "${61}" ${62} "${63}" "${64}" "${65}" "${66}" ${67} "${68}" "${69}" "${70}" "${71}" ${72} "${73}" "${74}" "${75}" "${76}" ${77} "${78}" "${79}" "${80}" "${81}" 
PRINTOUTPUT=true
UPDATEVARIABLES=true

cd relaxation_${1}

array1=($(grep 'number of ions' OUTCAR))
N=${array1[11]}
array2=($(grep 'free  en' OUTCAR | tail -1))
value2=${array2[4]}
energy_defect=`echo $value2 / $N | bc -l`

cd temp

arraylatticeconst=($(grep 'ALAT' OUTCAR))
latticeconstt=${arraylatticeconst[2]}
latticeconst=`echo $latticeconstt / $SUPERCELL_FACTOR | bc -l`

if [ "$LATTICE_SYSTEM" = cubic ]; then
volume_defect=`echo $latticeconst \* $latticeconst \* $latticeconst / $ATOMS_PER_CONVENTIONAL_CELL | bc -l`
volume_defect_gfcytc=$volume_defect
volume_defect=`echo $volume_defect \* $ATOMS_PER_SUBCELL \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR / $N | bc -l`
fi

if [ "$LATTICE_SYSTEM" = hexagonal ]; then
arraycaratio=($(grep 'C/A-ratio' OUTCAR))
valuecaratio=${arraycaratio[2]}
volume_defect=`echo $latticeconst \* $latticeconst \* $latticeconst \* $valuecaratio \* 0.86602540378443864676372317075294 / $ATOMS_PER_CONVENTIONAL_CELL | bc -l`
volume_defect_gfcytc=$volume_defect
volume_defect=`echo $volume_defect \* $ATOMS_PER_SUBCELL \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR / $N | bc -l`
fi

if [ "$LATTICE_SYSTEM" = tetragonal ]; then
arraycaratio=($(grep 'C/A-ratio' OUTCAR))
valuecaratio=${arraycaratio[2]}
volume_defect=`echo $latticeconst \* $latticeconst \* $latticeconst \* $valuecaratio / $ATOMS_PER_CONVENTIONAL_CELL | bc -l`
volume_defect_gfcytc=$volume_defect
volume_defect=`echo $volume_defect \* $ATOMS_PER_SUBCELL \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR / $N | bc -l`
fi


cd ..

name="FREE_ENERGY_$1"
energy_perfect=`echo ${!name}`
name="VOLUME_$1"
volume_perfect=`echo ${!name}`

#if [ "$1" = contcar ]; then
#array=($(awk '{ if (NR==1) print $0 }' POSCAR))
#bfrv=${array[0]}
#name="FREE_ENERGY_$bfrv"
#energy_perfect=`echo ${!name}`
#name="VOLUME_$bfrv"
#volume_perfect=`echo ${!name}`
#fi

cd ..

energy_formation=`echo $energy_defect \* $N - $energy_perfect \* $N | bc -l`
volume_formation=`echo $volume_defect \* $N - $volume_perfect \* $N | bc -l`
ratio_energy=`echo $energy_formation / $energy_perfect | bc -l`
ratio_volume=`echo $volume_formation / $volume_perfect | bc -l`


if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " free energy per atom of structure with defect: $energy_defect eV"
  echo " resulting vacancy formation energy: $energy_formation eV "
  echo " resulting vacancy formation volume: $volume_formation Angstrom^3 "
  echo " vacancy formation energy / bulk energy per atom: $ratio_energy "
  echo " vacancy formation volume / bulk volume per atom: $ratio_volume "
  echo " VOLUME_$1 for structure with defect: $volume_defect_gfcytc "
  echo " " >> $MAINDIR/output.txt
  echo " free energy per atom of structure with defect: $energy_defect eV" >> $MAINDIR/output.txt
  echo " resulting vacancy formation energy: $energy_formation eV " >> $MAINDIR/output.txt
  echo " resulting vacancy formation volume: $volume_formation Angstrom^3 " >> $MAINDIR/output.txt
  echo " vacancy formation energy / bulk energy per atom: $ratio_energy " >> $MAINDIR/output.txt
  echo " vacancy formation volume / bulk volume per atom: $ratio_volume " >> $MAINDIR/output.txt
  echo " VOLUME_$1 for structure with defect: $volume_defect_gfcytc " >> $MAINDIR/output.txt
fi


let secs=$SECONDS-$secsvacancyformationenergy
let TOTALTIME=$TOTALTIME+$secs
hrs=$(( secs/3600 )); mins=$(( (secs-hrs*3600)/60 )); secs=$(( secs-hrs*3600-mins*60 ))
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ellapsed time: $hrs h $mins min $secs s"
echo " " >> $MAINDIR/output.txt
echo " ellapsed time: $hrs h $mins min $secs s" >> $MAINDIR/output.txt
fi


VARIABLEFORCONVERGENCE=$energy_formation


cd ..

}

 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
elasticmoduli () {

secs=$SECONDS

if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ###########################################################################################"
echo " "
echo " Running now: elasticmoduli $1  ;   $GGA $POTCAR "
echo " " >> $MAINDIR/output.txt
echo " ###########################################################################################" >> $MAINDIR/output.txt
echo " " >> $MAINDIR/output.txt
echo " Running now: elasticmoduli $1  ;   $GGA $POTCAR " >> $MAINDIR/output.txt
fi

mkdir elasticmoduli_${1}
cd elasticmoduli_${1}
$1
buildkpoints $1
buildincar
echo "#elastic mouduli calculation:" >> INCAR
#echo "LPHON_DISPERSION = .TRUE." >> INCAR
echo "IBRION = 6" >> INCAR
echo "NSW = 1" >> INCAR
echo "POTIM = 0.015" >> INCAR
echo "ISIF = 3" >> INCAR
echo " " >> INCAR
buildpotcar
$VASP

if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " total elastic moduli (kBar):"
  sed -n '/TOTAL ELASTIC MODULI (kBar)/{ n; p }' OUTCAR
  sed -n '/TOTAL ELASTIC MODULI (kBar)/{ n; n; n; p }' OUTCAR
  sed -n '/TOTAL ELASTIC MODULI (kBar)/{ n; n; n; n; p }' OUTCAR
  sed -n '/TOTAL ELASTIC MODULI (kBar)/{ n; n; n; n; n; p }' OUTCAR
  sed -n '/TOTAL ELASTIC MODULI (kBar)/{ n; n; n; n; n; n; p }' OUTCAR
  sed -n '/TOTAL ELASTIC MODULI (kBar)/{ n; n; n; n; n; n; n; p }' OUTCAR
  sed -n '/TOTAL ELASTIC MODULI (kBar)/{ n; n; n; n; n; n; n; n; p }' OUTCAR
  echo " " >> $MAINDIR/output.txt
  echo " total elastic moduli (kBar):" >> $MAINDIR/output.txt
  sed -n '/TOTAL ELASTIC MODULI (kBar)/{ n; p }' OUTCAR >> $MAINDIR/output.txt
  sed -n '/TOTAL ELASTIC MODULI (kBar)/{ n; n; n; p }' OUTCAR >> $MAINDIR/output.txt
  sed -n '/TOTAL ELASTIC MODULI (kBar)/{ n; n; n; n; p }' OUTCAR >> $MAINDIR/output.txt
  sed -n '/TOTAL ELASTIC MODULI (kBar)/{ n; n; n; n; n; p }' OUTCAR >> $MAINDIR/output.txt
  sed -n '/TOTAL ELASTIC MODULI (kBar)/{ n; n; n; n; n; n; p }' OUTCAR >> $MAINDIR/output.txt
  sed -n '/TOTAL ELASTIC MODULI (kBar)/{ n; n; n; n; n; n; n; p }' OUTCAR >> $MAINDIR/output.txt
  sed -n '/TOTAL ELASTIC MODULI (kBar)/{ n; n; n; n; n; n; n; n; p }' OUTCAR >> $MAINDIR/output.txt
fi

array1=($(sed -n '/TOTAL ELASTIC MODULI (kBar)/{ n; n; n; p }' OUTCAR))
array2=($(sed -n '/TOTAL ELASTIC MODULI (kBar)/{ n; n; n; n; p }' OUTCAR))
array3=($(sed -n '/TOTAL ELASTIC MODULI (kBar)/{ n; n; n; n; n; p }' OUTCAR))
const11=${array1[1]}
const12=${array2[1]}
const13=${array3[1]}
const33=${array3[3]}
if [ "$LATTICE_SYSTEM" = cubic ]; then
bulkmodulus=`echo $const11 \* 0.3333333333333333 \* 0.1 + 2 \* $const12 \* 0.3333333333333333 \* 0.1   | bc -l`
fi
if [ "$LATTICE_SYSTEM" = hexagonal ]; then
bulkmodulus=`echo 2 \* $const11 \* 0.1111111111111111 \* 0.1 + 2 \* $const12 \* 0.1111111111111111 \* 0.1 + 4 \* $const13 \* 0.1111111111111111 \* 0.1 + $const33 \* 0.1111111111111111 \* 0.1   | bc -l`
fi
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " this results in a bulk modulus of " $bulkmodulus " GPa "
echo " " >> $MAINDIR/output.txt
echo " this results in a bulk modulus of " $bulkmodulus " GPa " >> $MAINDIR/output.txt
fi


let secs=$SECONDS-$secs
let TOTALTIME=$TOTALTIME+$secs
hrs=$(( secs/3600 )); mins=$(( (secs-hrs*3600)/60 )); secs=$(( secs-hrs*3600-mins*60 ))
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ellapsed time: $hrs h $mins min $secs s"
echo " " >> $MAINDIR/output.txt
echo " ellapsed time: $hrs h $mins min $secs s" >> $MAINDIR/output.txt
fi


cd ..

}

 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
energyvolumecurves () {

secsenergyvolumecurves=$SECONDS

if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ###########################################################################################"
echo " "
echo " Running now: energyvolumecurves \"$1\" $2 $3 $4  ;   $GGA $POTCAR "
echo " " >> $MAINDIR/output.txt
echo " ###########################################################################################" >> $MAINDIR/output.txt
echo " " >> $MAINDIR/output.txt
echo " Running now: energyvolumecurves \"$1\" $2 $3 $4  ;   $GGA $POTCAR " >> $MAINDIR/output.txt
fi

structure=()
energy=()
x=-1
for i in $1; do
let x=x+1
name="FREE_ENERGY_$i"
ener=`echo ${!name}`
structure[$x]=$i
energy[$x]=$ener
done
echo ${structure[@]}
echo ${energy[@]}
for ((i = 0; i<5; i++)) ; do
for ((j = 0; j<5-i-1; j++)) ; do
if [ $(echo "${energy[j]} > ${energy[$((j+1))]}" | bc) -eq 1 ]; then
temp=${energy[j]}
energy[$j]=${energy[$((j+1))]}
energy[$((j+1))]=$temp
tempstr=${structure[j]}
structure[$j]=${structure[$((j+1))]}
structure[$((j+1))]=$tempstr
fi
done
done
echo ${structure[@]}
echo ${energy[@]}

if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " phase stability table (in order):"
echo "   phase       free energy per atom (eV)      energy difference to the most stable phase (eV) "
N=${#structure[@]}
let NN=N-1
fffffffff=${energy[0]}
for i in $(seq 0 1 $NN) ; do
diff=`echo ${energy[$i]} - $fffffffff   | bc -l`
#fffffffff=${energy[$i]}
echo "   " ${structure[$i]} "      "  ${energy[$i]}  "      "   $diff
done
echo " " >> $MAINDIR/output.txt
echo " phase stability table (in order):" >> $MAINDIR/output.txt
echo "   phase       free energy per atom (eV)      energy difference to the most stable phase (eV) " >> $MAINDIR/output.txt
N=${#structure[@]}
let NN=N-1
fffffffff=${energy[0]}
for i in $(seq 0 1 $NN) ; do
diff=`echo ${energy[$i]} - $fffffffff   | bc -l`
fffffffff=${energy[$i]}
echo "   " ${structure[$i]} "      "  ${energy[$i]}  "      "   $diff >> $MAINDIR/output.txt
done
fi

mkdir energyvolumecurves
cd energyvolumecurves
mkdir pldirs
for i in $1; do
cd pldirs
mkdir pldir_${i}
cd ..
mkdir $i
cd $i
name="VOLUME_$i"
backupvvvol=`echo ${!name}`
name="FREE_ENERGY_$i"
backupeeen=`echo ${!name}`
for j in $(seq 1 1 $2); do
mkdir $j
cd $j
jnlkfvjk=`echo $j - 0.5 - $2 / 2 | bc -l`
afragrgw=`echo -0.5 + $2 / 2 | bc -l`
fnjfvkfn=`echo $jnlkfvjk \* $3 / $afragrgw | bc -l`
vvol=`echo $backupvvvol + $fnjfvkfn | bc -l`
name="VOLUME_$i"
eval $name=$vvol
PRINTOUTPUT=false
$4 $i
PRINTOUTPUT=true
cd ..
name="FREE_ENERGY_$i"
enerryy=`echo ${!name}`
echo $vvol " Angstrom^3 per atom      " $enerryy " eV "  >> energies.dat

cd ..
cd pldirs
cd pldir_${i}
echo $vvol "  " $enerryy  >> data.dat
cd ..
cd ..
cd $i

done
name="VOLUME_$i"
eval $name=$backupvvvol
name="FREE_ENERGY_$i"
eval $name=$backupeeen
cd ..
done



#cd pldirs
#for i in $1; do
#cd pldir_${i}
#eennee2=0
#vvooll2=0
#for j in $(seq 1 1 $2); do
#akjrnvkjnv=($(sed -n "$j"'p' < data.dat))
#eennee1=${akjrnvkjnv[1]}
#vvooll1=${akjrnvkjnv[0]}
#delene=`echo $eennee2 - $eennee1 | bc -l`
#delvol=`echo $vvooll2 - $vvooll1 | bc -l`
#steig=`echo $delene / $delvol | bc -l`
#hohe=`echo $eennee1 - $steig \* $vvooll1 | bc -l`
#echo $vvooll1 "  " $eennee1 "  " $steig  "  " $hohe  >> critpress.dat
#eennee2=$eennee1
#vvooll2=$vvooll1
#done
#cd ..
#done
#cd ..

cd pldirs
for i in $1; do
cd pldir_${i}
for j in $(seq 1 1 $2); do
akjrnvkjnv=($(sed -n "$j"'p' < data.dat))
eennee=${akjrnvkjnv[1]}
vvooll=${akjrnvkjnv[0]}
cd ..
cd ..
cd $i
cd $j
cd ${4}_${i}
pprreea=($(grep 'external pressure' OUTCAR | tail -1))
pprree=${pprreea[3]}
pprreeevan=`echo $pprree \* 0.0006242 | bc -l`
cd ..
cd ..
cd ..
cd pldirs
cd pldir_${i}
hohe=`echo $eennee + $pprreeevan \* $vvooll | bc -l`
echo $pprreeevan  "  " $hohe  >> critpress.dat
done
cd ..
done
cd ..




cat > gnup_energyvolumecurves_${GGA} << EOF
set title "enenergy-volume curves ;  GGA = $GGA, POTCAR = $POTCAR"
set encoding iso_8859_1
set xlabel "Volume per atom ({\305}^3)"
set ylabel "Total free energy per atom (eV)"
p 'fcc/energies.dat' u 1:5 w l title 'fcc', 'bcc/energies.dat' u 1:5 w l title 'bcc', 'sc/energies.dat' u 1:5 w l title 'sc', 'diamond/energies.dat' u 1:5 w l title 'diamond', 'hcp/energies.dat' u 1:5 w l title 'hcp', 'fcc_c/energies.dat' u 1:5 w l title 'fcc_c', 'bcc_c/energies.dat' u 1:5 w l title 'bcc_c', 'diamond_c/energies.dat' u 1:5 w l title 'diamond_c', 'nacl/energies.dat' u 1:5 w l title 'nacl', 'cscl/energies.dat' u 1:5 w l title 'cscl', 'zincblende/energies.dat' u 1:5 w l title 'zincblende', 'wurtzite/energies.dat' u 1:5 w l title 'wurtzite', 'nacl_c/energies.dat' u 1:5 w l title 'nacl_c'
set term png
set output "energyvolumecurves_${GGA}.png"
p 'fcc/energies.dat' u 1:5 w l title 'fcc', 'bcc/energies.dat' u 1:5 w l title 'bcc', 'sc/energies.dat' u 1:5 w l title 'sc', 'diamond/energies.dat' u 1:5 w l title 'diamond', 'hcp/energies.dat' u 1:5 w l title 'hcp', 'fcc_c/energies.dat' u 1:5 w l title 'fcc_c', 'bcc_c/energies.dat' u 1:5 w l title 'bcc_c', 'diamond_c/energies.dat' u 1:5 w l title 'diamond_c', 'nacl/energies.dat' u 1:5 w l title 'nacl', 'cscl/energies.dat' u 1:5 w l title 'cscl', 'zincblende/energies.dat' u 1:5 w l title 'zincblende', 'wurtzite/energies.dat' u 1:5 w l title 'wurtzite', 'nacl_c/energies.dat' u 1:5 w l title 'nacl_c'
EOF
if [ -n "$GNUPLOT" ]; then
$GNUPLOT gnup_energyvolumecurves_${GGA}
fi


cd pldirs
plotxydata++ data.dat
cd ..


let secs=$SECONDS-$secsenergyvolumecurves
let TOTALTIME=$TOTALTIME+$secs
hrs=$(( secs/3600 )); mins=$(( (secs-hrs*3600)/60 )); secs=$(( secs-hrs*3600-mins*60 ))
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ellapsed time: $hrs h $mins min $secs s"
echo " " >> $MAINDIR/output.txt
echo " ellapsed time: $hrs h $mins min $secs s" >> $MAINDIR/output.txt
fi

cd ..

}
 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
fitmurnaghan () {

secsfitmurnaghan=$SECONDS

if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ###########################################################################################"
echo " "
echo " Running now: fitmurnaghan $1 \"$2\"  ;   $GGA $POTCAR "
echo " " >> $MAINDIR/output.txt
echo " ###########################################################################################" >> $MAINDIR/output.txt
echo " " >> $MAINDIR/output.txt
echo " Running now: fitmurnaghan $1 \"$2\"  ;   $GGA $POTCAR " >> $MAINDIR/output.txt
fi

mkdir fitmurnaghan_${1}
cd fitmurnaghan_${1}
name="FREE_ENERGY_$1"
backupen=`echo ${!name}`
name="VOLUME_$1"
backupvol=`echo ${!name}`
for j in $(seq 1 1 11); do
mkdir $j
cd $j
vvol=`echo $backupvol + $j \* 0.0075 \* $backupvol - 6 \* 0.0075 \* $backupvol | bc -l`
name="VOLUME_$1"
eval $name=$vvol
isifbackup=$ISIF
ISIF=4
PRINTOUTPUT=false
###$2 $1
relaxation $1 $2 "$3" "$4" "$5" "$6" $7 "$8" "$9" "${10}" "${11}" ${12} "${13}" "${14}" "${15}" "${16}" ${17} "${18}" "${19}" "${20}" "${21}" ${22} "${23}" "${24}" "${25}" "${26}" ${27} "${28}" "${29}" "${30}" "${31}" ${32} "${33}" "${34}" "${35}" "${36}" ${37} "${38}" "${39}" "${40}" "${41}" ${42} "${43}" "${44}" "${45}" "${46}" ${47} "${48}" "${49}" "${50}" "${51}" ${52} "${53}" "${54}" "${55}" "${56}" ${57} "${58}" "${59}" "${60}" "${61}" ${62} "${63}" "${64}" "${65}" "${66}" ${67} "${68}" "${69}" "${70}" "${71}" ${72} "${73}" "${74}" "${75}" "${76}" ${77} "${78}" "${79}" "${80}" "${81}"
PRINTOUTPUT=true
cd ..
name="FREE_ENERGY_$1"
viuyiuyguy=`echo ${!name}`
echo $vvol " Angstrom^3 per atom      " $viuyiuyguy " eV "  >> energies.dat
done
#name="VOLUME_$1"
#eval $name=$backupvol
#name="FREE_ENERGY_$1"
#iusiunbb=`echo ${!name}`

cat > fitmurnaghan_gnup_${1}_${GGA} << EOF
h = $backupen
b = 1.25
v = $backupvol
d = 3.5
e(x) = h + (b*x/d)*(((v/x)**d)/(d-1)+1) - b*v/(d-1)
fit e(x) 'energies.dat' u 1:5 via h, b, v, d

set title "$1 Murnaghan EOS fit ;  GGA = $GGA, POTCAR = $POTCAR"
set encoding iso_8859_1
set xlabel "Volume per atom ({\305}^3)"
set ylabel "Total free energy per atom (eV)"
set term png
set output "fitmurnaghan_${1}_${GGA}.png"
p 'energies.dat' u 1:5 w p title 'data points', e(x) title 'fitted EOS'
EOF
if [ -n "$GNUPLOT" ]; then
$GNUPLOT fitmurnaghan_gnup_${1}_${GGA}
fi

name="FREE_ENERGY_$i"
eval $name=$backupen
name="VOLUME_$i"
eval $name=$backupvol
array2=($(grep 'h         ' fit.log | tail -2 | head -1))
value22=${array2[2]}
if [ "$UPDATEVARIABLES" = true ]; then
name="FREE_ENERGY_$1"
eval $name=$value22
fi
array2=($(grep 'b         ' fit.log | tail -2 | head -1))
value23=${array2[2]}
if [ "$UPDATEVARIABLES" = true ]; then
name="BULK_MODULUS_$1"
eval $name=$value23
fi
jveignjveijvn=`echo $value23 \* 160.2 | bc -l`
array2=($(grep 'v         ' fit.log | tail -2 | head -1))
value24=${array2[2]}
if [ "$UPDATEVARIABLES" = true ]; then
name="VOLUME_$1"
eval $name=$value24
fi
array2=($(grep 'd         ' fit.log | tail -2 | head -1))
bulkmodulusderrivative=${array2[2]}

ISIF=$isifbackup

if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " Murnaghan equation of state has been fitted. Resulting parameters:"
  echo " volume per atom = " $value24 " Anstrom^3 per atom "
  echo " energy per atom = " $value22 " eV "
  echo " bulk modulus = " $value23 " eV/Angstrom^3 = " $jveignjveijvn " GPa "
  echo " derrivative of bulk modulus wrt pressure = " $bulkmodulusderrivative " eV/Angstrom^3 "
if [ "$UPDATEVARIABLES" = true ]; then
  echo " VOLUME_$1, FREE_ENERGY_$1, and BULK_MODULUS_$1 have been updated accordingly "
fi
  echo " " >> $MAINDIR/output.txt
  echo " Murnaghan equation of state has been fitted. Resulting parameters:" >> $MAINDIR/output.txt
  echo " volume per atom = " $value24 " Anstrom^3 per atom " >> $MAINDIR/output.txt
  echo " energy per atom = " $value22 " eV " >> $MAINDIR/output.txt
  echo " bulk modulus = " $value23 " eV/Angstrom^3 = " $jveignjveijvn " GPa " >> $MAINDIR/output.txt
  echo " derrivative of bulk modulus wrt pressure = " $bulkmodulusderrivative " eV/Angstrom^3 " >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " VOLUME_$1, FREE_ENERGY_$1, and BULK_MODULUS_$1 have been updated accordingly " >> $MAINDIR/output.txt
fi
fi

let secs=$SECONDS-$secsfitmurnaghan
let TOTALTIME=$TOTALTIME+$secs
hrs=$(( secs/3600 )); mins=$(( (secs-hrs*3600)/60 )); secs=$(( secs-hrs*3600-mins*60 ))
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ellapsed time: $hrs h $mins min $secs s"
echo " " >> $MAINDIR/output.txt
echo " ellapsed time: $hrs h $mins min $secs s" >> $MAINDIR/output.txt
fi

cd ..

}

 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
moleculardynamics () {                       # $2 is for addvacancy ... / addadsorbant ...

secs=$SECONDS

mkdir moleculardynamics_${1}
cd moleculardynamics_${1}

if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ###########################################################################################"
echo " "
echo " Running now: moleculardynamics $1 $2  ;   $GGA $POTCAR "
echo " " >> $MAINDIR/output.txt
echo " ###########################################################################################" >> $MAINDIR/output.txt
echo " " >> $MAINDIR/output.txt
echo " Running now: moleculardynamics $1 $2  ;   $GGA $POTCAR " >> $MAINDIR/output.txt
fi

$1 ;

if [ -n "$2" ]; then
$2 "$3" "$4" "$5" "$6"
fi

if [ -n "$7" ]; then
$7 "$8" "$9" "${10}" "${11}"
fi

if [ -n "${12}" ]; then
${12} "${13}" "${14}" "${15}" "${16}"
fi

if [ -n "${17}" ]; then
${17} "${18}" "${19}" "${20}" "${21}"
fi

if [ -n "${22}" ]; then
${22} "${23}" "${24}" "${25}" "${26}"
fi

if [ -n "${27}" ]; then
${27} "${28}" "${29}" "${30}" "${31}"
fi

if [ -n "${32}" ]; then
${32} "${33}" "${34}" "${35}" "${36}"
fi

if [ -n "${37}" ]; then
${37} "${38}" "${39}" "${40}" "${41}"
fi

if [ -n "${42}" ]; then
${42} "${43}" "${44}" "${45}" "${46}"
fi

if [ -n "${47}" ]; then
${47} "${48}" "${49}" "${50}" "${51}"
fi

if [ -n "${52}" ]; then
${52} "${53}" "${54}" "${55}" "${56}"
fi

if [ -n "${57}" ]; then
${57} "${58}" "${59}" "${60}" "${61}"
fi

if [ -n "${62}" ]; then
${62} "${63}" "${64}" "${65}" "${66}"
fi

if [ -n "${67}" ]; then
${67} "${68}" "${69}" "${70}" "${71}"
fi

if [ -n "${72}" ]; then
${72} "${73}" "${74}" "${75}" "${76}"
fi

if [ -n "${77}" ]; then
${77} "${78}" "${79}" "${80}" "${81}"
fi

buildkpoints $1
isymbackup=$ISYM
nwritebackup=$NWRITE
ISYM=0
NWRITE=1
buildincar
ISYM=$isymbackup
NWRITE=$nwritebackup
echo "#molecular dynamics:" >> INCAR
echo "IBRION = 0" >> INCAR
echo "TEBEG = $TEBEG" >> INCAR
echo "TEEND = $TEEND" >> INCAR
echo "POTIM = $POTIM" >> INCAR
echo "NSW = $NSW" >> INCAR
echo " " >> INCAR
echo "#thermostat & ensembles:" >> INCAR
echo "ISIF = $ISIF" >> INCAR
echo "MDALGO = $MDALGO" >> INCAR
echo "LANGEVIN_GAMMA = $LANGEVIN_GAMMA" >> INCAR
echo "LANGEVIN_GAMMA_L = $LANGEVIN_GAMMA_L" >> INCAR
echo " " >> INCAR
echo "#machine learned force fields:" >> INCAR
echo "ML_LMLFF = $ML_LMLFF" >> INCAR
echo "ML_ISTART = $ML_ISTART" >> INCAR
echo "ML_RCUT1 = $ML_RCUT1" >> INCAR
echo "ML_RCUT2 = $ML_RCUT2" >> INCAR
echo " " >> INCAR
buildpotcar
$VASP



let secs=$SECONDS-$secs
let TOTALTIME=$TOTALTIME+$secs
hrs=$(( secs/3600 )); mins=$(( (secs-hrs*3600)/60 )); secs=$(( secs-hrs*3600-mins*60 ))
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ellapsed time: $hrs h $mins min $secs s"
echo " " >> $MAINDIR/output.txt
echo " ellapsed time: $hrs h $mins min $secs s" >> $MAINDIR/output.txt
fi

cd ..

}
 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
phonondispersion () {

secs=$SECONDS

if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ###########################################################################################"
echo " "
echo " Running now: phonondispersion $1 \"$2\"  ;   $GGA $POTCAR "
echo " " >> $MAINDIR/output.txt
echo " ###########################################################################################" >> $MAINDIR/output.txt
echo " " >> $MAINDIR/output.txt
echo " Running now: phonondispersion $1 \"$2\"  ;   $GGA $POTCAR " >> $MAINDIR/output.txt
fi

mkdir phonondispersion_${1}
cd phonondispersion_${1}
$1
buildkpoints $1
buildqpoints $1 $2
buildincar
echo "#phonon calculation:" >> INCAR
echo "LPHON_DISPERSION = .TRUE." >> INCAR
echo "IBRION = 6" >> INCAR
echo "NSW = 1" >> INCAR
echo "POTIM = 0.015" >> INCAR
echo "ISIF = 2" >> INCAR
echo " " >> INCAR
buildpotcar
$VASP

NATOMS=`awk '/ions per / {print $5}' OUTCAR`
NCELL=`grep -m1 "primitive cells build up your supercell" OUTCAR | awk '{print $1}'`
if [ -z $NCELL ]
then
NCELL=1
fi
NBANDS=$((NATOMS/NCELL*3))
#NBANDS=6
NQ=`grep -A1 "q-point" OUTCAR |tail -1| awk '{print $1}'`
echo found $NBANDS bands and $NQ frequencies
#cut OUTCAR down
awk '/Phonons/,0' OUTCAR > temp.dat
for q_cur in `seq 0 $(($NQ-1))`
do
for b in `seq 0 $(($NBANDS-1))`;
do
line_q=$(($q_cur*($NBANDS+5)+3))
line_f=$(($line_q+$b+3))
#echo $line_q
q=$(awk -v n=$line_q '/Phonons/ { for (i=1; i<=n ; i++) getline; print $5} ' temp.dat)
f[$b]=$(awk -v n=$line_f '/Phonons/ { for (i=1; i<=n ; i++) getline; print $2} ' temp.dat)
done
echo $q ${f[*]} >> phonons.dat
done

cp phonons.dat phonons_${1}_${GGA}.dat
cat > phonondispersion_gnup_${1}_${GGA} << EOF
set title "$1 phonon dispersion relation ;  GGA = $GGA, POTCAR = $POTCAR"
set xlabel "$path"
set ylabel "Frequency (THz)"
unset key
set term png
set output "phonondispersion_${1}_${GGA}.png"
p 'phonons_${1}_${GGA}.dat' u 1:2 w l, 'phonons_${1}_${GGA}.dat' u 1:3 w l, 'phonons_${1}_${GGA}.dat' u 1:4 w l, 'phonons_${1}_${GGA}.dat' u 1:5 w l, 'phonons_${1}_${GGA}.dat' u 1:6 w l, 'phonons_${1}_${GGA}.dat' u 1:7 w l
EOF
if [ -n "$GNUPLOT" ]; then
$GNUPLOT phonondispersion_gnup_${1}_${GGA}
fi

echo " "
echo " path: $path"
echo " " >> $MAINDIR/output.txt
echo " path: $path" >> $MAINDIR/output.txt

plotxydata+ phonons.dat


let secs=$SECONDS-$secs
let TOTALTIME=$TOTALTIME+$secs
hrs=$(( secs/3600 )); mins=$(( (secs-hrs*3600)/60 )); secs=$(( secs-hrs*3600-mins*60 ))
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ellapsed time: $hrs h $mins min $secs s"
echo " " >> $MAINDIR/output.txt
echo " ellapsed time: $hrs h $mins min $secs s" >> $MAINDIR/output.txt
fi


cd ..

}

 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
relaxation () {                       # $2 is for addvacancy ... / addadsorbant ...

secs=$SECONDS

mkdir relaxation_${1}
cd relaxation_${1}

if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ###########################################################################################"
echo " "
echo " Running now: relaxation $1 $2  ;   $GGA $POTCAR "
echo " " >> $MAINDIR/output.txt
echo " ###########################################################################################" >> $MAINDIR/output.txt
echo " " >> $MAINDIR/output.txt
echo " Running now: relaxation $1 $2  ;   $GGA $POTCAR " >> $MAINDIR/output.txt
fi

$1 ;

if [ -n "$2" ]; then
$2 "$3" "$4" "$5" "$6"  
fi

if [ -n "$7" ]; then
$7 "$8" "$9" "${10}" "${11}"   
fi

if [ -n "${12}" ]; then
${12} "${13}" "${14}" "${15}" "${16}"  
fi

if [ -n "${17}" ]; then
${17} "${18}" "${19}" "${20}" "${21}"  
fi

if [ -n "${22}" ]; then
${22} "${23}" "${24}" "${25}" "${26}"  
fi

if [ -n "${27}" ]; then
${27} "${28}" "${29}" "${30}" "${31}"  
fi

if [ -n "${32}" ]; then
${32} "${33}" "${34}" "${35}" "${36}"  
fi

if [ -n "${37}" ]; then
${37} "${38}" "${39}" "${40}" "${41}"  
fi

if [ -n "${42}" ]; then
${42} "${43}" "${44}" "${45}" "${46}"  
fi

if [ -n "${47}" ]; then
${47} "${48}" "${49}" "${50}" "${51}"  
fi

if [ -n "${52}" ]; then
${52} "${53}" "${54}" "${55}" "${56}"  
fi

if [ -n "${57}" ]; then
${57} "${58}" "${59}" "${60}" "${61}"  
fi

if [ -n "${62}" ]; then
${62} "${63}" "${64}" "${65}" "${66}"  
fi

if [ -n "${67}" ]; then
${67} "${68}" "${69}" "${70}" "${71}"  
fi

if [ -n "${72}" ]; then
${72} "${73}" "${74}" "${75}" "${76}"  
fi

if [ -n "${77}" ]; then
${77} "${78}" "${79}" "${80}" "${81}"  
fi


buildkpoints $1
buildincar
echo "#ionic relaxation:" >> INCAR
echo "IBRION = $IBRION" >> INCAR
echo "EDIFFG = $EDIFFG" >> INCAR
echo "NSW = $NSW" >> INCAR
echo "POTIM = $POTIM" >> INCAR
echo "ISIF = $ISIF" >> INCAR
echo " " >> INCAR
buildpotcar
$VASP

arraynumberofions=($(grep 'number of ions' OUTCAR))
valuenumberofions=${arraynumberofions[11]}
array2=($(grep 'free  en' OUTCAR | tail -1))
value2=${array2[4]}
value3=`echo $value2 / $valuenumberofions | bc -l`
if [ "$UPDATEVARIABLES" = true ]; then
name="FREE_ENERGY_$1"
eval $name=$value3
fi

arrayenbefrel=($(grep 'free  en' OUTCAR | head -1))
enbefrell=${arrayenbefrel[4]}
enbefrel=`echo $enbefrell / $valuenumberofions | bc -l`
relen=`echo $enbefrel - $value3 | bc -l`

if [ "$STRUCTURE_TYPE" = crystal ]; then

mkdir temp
cat CONTCAR > temp/POSCAR
cd temp
buildkpoints 1
nelmbackup=$NELM
NELM=1
buildincar
buildpotcar
$VASP
NELM=$nelmbackup

arraylatticeconst=($(grep 'ALAT' OUTCAR))
latticeconstt=${arraylatticeconst[2]}
latticeconst=`echo $latticeconstt / $SUPERCELL_FACTOR | bc -l`

if [ "$LATTICE_SYSTEM" = cubic ]; then
volume=`echo $latticeconst \* $latticeconst \* $latticeconst / $ATOMS_PER_CONVENTIONAL_CELL | bc -l`
fi

if [ "$LATTICE_SYSTEM" = hexagonal ]; then
arraycaratio=($(grep 'C/A-ratio' OUTCAR))
valuecaratio=${arraycaratio[2]}
if [ "$UPDATEVARIABLES" = true ]; then
name="C_A_RATIO_$1"
eval $name=$valuecaratio
fi
volume=`echo $latticeconst \* $latticeconst \* $latticeconst \* $valuecaratio \* 0.86602540378443864676372317075294 / $ATOMS_PER_CONVENTIONAL_CELL | bc -l`
fi

if [ "$LATTICE_SYSTEM" = tetragonal ]; then
arraycaratio=($(grep 'C/A-ratio' OUTCAR))
valuecaratio=${arraycaratio[2]}
if [ "$UPDATEVARIABLES" = true ]; then
name="C_A_RATIO_$1"
eval $name=$valuecaratio
fi
volume=`echo $latticeconst \* $latticeconst \* $latticeconst \* $valuecaratio / $ATOMS_PER_CONVENTIONAL_CELL | bc -l`
fi

if [ "$UPDATEVARIABLES" = true ]; then
name="VOLUME_$1"
eval $name=$volume
fi

cd ..

if [ "$PRINTOUTPUT" = true ]; then
if [ "$LATTICE_SYSTEM" = cubic ]; then
  echo " "
  echo " energy minimum of $value3 eV per atom was reached at: "
  echo " relaxation energy: $relen eV "
  echo " volume per atom = " $volume " Anstrom^3 per atom "
  echo " lattice constant a = " $latticeconst " Angstrom "
if [ "$UPDATEVARIABLES" = true ]; then
  echo " FREE_ENERGY_$1 and VOLUME_$1 have been updated accordingly "
fi
  echo " " >> $MAINDIR/output.txt
  echo " energy minimum of $value3 eV per atom was reached at: " >> $MAINDIR/output.txt
  echo " relaxation energy: $relen eV " >> $MAINDIR/output.txt
  echo " volume per atom = " $volume " Anstrom^3 per atom " >> $MAINDIR/output.txt
  echo " lattice constant a = " $latticeconst " Angstrom " >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " FREE_ENERGY_$1 and VOLUME_$1 have been updated accordingly " >> $MAINDIR/output.txt
fi
fi
if [ "$LATTICE_SYSTEM" = hexagonal ]; then
  echo " "
  echo " energy minimum of $value3 eV per atom was reached at: "
  echo " relaxation energy: $relen eV "
  echo " volume per atom = " $volume " Anstrom^3 per atom "
  echo " lattice constant a = " $latticeconst " Angstrom "
  hjbsugbr=`echo $valuecaratio \* $latticeconst | bc -l`
  echo " lattice constant c = " $hjbsugbr " Angstrom "
  echo " c/a-ratio = " $valuecaratio
if [ "$UPDATEVARIABLES" = true ]; then
  echo " FREE_ENERGY_$1 , VOLUME_$1 and C_A_RATIO_$1 have been updated accordingly "
fi
  echo " " >> $MAINDIR/output.txt
  echo " energy minimum of $value3 eV per atom was reached at: " >> $MAINDIR/output.txt
  echo " relaxation energy: $relen eV " >> $MAINDIR/output.txt
  echo " volume per atom = " $volume " Anstrom^3 per atom " >> $MAINDIR/output.txt
  echo " lattice constant a = " $latticeconst " Angstrom " >> $MAINDIR/output.txt
  hjbsugbr=`echo $valuecaratio \* $latticeconst | bc -l` >> $MAINDIR/output.txt
  echo " lattice constant c = " $hjbsugbr " Angstrom " >> $MAINDIR/output.txt
  echo " c/a-ratio = " $valuecaratio >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " FREE_ENERGY_$1 , VOLUME_$1 and C_A_RATIO_$1 have been updated accordingly " >> $MAINDIR/output.txt
fi
fi
if [ "$LATTICE_SYSTEM" = tetragonal ]; then
  echo " "
  echo " energy minimum of $value3 eV per atom was reached at: "
  echo " relaxation energy: $relen eV "
  echo " volume per atom = " $volume " Anstrom^3 per atom "
  echo " lattice constant a = " $latticeconst " Angstrom "
  hjbsugbr=`echo $valuecaratio \* $latticeconst | bc -l`
  echo " lattice constant c = " $hjbsugbr " Angstrom "
  echo " c/a-ratio = " $valuecaratio
if [ "$UPDATEVARIABLES" = true ]; then
  echo " FREE_ENERGY_$1 , VOLUME_$1 and C_A_RATIO_$1 have been updated accordingly "
fi
  echo " " >> $MAINDIR/output.txt
  echo " energy minimum of $value3 eV per atom was reached at: " >> $MAINDIR/output.txt
  echo " relaxation energy: $relen eV " >> $MAINDIR/output.txt
  echo " volume per atom = " $volume " Anstrom^3 per atom " >> $MAINDIR/output.txt
  echo " lattice constant a = " $latticeconst " Angstrom " >> $MAINDIR/output.txt
  hjbsugbr=`echo $valuecaratio \* $latticeconst | bc -l` >> $MAINDIR/output.txt
  echo " lattice constant c = " $hjbsugbr " Angstrom " >> $MAINDIR/output.txt
  echo " c/a-ratio = " $valuecaratio >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " FREE_ENERGY_$1 , VOLUME_$1 and C_A_RATIO_$1 have been updated accordingly " >> $MAINDIR/output.txt
fi
fi
fi

fi



if [ "$STRUCTURE_TYPE" = surface ]; then


cellhightt=($(sed -n '5p' < CONTCAR))
cellhight=${cellhightt[2]}

let num=1\*$SUPERCELL_FACTOR\*$SUPERCELL_FACTOR+9
firstlayerr=($(sed -n "$num"'p' < CONTCAR))
firstlayer=${firstlayerr[2]}
firstlayer=`echo $firstlayer \* $cellhight | bc -l`

let num=2\*$SUPERCELL_FACTOR\*$SUPERCELL_FACTOR+9
secondlayerr=($(sed -n "$num"'p' < CONTCAR))
secondlayer=${secondlayerr[2]}
secondlayer=`echo $secondlayer \* $cellhight | bc -l`

let num=3\*$SUPERCELL_FACTOR\*$SUPERCELL_FACTOR+9
thirdlayerr=($(sed -n "$num"'p' < CONTCAR))
thirdlayer=${thirdlayerr[2]}
thirdlayer=`echo $thirdlayer \* $cellhight | bc -l`

difffirstsecondlayer=`echo $secondlayer - $firstlayer | bc -l`
diffsecondthirdlayer=`echo $thirdlayer - $secondlayer | bc -l`

name="VACUUM_SIZE_$1"
vacuumsize=`echo ${!name}`

name="NUMBER_OF_LAYERS_$1"
numberoflayers=`echo ${!name}`

bulklayerdistance=`echo $cellhight - $vacuumsize | bc -l`
bulklayerdistance=`echo $bulklayerdistance / $numberoflayers | bc -l`

layerhights=" "
for ifv in $(seq 1 1 $NUMBER_OF_LAYERS) ; do
let num=$ifv\*$SUPERCELL_FACTOR\*$SUPERCELL_FACTOR+9
hightt=($(sed -n "$num"'p' < CONTCAR))
hight=${hightt[2]}
hight=`echo $hight \* $cellhight | bc -l`
layerhights=$layerhights" "$hight
done

if [ "$UPDATEVARIABLES" = true ]; then
name="LAYER_HIGHTS_$1"
eval $name='$layerhights'
fi

if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " energy minimum of $value3 eV per atom was reached at: "
  echo " relaxation energy: $relen eV "
  echo " difference between first & second layer: " $difffirstsecondlayer " Angstrom"
  echo " difference between second & third layer: " $diffsecondthirdlayer " Angstrom"
  echo " for reference, layer distance in bulk structure: " $bulklayerdistance " Angstrom"
if [ "$UPDATEVARIABLES" = true ]; then
  echo " FREE_ENERGY_$1 and LAYER_HIGHTS_$1 has been updated accordingly. "
fi
  echo " " >> $MAINDIR/output.txt
  echo " energy minimum of $value3 eV per atom was reached at: " >> $MAINDIR/output.txt
  echo " relaxation energy: $relen eV " >> $MAINDIR/output.txt
  echo " difference between first & second layer: " $difffirstsecondlayer " Angstrom" >> $MAINDIR/output.txt
  echo " difference between second & third layer: " $diffsecondthirdlayer " Angstrom" >> $MAINDIR/output.txt
  echo " for reference, layer distance in bulk structure: " $bulklayerdistance " Angstrom" >> $MAINDIR/output.txt
if [ "$UPDATEVARIABLES" = true ]; then
  echo " FREE_ENERGY_$1 and LAYER_HIGHTS_$1 has been updated accordingly. " >> $MAINDIR/output.txt
fi
fi

if [ "$2" = addadsorbate ]; then

let num=$NUMBER_OF_LAYERS\*$SUPERCELL_FACTOR\*$SUPERCELL_FACTOR+9
hightlastt=($(sed -n "$num"'p' < CONTCAR))
hightlast=${hightlastt[2]}
hightlast=`echo $hightlast \* $cellhight | bc -l`

let num=$NUMBER_OF_LAYERS\*$SUPERCELL_FACTOR\*$SUPERCELL_FACTOR+9+1
hightmoll=($(sed -n "$num"'p' < CONTCAR))
hightmol=${hightmoll[2]}
hightmol=`echo $hightmol \* $cellhight | bc -l`

adsdist=`echo $hightmol - $hightlast | bc -l`

if [ "$UPDATEVARIABLES" = true ]; then
name="ADSORPTION_DISTANCE_$3"
eval $name=$adsdist
fi

if [ "$PRINTOUTPUT" = true ]; then
  echo " adsorption distance of first adsorbate: " $adsdist " Angstrom"
if [ "$UPDATEVARIABLES" = true ]; then
  echo " ADSORPTION_DISTANCE_$3 has been updated accordingly. "
fi
fi

fi


fi


if [ "$STRUCTURE_TYPE" = molecule ]; then


if [ "$PRINTOUTPUT" = true ]; then
  echo " "
  echo " energy minimum of $value3 eV per atom was reached at these atomic positions: "
  echo " " >> $MAINDIR/output.txt
  echo " energy minimum of $value3 eV per atom was reached at these atomic positions: " >> $MAINDIR/output.txt
fi

for ifv in $(seq 1 1 $ATOMS_PER_SUBCELL) ; do

let num=$ifv+8
positionss=($(sed -n "$num"'p' < CONTCAR))
position1=${positionss[0]}
position2=${positionss[1]}
position3=${positionss[2]}

name="MOLECULE_ASYMETRY_$1"
asymetry=`echo ${!name}`

name="MOLECULE_CELL_SIZE_$1"
molcellsize=`echo ${!name}`

position1=`echo $position1 \* $molcellsize \* $SUPERCELL_FACTOR - $position1 \* $asymetry | bc -l`
position2=`echo $position2 \* $molcellsize \* $SUPERCELL_FACTOR | bc -l`
position3=`echo $position3 \* $molcellsize \* $SUPERCELL_FACTOR + $position3 \* $asymetry | bc -l`

positions="$position1 $position2 $position3"

if [ "$UPDATEVARIABLES" = true ]; then
name="POSITION_ATOM_${i}_$1"
eval $name='$positions'
fi

if [ "$PRINTOUTPUT" = true ]; then
  echo " $positions"
  echo " $positions" >> $MAINDIR/output.txt
fi

done

if [ "$PRINTOUTPUT" = true ]; then
if [ "$UPDATEVARIABLES" = true ]; then
  echo " FREE_ENERGY_$1 and POSITION_ATOM_n_$1 for n=1,...,$ATOMS_PER_SUBCELL have been updated accordingly. "
  echo " FREE_ENERGY_$1 and POSITION_ATOM_n_$1 for n=1,...,$ATOMS_PER_SUBCELL have been updated accordingly. " >> $MAINDIR/output.txt
fi
fi

fi


let secs=$SECONDS-$secs
let TOTALTIME=$TOTALTIME+$secs
hrs=$(( secs/3600 )); mins=$(( (secs-hrs*3600)/60 )); secs=$(( secs-hrs*3600-mins*60 ))
if [ "$PRINTOUTPUT" = true ]; then
echo " "
echo " ellapsed time: $hrs h $mins min $secs s"
echo " " >> $MAINDIR/output.txt
echo " ellapsed time: $hrs h $mins min $secs s" >> $MAINDIR/output.txt
fi


VARIABLEFORCONVERGENCE=$volume

cd ..

}

 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
buildincar () {

if [ -e INCAR ] ; then
rm INCAR
fi

cat >> INCAR << EOF

#starting parameters:
ISTART = $ISTART
ICHARG = $ICHARG

#writing parameters:
LWAVE = $LWAVE
LCHARG = $LCHARG
NWRITE =  $NWRITE

#electronic optimization:
ENCUT = $ENCUT
ALGO = $ALGO
NELM = $NELM
EDIFF = $EDIFF
#NBANDS = $NBANDS

GGA = $GGA
LASPH = $LASPH
EOF

if [ "$ALGO" = RPAR ]; then
cat >> INCAR << EOF

NOMEGA = $NOMEGA
EOF
fi

cat >> INCAR << EOF

#kpoint sampling:
ISMEAR = $ISMEAR
SIGMA = $SIGMA
ISYM = $ISYM
KGAMMA = $KGAMMA

#magnetism:
ISPIN = $ISPIN
#MAGMOM = $MAGMOM

#performance optimization:
KPAR = $KPAR
NCORE = $NCORE
LREAL = $LREAL

#other incar tags:

EOF

echo " " >> INCAR
echo "$OTHERINCARTAGS" >> INCAR
echo " " >> INCAR

}

 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
buildkpoints () {

if [ -e KPOINTS ] ; then
rm KPOINTS
fi

if [ -n "$1" ] && [ "$1" -eq "$1" ] 2>/dev/null; then
cat >> KPOINTS << EOF
Regular ${1}x${1}x${1} k-point mesh
0
EOF
if [ "$KGAMMA" = .TRUE. ]; then
cat >> KPOINTS << EOF
Gamma
EOF
elif [ "$KGAMMA" = .FALSE. ]; then
cat >> KPOINTS << EOF
Monkhorst-Pack
EOF
fi
cat >> KPOINTS << EOF
$1 $1 $1
0 0 0
EOF

else
array=($1)
a=${array[0]}
b=${array[1]}
c=${array[2]}
if [ -n "$a" ] && [ "$a" -eq "$a" ] 2>/dev/null; then
cat >> KPOINTS << EOF
Regular ${a}x${b}x${c} k-point mesh
0
EOF
if [ "$KGAMMA" = .TRUE. ]; then
cat >> KPOINTS << EOF
Gamma
EOF
elif [ "$KGAMMA" = .FALSE. ]; then
cat >> KPOINTS << EOF
Monkhorst-Pack
EOF
fi
cat >> KPOINTS << EOF
$a $b $c
0 0 0
EOF

else
name="KPOINTS_$1"
kpts=`echo ${!name}`
cat >> KPOINTS << EOF
k-point mesh for $1 $STRUCTURE_TYPE
0
EOF
if [ "$KGAMMA" = .TRUE. ]; then
cat >> KPOINTS << EOF
Gamma
EOF
elif [ "$KGAMMA" = .FALSE. ]; then
cat >> KPOINTS << EOF
Monkhorst-Pack
EOF
fi
if [ "$STRUCTURE_TYPE" = molecule ]; then
cat >> KPOINTS << EOF
1 1 1
0 0 0
EOF
elif [ "$STRUCTURE_TYPE" = crystal ]; then
cat >> KPOINTS << EOF
$kpts $kpts $kpts
0 0 0
EOF
elif [ "$STRUCTURE_TYPE" = surface ]; then
cat >> KPOINTS << EOF
$kpts $kpts 1
0 0 0
EOF
elif [ "$STRUCTURE_TYPE" = chain ]; then
cat >> KPOINTS << EOF
1 1 $kpts
0 0 0
EOF
fi
fi

fi

}

 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
buildpotcar () {

potarray=($POTCAR)
potential1=${potarray[0]}
potential2=${potarray[1]}
potential3=${potarray[2]}
potential4=${potarray[3]}
potential5=${potarray[4]}
potential6=${potarray[5]}
potential7=${potarray[6]}
potential8=${potarray[7]}
cat $ALLPOTCARS/$potential1/POTCAR $ALLPOTCARS/$potential2/POTCAR $ALLPOTCARS/$potential3/POTCAR $ALLPOTCARS/$potential4/POTCAR $ALLPOTCARS/$potential5/POTCAR $ALLPOTCARS/$potential6/POTCAR $ALLPOTCARS/$potential7/POTCAR $ALLPOTCARS/$potential8/POTCAR > POTCAR  2>&-

echo $POTCAR >> minipotcar

}

 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
buildqpoints () {

if [ "$LATTICE_SYSTEM" = cubic ]; then

if [ "$BRAVAIS_LATTICE" = F ]; then
path=$2
if [ "$path" = defaultpath ]; then
path="G X U , K G L W X"
fi
cat > QPOINTS << EOF
k-points for bandstructure $path
251
line
reciprocal
EOF
array=($(echo $path))
value=${array[0]}
if [ "$value" = G ]; then
echo "0.00000  0.00000  0.00000   1" >> QPOINTS
elif [ "$value" = X ]; then
echo "0.00000  0.50000  0.50000   1" >> QPOINTS
elif [ "$value" = U ]; then
echo "0.25000  0.62500  0.62500   1" >> QPOINTS
elif [ "$value" = K ]; then
echo "0.37500  0.75000  0.37500   1" >> QPOINTS
elif [ "$value" = L ]; then
echo "0.50000  0.50000  0.50000   1" >> QPOINTS
elif [ "$value" = W ]; then
echo "0.25000  0.75000  0.50000   1" >> QPOINTS
fi
total_number_of_characters=`echo $path |tr " " "\n" |wc -l`
total_number_of_separation_character=`echo $path | tr -cd '-' | wc -c`
let total_number_of_high_symmetry_points=$total_number_of_characters-$total_number_of_separation_character
let k=$total_number_of_characters-2
for high_symmetry_point in $(seq 1 1 $k); do
array=($(echo $path))
value=${array[$high_symmetry_point]}
if [ "$value" = G ]; then
echo "0.00000  0.00000  0.00000   1" >> QPOINTS
echo " " >> QPOINTS
echo "0.00000  0.00000  0.00000   1" >> QPOINTS
elif [ "$value" = X ]; then
echo "0.00000  0.50000  0.50000   1" >> QPOINTS
echo " " >> QPOINTS
echo "0.00000  0.50000  0.50000   1" >> QPOINTS
elif [ "$value" = U ]; then
echo "0.25000  0.62500  0.62500   1" >> QPOINTS
echo " " >> QPOINTS
echo "0.25000  0.62500  0.62500   1" >> QPOINTS
elif [ "$value" = K ]; then
echo "0.37500  0.75000  0.37500   1" >> QPOINTS
echo " " >> QPOINTS
echo "0.37500  0.75000  0.37500   1" >> QPOINTS
elif [ "$value" = L ]; then
echo "0.50000  0.50000  0.50000   1" >> QPOINTS
echo " " >> QPOINTS
echo "0.50000  0.50000  0.50000   1" >> QPOINTS
elif [ "$value" = W ]; then
echo "0.25000  0.75000  0.50000   1" >> QPOINTS
echo " " >> QPOINTS
echo "0.25000  0.75000  0.50000   1" >> QPOINTS
fi
done
let k=$total_number_of_characters-1
array=($(echo $path))
value=${array[$k]}
if [ "$value" = G ]; then
echo "0.00000  0.00000  0.00000   1" >> QPOINTS
elif [ "$value" = X ]; then
echo "0.00000  0.50000  0.50000   1" >> QPOINTS
elif [ "$value" = U ]; then
echo "0.25000  0.62500  0.62500   1" >> QPOINTS
elif [ "$value" = K ]; then
echo "0.37500  0.75000  0.37500   1" >> QPOINTS
elif [ "$value" = L ]; then
echo "0.50000  0.50000  0.50000   1" >> QPOINTS
elif [ "$value" = W ]; then
echo "0.25000  0.75000  0.50000   1" >> QPOINTS
fi
for character in $(seq 0 1 $k); do
array=($(echo $path))
value=${array[$character]}
if [ "$value" = , ]; then
let line1=3*$character+2
let line2=3*$character+3
let line3=3*$character+4
sed ${line3}d QPOINTS >> temp
rm QPOINTS
mv temp QPOINTS
sed ${line2}d QPOINTS >> temp
rm QPOINTS
mv temp QPOINTS
sed ${line1}d QPOINTS >> temp
rm QPOINTS
mv temp QPOINTS
fi
done
fi

if [ "$BRAVAIS_LATTICE" = I ]; then
path=$2
if [ "$path" = defaultpath ]; then
path="G H P G N"
fi
cat > QPOINTS << EOF
k-points for bandstructure $path
251
line
reciprocal
EOF
array=($(echo $path))
value=${array[0]}
if [ "$value" = G ]; then
echo "0.00000  0.00000  0.00000   1" >> QPOINTS
elif [ "$value" = H ]; then
echo "-0.50000  0.50000  0.50000   1" >> QPOINTS
elif [ "$value" = P ]; then
echo "0.25000  0.25000  0.25000   1" >> QPOINTS
elif [ "$value" = N ]; then
echo "0.00000  0.50000  0.00000   1" >> QPOINTS
fi
total_number_of_characters=`echo $path |tr " " "\n" |wc -l`
total_number_of_separation_character=`echo $path | tr -cd '-' | wc -c`
let total_number_of_high_symmetry_points=$total_number_of_characters-$total_number_of_separation_character
let k=$total_number_of_characters-2
for high_symmetry_point in $(seq 1 1 $k); do
array=($(echo $path))
value=${array[$high_symmetry_point]}
if [ "$value" = G ]; then
echo "0.00000  0.00000  0.00000   1" >> QPOINTS
echo " " >> QPOINTS
echo "0.00000  0.00000  0.00000   1" >> QPOINTS
elif [ "$value" = H ]; then
echo "-0.50000  0.50000  0.50000   1" >> QPOINTS
echo " " >> QPOINTS
echo "-0.50000  0.50000  0.50000   1" >> QPOINTS
elif [ "$value" = P ]; then
echo "0.25000  0.25000  0.25000   1" >> QPOINTS
echo " " >> QPOINTS
echo "0.25000  0.25000  0.25000   1" >> QPOINTS
elif [ "$value" = N ]; then
echo "0.00000  0.50000  0.00000   1" >> QPOINTS
echo " " >> QPOINTS
echo "0.00000  0.50000  0.00000   1" >> QPOINTS
fi
done
let k=$total_number_of_characters-1
array=($(echo $path))
value=${array[$k]}
if [ "$value" = G ]; then
echo "0.00000  0.00000  0.00000   1" >> QPOINTS
elif [ "$value" = H ]; then
echo "-0.50000  0.50000  0.50000   1" >> QPOINTS
elif [ "$value" = P ]; then
echo "0.25000  0.25000  0.25000   1" >> QPOINTS
elif [ "$value" = N ]; then
echo "0.00000  0.50000  0.00000   1" >> QPOINTS
fi
for character in $(seq 0 1 $k); do
array=($(echo $path))
value=${array[$character]}
if [ "$value" = , ]; then
let line1=3*$character+2
let line2=3*$character+3
let line3=3*$character+4
sed ${line3}d QPOINTS >> temp
rm QPOINTS
mv temp QPOINTS
sed ${line2}d QPOINTS >> temp
rm QPOINTS
mv temp QPOINTS
sed ${line1}d QPOINTS >> temp
rm QPOINTS
mv temp QPOINTS
fi
done
fi

if [ "$BRAVAIS_LATTICE" = P ]; then
path=$2
if [ "$path" = defaultpath ]; then
path="G X M G R"
fi
cat > QPOINTS << EOF
k-points for bandstructure $path
251
line
reciprocal
EOF
array=($(echo $path))
value=${array[0]}
if [ "$value" = G ]; then
echo "0.00000  0.00000  0.00000   1" >> QPOINTS
elif [ "$value" = R ]; then
echo "0.50000  0.50000  0.50000   1" >> QPOINTS
elif [ "$value" = X ]; then
echo "0.00000  0.50000  0.00000   1" >> QPOINTS
elif [ "$value" = M ]; then
echo "0.50000  0.50000  0.00000   1" >> QPOINTS
fi
total_number_of_characters=`echo $path |tr " " "\n" |wc -l`
total_number_of_separation_character=`echo $path | tr -cd '-' | wc -c`
let total_number_of_high_symmetry_points=$total_number_of_characters-$total_number_of_separation_character
let k=$total_number_of_characters-2
for high_symmetry_point in $(seq 1 1 $k); do
array=($(echo $path))
value=${array[$high_symmetry_point]}
if [ "$value" = G ]; then
echo "0.00000  0.00000  0.00000   1" >> QPOINTS
echo " " >> QPOINTS
echo "0.00000  0.00000  0.00000   1" >> QPOINTS
elif [ "$value" = R ]; then
echo "0.50000  0.50000  0.50000   1" >> QPOINTS
echo " " >> QPOINTS
echo "0.50000  0.50000  0.50000   1" >> QPOINTS
elif [ "$value" = X ]; then
echo "0.00000  0.50000  0.00000   1" >> QPOINTS
echo " " >> QPOINTS
echo "0.00000  0.50000  0.00000   1" >> QPOINTS
elif [ "$value" = M ]; then
echo "0.50000  0.50000  0.00000   1" >> QPOINTS
echo " " >> QPOINTS
echo "0.50000  0.50000  0.00000   1" >> QPOINTS
fi
done
let k=$total_number_of_characters-1
array=($(echo $path))
value=${array[$k]}
if [ "$value" = G ]; then
echo "0.00000  0.00000  0.00000   1" >> QPOINTS
elif [ "$value" = R ]; then
echo "0.50000  0.50000  0.50000   1" >> QPOINTS
elif [ "$value" = X ]; then
echo "0.00000  0.50000  0.00000   1" >> QPOINTS
elif [ "$value" = M ]; then
echo "0.50000  0.50000  0.00000   1" >> QPOINTS
fi
for character in $(seq 0 1 $k); do
array=($(echo $path))
value=${array[$character]}
if [ "$value" = , ]; then
let line1=3*$character+2
let line2=3*$character+3
let line3=3*$character+4
sed ${line3}d QPOINTS >> temp
rm QPOINTS
mv temp QPOINTS
sed ${line2}d QPOINTS >> temp
rm QPOINTS
mv temp QPOINTS
sed ${line1}d QPOINTS >> temp
rm QPOINTS
mv temp QPOINTS
fi
done
fi

fi

if [ "$LATTICE_SYSTEM" = hexagonal ]; then

if [ "$BRAVAIS_LATTICE" = P ]; then
path=$2
if [ "$path" = defaultpath ]; then
path="G K M G"
fi
cat > QPOINTS << EOF
k-points for bandstructure $path
251
line
reciprocal
EOF
array=($(echo $path))
value=${array[0]}
if [ "$value" = G ]; then
echo "0.00000  0.00000  0.00000   1" >> QPOINTS
elif [ "$value" = A ]; then
echo "0.00000  0.00000  0.50000   1" >> QPOINTS
elif [ "$value" = K ]; then
echo "0.66667  0.33333  0.00000   1" >> QPOINTS
elif [ "$value" = H ]; then
echo "0.66667  0.33333  0.50000   1" >> QPOINTS
elif [ "$value" = M ]; then
echo "0.50000  0.00000  0.00000   1" >> QPOINTS
elif [ "$value" = L ]; then
echo "0.50000  0.00000  0.50000   1" >> QPOINTS
fi
total_number_of_characters=`echo $path |tr " " "\n" |wc -l`
total_number_of_separation_character=`echo $path | tr -cd '-' | wc -c`
let total_number_of_high_symmetry_points=$total_number_of_characters-$total_number_of_separation_character
let k=$total_number_of_characters-2
for high_symmetry_point in $(seq 1 1 $k); do
array=($(echo $path))
value=${array[$high_symmetry_point]}
if [ "$value" = G ]; then
echo "0.00000  0.00000  0.00000   1" >> QPOINTS
echo " " >> QPOINTS
echo "0.00000  0.00000  0.00000   1" >> QPOINTS
elif [ "$value" = A ]; then
echo "0.00000  0.00000  0.50000   1" >> QPOINTS
echo " " >> QPOINTS
echo "0.00000  0.00000  0.50000   1" >> QPOINTS
elif [ "$value" = K ]; then
echo "0.66667  0.33333  0.00000   1" >> QPOINTS
echo " " >> QPOINTS
echo "0.66667  0.33333  0.00000   1" >> QPOINTS
elif [ "$value" = H ]; then
echo "0.66667  0.33333  0.50000   1" >> QPOINTS
echo " " >> QPOINTS
echo "0.66667  0.33333  0.50000   1" >> QPOINTS
elif [ "$value" = M ]; then
echo "0.50000  0.00000  0.00000   1" >> QPOINTS
echo " " >> QPOINTS
echo "0.50000  0.00000  0.00000   1" >> QPOINTS
elif [ "$value" = L ]; then
echo "0.50000  0.00000  0.50000   1" >> QPOINTS
echo " " >> QPOINTS
echo "0.50000  0.00000  0.50000   1" >> QPOINTS
fi
done
let k=$total_number_of_characters-1
array=($(echo $path))
value=${array[$k]}
if [ "$value" = G ]; then
echo "0.00000  0.00000  0.00000   1" >> QPOINTS
elif [ "$value" = A ]; then
echo "0.00000  0.00000  0.50000   1" >> QPOINTS
elif [ "$value" = K ]; then
echo "0.66667  0.33333  0.00000   1" >> QPOINTS
elif [ "$value" = H ]; then
echo "0.66667  0.33333  0.50000   1" >> QPOINTS
elif [ "$value" = M ]; then
echo "0.50000  0.00000  0.00000   1" >> QPOINTS
elif [ "$value" = L ]; then
echo "0.50000  0.00000  0.50000   1" >> QPOINTS
fi
for character in $(seq 0 1 $k); do
array=($(echo $path))
value=${array[$character]}
if [ "$value" = , ]; then
let line1=3*$character+2
let line2=3*$character+3
let line3=3*$character+4
sed ${line3}d QPOINTS >> temp
rm QPOINTS
mv temp QPOINTS
sed ${line2}d QPOINTS >> temp
rm QPOINTS
mv temp QPOINTS
sed ${line1}d QPOINTS >> temp
rm QPOINTS
mv temp QPOINTS
fi
done
fi

fi

}
 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
readenmax () {

mkdir temp
cd temp
buildpotcar
arrayenmax1=($(grep -m1 ENMAX POTCAR |tail -1))
arrayenmax2=($(grep -m2 ENMAX POTCAR |tail -1))
arrayenmax3=($(grep -m3 ENMAX POTCAR |tail -1))
arrayenmax4=($(grep -m4 ENMAX POTCAR |tail -1))
arrayenmax5=($(grep -m5 ENMAX POTCAR |tail -1))
arrayenmax6=($(grep -m6 ENMAX POTCAR |tail -1))
arrayenmax7=($(grep -m7 ENMAX POTCAR |tail -1))
arrayenmax8=($(grep -m8 ENMAX POTCAR |tail -1))
ENMAXS=( ${arrayenmax1[2]%?} ${arrayenmax2[2]%?} ${arrayenmax3[2]%?} ${arrayenmax4[2]%?} ${arrayenmax5[2]%?} ${arrayenmax6[2]%?} ${arrayenmax7[2]%?} ${arrayenmax8[2]%?} )
ENMAX=${ENMAXS[0]}
for j in ${ENMAXS[@]}; do
if [ $(echo "$j > $ENCUT" | bc) -eq 1 ]; then
ENMAX=$j
fi
done
cd ..
rm -r temp

}

 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
setpotcar () {

POTCAR="$1 $2 $3 $4 $5 $6 $7 $8"

}
 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
plotxydata () {

cat > graph.dat << EOF
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
EOF

local data=$(cat $1)

local xmin=$(echo "$data" | awk '{print $1}' | sort -n | head -n 1)
local xmax=$(echo "$data" | awk '{print $1}' | sort -n | tail -n 1)
local ymin=$(echo "$data" | awk '{print $2}' | sort -n | head -n 1)
local ymax=$(echo "$data" | awk '{print $2}' | sort -n | tail -n 1)

local xscale=86
local yscale=8
data=$(echo "$data" | awk -v xmin=$xmin -v xmax=$xmax -v ymin=$ymin -v ymax=$ymax -v xscale=$xscale -v yscale=$yscale '{print int((($1-xmin)/(xmax-xmin))*xscale), int((($2-ymin)/(ymax-ymin))*yscale)}')

while read -r line; do

local x=$(echo "$line" | awk '{print $1}')
local y=$(echo "$line" | awk '{print $2}')

let yvjn=-$y+9

line=$(sed -n "${yvjn}p" graph.dat)
newline=${line:0:x}x${line:x+1}
sed -i "${yvjn}s/.*/$newline/" graph.dat
    
done <<< "$data"

let fvjndvj=$yscale+1
for ijknvf in $(seq 1 1 $fvjndvj) ; do
line="$(sed -r -n "${ijknvf}p" graph.dat)"
echo " |" "$line""|" >> graph.dattt
done

cp graph.dattt graph.dat
rm graph.dattt

echo " " >> graph.datt
echo " ----------------------------------- preview graph: ----------------------------------------" >> graph.datt
cat graph.dat >> graph.datt
cp graph.datt graph.dat
echo " -------------------------------------------------------------------------------------------" >> graph.dat

if [ "$PRINTOUTPUT" = true ]; then
cat graph.dat
cat graph.dat >> $MAINDIR/output.txt
fi

rm graph.datt

}
 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
plotxydata+ () {

cat > graph.dat << EOF
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
EOF


numberofcolumns=$(awk '{print NF; exit}' $1)

xscale=86
yscale=16

local data=$(cat $1)

local xmin=$(echo "$data" | awk '{print $1}' | sort -n | head -n 1)
local xmax=$(echo "$data" | awk '{print $1}' | sort -n | tail -n 1)

if [ "$numberofcolumns" = 2 ]; then
local ymin=$(echo "$data" | awk '{print $2}' | tr ' ' '\n'| sort -n | head -1)
local ymax=$(echo "$data" | awk '{print $2}' | tr ' ' '\n'| sort -n | tail -1)
fi

if [ "$numberofcolumns" = 3 ]; then
local ymin=$(echo "$data" | awk '{print $2, $3}' | tr ' ' '\n'| sort -n | head -1)
local ymax=$(echo "$data" | awk '{print $2, $3}' | tr ' ' '\n'| sort -n | tail -1)
fi

if [ "$numberofcolumns" = 4 ]; then
local ymin=$(echo "$data" | awk '{print $2, $3, $4}' | tr ' ' '\n'| sort -n | head -1)
local ymax=$(echo "$data" | awk '{print $2, $3, $4}' | tr ' ' '\n'| sort -n | tail -1)
fi

if [ "$numberofcolumns" = 5 ]; then
local ymin=$(echo "$data" | awk '{print $2, $3, $4, $5}' | tr ' ' '\n'| sort -n | head -1)
local ymax=$(echo "$data" | awk '{print $2, $3, $4, $5}' | tr ' ' '\n'| sort -n | tail -1)
fi

if [ "$numberofcolumns" = 6 ]; then
local ymin=$(echo "$data" | awk '{print $2, $3, $4, $5, $6}' | tr ' ' '\n'| sort -n | head -1)
local ymax=$(echo "$data" | awk '{print $2, $3, $4, $5, $6}' | tr ' ' '\n'| sort -n | tail -1)
fi

if [ "$numberofcolumns" = 7 ]; then
local ymin=$(echo "$data" | awk '{print $2, $3, $4, $5, $6, $7}' | tr ' ' '\n'| sort -n | head -1)
local ymax=$(echo "$data" | awk '{print $2, $3, $4, $5, $6, $7}' | tr ' ' '\n'| sort -n | tail -1)
fi

if [ "$numberofcolumns" = 8 ]; then
local ymin=$(echo "$data" | awk '{print $2, $3, $4, $5, $6, $7, $8}' | tr ' ' '\n'| sort -n | head -1)
local ymax=$(echo "$data" | awk '{print $2, $3, $4, $5, $6, $7, $8}' | tr ' ' '\n'| sort -n | tail -1)
fi

if [ "$numberofcolumns" = 9 ]; then
local ymin=$(echo "$data" | awk '{print $2, $3, $4, $5, $6, $7, $8, $9}' | tr ' ' '\n'| sort -n | head -1)
local ymax=$(echo "$data" | awk '{print $2, $3, $4, $5, $6, $7, $8, $9}' | tr ' ' '\n'| sort -n | tail -1)
fi

if [ "$numberofcolumns" = 10 ]; then
local ymin=$(echo "$data" | awk '{print $2, $3, $4, $5, $6, $7, $8, $9, $10}' | tr ' ' '\n'| sort -n | head -1)
local ymax=$(echo "$data" | awk '{print $2, $3, $4, $5, $6, $7, $8, $9, $10}' | tr ' ' '\n'| sort -n | tail -1)
fi



symbolarray=( x o u n c s z m w )
for column in $(seq 2 1 $numberofcolumns) ; do
let vjnsjvfjvn=$column-2
symbol=${symbolarray[$vjnsjvfjvn]}


local data=$(cat $1)


if [ "$symbol" = x ]; then
data=$(echo "$data" | awk -v xmin=$xmin -v xmax=$xmax -v ymin=$ymin -v ymax=$ymax -v xscale=$xscale -v yscale=$yscale '{print int((($1-xmin)/(xmax-xmin))*xscale), int((($2-ymin)/(ymax-ymin))*yscale)}')
fi

if [ "$symbol" = o ]; then
data=$(echo "$data" | awk -v xmin=$xmin -v xmax=$xmax -v ymin=$ymin -v ymax=$ymax -v xscale=$xscale -v yscale=$yscale '{print int((($1-xmin)/(xmax-xmin))*xscale), int((($3-ymin)/(ymax-ymin))*yscale)}')
fi

if [ "$symbol" = u ]; then
data=$(echo "$data" | awk -v xmin=$xmin -v xmax=$xmax -v ymin=$ymin -v ymax=$ymax -v xscale=$xscale -v yscale=$yscale '{print int((($1-xmin)/(xmax-xmin))*xscale), int((($4-ymin)/(ymax-ymin))*yscale)}')
fi

if [ "$symbol" = n ]; then
data=$(echo "$data" | awk -v xmin=$xmin -v xmax=$xmax -v ymin=$ymin -v ymax=$ymax -v xscale=$xscale -v yscale=$yscale '{print int((($1-xmin)/(xmax-xmin))*xscale), int((($5-ymin)/(ymax-ymin))*yscale)}')
fi

if [ "$symbol" = c ]; then
data=$(echo "$data" | awk -v xmin=$xmin -v xmax=$xmax -v ymin=$ymin -v ymax=$ymax -v xscale=$xscale -v yscale=$yscale '{print int((($1-xmin)/(xmax-xmin))*xscale), int((($6-ymin)/(ymax-ymin))*yscale)}')
fi

if [ "$symbol" = s ]; then
data=$(echo "$data" | awk -v xmin=$xmin -v xmax=$xmax -v ymin=$ymin -v ymax=$ymax -v xscale=$xscale -v yscale=$yscale '{print int((($1-xmin)/(xmax-xmin))*xscale), int((($7-ymin)/(ymax-ymin))*yscale)}')
fi

if [ "$symbol" = z ]; then
data=$(echo "$data" | awk -v xmin=$xmin -v xmax=$xmax -v ymin=$ymin -v ymax=$ymax -v xscale=$xscale -v yscale=$yscale '{print int((($1-xmin)/(xmax-xmin))*xscale), int((($8-ymin)/(ymax-ymin))*yscale)}')
fi

if [ "$symbol" = m ]; then
data=$(echo "$data" | awk -v xmin=$xmin -v xmax=$xmax -v ymin=$ymin -v ymax=$ymax -v xscale=$xscale -v yscale=$yscale '{print int((($1-xmin)/(xmax-xmin))*xscale), int((($9-ymin)/(ymax-ymin))*yscale)}')
fi

if [ "$symbol" = w ]; then
data=$(echo "$data" | awk -v xmin=$xmin -v xmax=$xmax -v ymin=$ymin -v ymax=$ymax -v xscale=$xscale -v yscale=$yscale '{print int((($1-xmin)/(xmax-xmin))*xscale), int((($10-ymin)/(ymax-ymin))*yscale)}')
fi


while read -r line; do

local x=$(echo "$line" | awk '{print $1}')
local y=$(echo "$line" | awk '{print $2}')

let yvjn=$yscale-$y+1

line=$(sed -n "${yvjn}p" graph.dat)
newline=${line:0:x}$symbol${line:x+1}
sed -i "${yvjn}s/.*/$newline/" graph.dat
    
done <<< "$data"

let fvjndvj=$yscale+1
for ijknvf in $(seq 1 1 $fvjndvj) ; do
line="$(sed -r -n "${ijknvf}p" graph.dat)"
if [ "$column" = $numberofcolumns ]; then
echo " |" "$line""|" >> graph.dattt
else
echo "$line" >> graph.dattt
fi
done

cp graph.dattt graph.dat
rm graph.dattt


done


echo " " >> graph.datt
echo " ----------------------------------- preview graph: ----------------------------------------" >> graph.datt
cat graph.dat >> graph.datt
cp graph.datt graph.dat
echo " -------------------------------------------------------------------------------------------" >> graph.dat

if [ "$PRINTOUTPUT" = true ]; then
cat graph.dat
cat graph.dat >> $MAINDIR/output.txt
fi

rm graph.datt

}
 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
plotxydata++ () {

cat > graph.dat << EOF
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
                                                                                        
EOF


jnvsgjns=0
for sfvnwvf in pldir_* ; do
let jnvsgjns=$jnvsgjns+1
cd $sfvnwvf 
cat $1 >> ../datatemp
cd ..
done

local data=$(cat datatemp)

local xmin=$(echo "$data" | awk '{print $1}' | sort -n | head -n 1)
local xmax=$(echo "$data" | awk '{print $1}' | sort -n | tail -n 1)
local ymin=$(echo "$data" | awk '{print $2}' | sort -n | head -n 1)
local ymax=$(echo "$data" | awk '{print $2}' | sort -n | tail -n 1)

rm datatemp

local xscale=86
local yscale=24


fvjhwjvghkb=0
for sfvnwvf in pldir_* ; do
let fvjhwjvghkb=$fvjhwjvghkb+1
cd $sfvnwvf
cp $1 ..
cd ..

if [ "$fvjhwjvghkb" = "1" ]; then
symbol="x"
fi
if [ "$fvjhwjvghkb" = "2" ]; then
symbol="o"
fi
if [ "$fvjhwjvghkb" = "3" ]; then
symbol="u"
fi
if [ "$fvjhwjvghkb" = "4" ]; then
symbol="n"
fi
if [ "$fvjhwjvghkb" = "5" ]; then
symbol="c"
fi
if [ "$fvjhwjvghkb" = "6" ]; then
symbol="s"
fi
if [ "$fvjhwjvghkb" = "7" ]; then
symbol="z"
fi
if [ "$fvjhwjvghkb" = "8" ]; then
symbol="m"
fi
if [ "$fvjhwjvghkb" = "9" ]; then
symbol="w"
fi

local data=$(cat $1)

data=$(echo "$data" | awk -v xmin=$xmin -v xmax=$xmax -v ymin=$ymin -v ymax=$ymax -v xscale=$xscale -v yscale=$yscale '{print int((($1-xmin)/(xmax-xmin))*xscale), int((($2-ymin)/(ymax-ymin))*yscale)}')

while read -r line; do

local x=$(echo "$line" | awk '{print $1}')
local y=$(echo "$line" | awk '{print $2}')

let yvjn=$yscale-$y+1

line=$(sed -n "${yvjn}p" graph.dat)
newline=${line:0:x}$symbol${line:x+1}
sed -i "${yvjn}s/.*/$newline/" graph.dat

done <<< "$data"

let fvjndvj=$yscale+1
for ijknvf in $(seq 1 1 $fvjndvj) ; do
line="$(sed -r -n "${ijknvf}p" graph.dat)"
if [ "$jnvsgjns" = $fvjhwjvghkb ]; then
echo " |" "$line""|" >> graph.dattt
else
echo "$line" >> graph.dattt
fi
done

cp graph.dattt graph.dat
rm graph.dattt


rm $1

done



echo " " >> graph.datt
echo " ----------------------------------- preview graph: ----------------------------------------" >> graph.datt
cat graph.dat >> graph.datt
cp graph.datt graph.dat
echo " -------------------------------------------------------------------------------------------" >> graph.dat

if [ "$PRINTOUTPUT" = true ]; then
cat graph.dat
cat graph.dat >> $MAINDIR/output.txt
fi

rm graph.datt



}
 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
readenergyvariables () {

source $1
energyvariables

}
 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
readincarvariables () {

source $1
incarvariables

}

 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
readkpointsvariables () {

source $1
kpointsvariables

}
 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
readstructuralvariables () {

source $1
structuralvariables

}
 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
readvariables () {

source $1
incarvariables
kpointsvariables
structuralvariables
readenergyvariables

}

 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
setdefaults () {

UPDATEVARIABLES=true
PRINTOUTPUT=true

setincardefaults  2>&-
setkpointsdefaults  2>&-
setstructuraldefaults  2>&-
setenergydefaults  2>&-


}
 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
setenergydefaults () {

for str in $allcrystals ; do
str="${str##*/}"
name="FREE_ENERGY_$str"
eval $name=NaN
done

for str in $allcrystals_supercells ; do
str="${str##*/}"
name="FREE_ENERGY_$str"
eval $name=NaN
done

for str in $allsurfaces ; do
str="${str##*/}"
name="FREE_ENERGY_$str"
eval $name=NaN
done

for str in $allsurfaces_supercells ; do
str="${str##*/}"
name="FREE_ENERGY_$str"
eval $name=NaN
done

for str in $allmolecules ; do
str="${str##*/}"
name="FREE_ENERGY_$str"
eval $name=NaN
done

#for str in $allmolecules_supercells ; do
#str="${str##*/}"
#name="FREE_ENERGY_$str"
#eval $name=NaN
#done

}




 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
setincardefaults () {

natomsss=`echo $ATOMS_PER_SUBCELL \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR \* $SUPERCELL_FACTOR | bc -l`

#starting parameters:
ISTART=0
ICHARG=2

#writing parameters:
LWAVE=".FALSE."
LCHARG=".FALSE."
NWRITE=2

#electronic optimization:
ENCUT=400
ALGO="Normal"
NELM=100
EDIFF="1E-05"
NBANDS=48

GGA="PE"
LASPH=".TRUE."

NOMEGA=12

#kpoint sampling:
ISMEAR=1
SIGMA=0.2
ISYM=2
KGAMMA=".TRUE."

#magnetism:
ISPIN=1
MAGMOM="$natomsss*1.0"

#performance optimization:
KPAR=1
NCORE=1
LREAL=.FALSE.

#defaults for relaxation:
IBRION=2
EDIFFG=-0.001        #EDIFF="1E-05"
NSW=100
POTIM=0.5
ISIF=3

#defaults for DOS:
NEDOS=1001
EMAX=
EMIN=

#defaults for MD:
TEBEG=100
TEEND=1000

#defaults for thermostat & ensembles:
MDALGO=3
LANGEVIN_GAMMA="1*5.0"
LANGEVIN_GAMMA_L="1*5.0"

#defaults for machine learned force fields:
ML_LMLFF=".TRUE."
ML_ISTART=0
ML_RCUT1=5.0
ML_RCUT2=5.0


}
 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
setkpointsdefaults () {

for str in $allcrystals ; do
str="${str##*/}"
name="KPOINTS_$str"
eval $name=12
done

for str in $allcrystals_supercells ; do
str="${str##*/}"
name="KPOINTS_$str"
eval $name=6
done

for str in $allsurfaces ; do
str="${str##*/}"
name="KPOINTS_$str"
eval $name=12
done

for str in $allsurfaces_supercells ; do
str="${str##*/}"
name="KPOINTS_$str"
eval $name=6
done

}

 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
setstructuraldefaults () {

for str in $allcrystals ; do

str="${str##*/}"
name="VOLUME_$str"
eval $name=15

mkdir temppp
cd temppp
$str
source defaultshiftsandratios
defaultshiftsandratios
cd ..
rm -r temppp

done


for str in $allcrystals_supercells ; do

str="${str##*/}"
name="VOLUME_$str"
eval $name=15

name="SUPERCELL_FACTOR_$str"
eval $name=2

mkdir temppp
cd temppp
$str
source defaultshiftsandratios
defaultshiftsandratios
cd ..
rm -r temppp

done


for str in $allsurfaces ; do

str="${str##*/}"
name="VOLUME_$str"
eval $name=15

name="NUMBER_OF_LAYERS_$str"
eval $name=6

name="VACUUM_SIZE_$str"
eval $name=10

name="SELECTIVE_DYNAMICS_DEPTH_$str"
eval $name=2

name="LAYER_HIGHTS_$str"
eval $name=defaulthights

mkdir temppp
cd temppp
$str
source defaultshiftsandratios
defaultshiftsandratios
cd ..
rm -r temppp

done


for str in $allsurfaces_supercells ; do

str="${str##*/}"
name="VOLUME_$str"
eval $name=15

name="SUPERCELL_FACTOR_$str"
eval $name=2

name="NUMBER_OF_LAYERS_$str"
eval $name=6

name="VACUUM_SIZE_$str"
eval $name=10

name="SELECTIVE_DYNAMICS_DEPTH_$str"
eval $name=2

name="LAYER_HIGHTS_$str"
eval $name=defaulthights

mkdir temppp
cd temppp
$str
source defaultshiftsandratios
defaultshiftsandratios
cd ..
rm -r temppp

done


for str in $allmolecules ; do

str="${str##*/}"
mkdir temppp
cd temppp
$str
source defaultatomicpositions
defaultatomicpositions
cd ..
rm -r temppp

name="MOLECULE_CELL_SIZE_$str"
eval $name=10

name="MOLECULE_ASYMETRY_$str"
eval $name=1

name="ADSORPTION_DISTANCE_$str"
eval $name=2

done


#for str in $allmolecules_supercells ; do

#str="${str##*/}"
#mkdir temppp
#cd temppp
#$str
#source defaultatomicpositions
#defaultatomicpositions
#cd ..
#rm -r temppp

#name="MOLECULE_CELL_SIZE_$str"
#eval $name=10

#name="MOLECULE_ASYMETRY_$str"
#eval $name=1

#name="ADSORPTION_DISTANCE_$str"
#eval $name=2

#name="SUPERCELL_FACTOR_$str"
#eval $name=2

#done



}


 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
storecontcar () {                  # storecontcar $directorywherecontisstored $name

if [ -f $MAINDIR/contcars ] ; then
x=x
else
mkdir $MAINDIR/contcars
fi

rm $MAINDIR/contcars/$2

touch $MAINDIR/contcars/$2
chmod +x $MAINDIR/contcars/$2

echo "$2 () {" >> $MAINDIR/contcars/$2
echo " " >> $MAINDIR/contcars/$2
echo "cat > poscardescription << EOF"  >> $MAINDIR/contcars/$2

cat $1/poscardescription >> $MAINDIR/contcars/$2

echo "EOF"  >> $MAINDIR/contcars/$2
echo " "  >> $MAINDIR/contcars/$2
echo "source poscardescription "  >> $MAINDIR/contcars/$2
echo "poscardescription "  >> $MAINDIR/contcars/$2
echo " "  >> $MAINDIR/contcars/$2
echo "cat > defaultshiftsandratios << EOF"  >> $MAINDIR/contcars/$2

cat $1/defaultshiftsandratios >> $MAINDIR/contcars/$2

echo "EOF"  >> $MAINDIR/contcars/$2
echo " "  >> $MAINDIR/contcars/$2

echo "cat > POSCAR << EOF"  >> $MAINDIR/contcars/$2
cat $1/CONTCAR >> $MAINDIR/contcars/$2
echo "EOF"  >> $MAINDIR/contcars/$2
echo " "  >> $MAINDIR/contcars/$2

echo "if [ \"\$READSHIFTS\" = true ]; then"  >> $MAINDIR/contcars/$2
echo "cat > readshifts << EOF"  >> $MAINDIR/contcars/$2
echo "readshifts () { "  >> $MAINDIR/contcars/$2
echo " "  >> $MAINDIR/contcars/$2

cat $1/readshifts >> $MAINDIR/contcars/$2

echo " "  >> $MAINDIR/contcars/$2

echo "x=x "  >> $MAINDIR/contcars/$2

echo " "  >> $MAINDIR/contcars/$2
echo "} "  >> $MAINDIR/contcars/$2
echo "EOF"  >> $MAINDIR/contcars/$2
echo "fi"  >> $MAINDIR/contcars/$2
echo " "  >> $MAINDIR/contcars/$2

echo "} "  >> $MAINDIR/contcars/$2



source $MAINDIR/contcars/$2

}
 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
storeenergyvariables () {

echo "energyvariables () {" >> $MAINDIR/allvariables/$1
echo " " >> $MAINDIR/allvariables/$1

for str in $allcrystals ; do
str="${str##*/}"
name="FREE_ENERGY_$str"
ene=`echo ${!name}`
echo "FREE_ENERGY_$str=$ene" >> $MAINDIR/allvariables/$1
done

echo " " >> $MAINDIR/allvariables/$1

for str in $allcrystals_supercells ; do
str="${str##*/}"
name="FREE_ENERGY_$str"
ene=`echo ${!name}`
echo "FREE_ENERGY_$str=$ene" >> $MAINDIR/allvariables/$1
done

echo " " >> $MAINDIR/allvariables/$1

for str in $allsurfaces ; do
str="${str##*/}"
name="FREE_ENERGY_$str"
ene=`echo ${!name}`
echo "FREE_ENERGY_$str=$ene" >> $MAINDIR/allvariables/$1
done

echo " " >> $MAINDIR/allvariables/$1

for str in $allsurfaces_supercells ; do
str="${str##*/}"
name="FREE_ENERGY_$str"
ene=`echo ${!name}`
echo "FREE_ENERGY_$str=$ene" >> $MAINDIR/allvariables/$1
done

echo " " >> $MAINDIR/allvariables/$1
echo "}" >> $MAINDIR/allvariables/$1
echo " " >> $MAINDIR/allvariables/$1

}
 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
storeincarvariables () {

cat > $MAINDIR/allvariables/$1 << EOF

incarvariables () {

ISTART=$ISTART
ICHARG=$ICHARG
LWAVE=$LWAVE
LCHARG=$LCHARG
NWRITE=$NWRITE
ENCUT=$ENCUT
ALGO=$ALGO
NELM=$NELM
EDIFF=$EDIFF
GGA=$GGA
LASPH=$LASPH
NOMEGA=$NOMEGA
ISMEAR=$ISMEAR
SIGMA=$SIGMA
ISYM=$ISYM
KGAMMA=$KGAMMA
ISPIN=$ISPIN
MAGMOM=$MAGMOM
KPAR=$KPAR
NCORE=$NCORE
LREAL=$LREAL
#for relaxations:
IBRION=$IBRION
EDIFFG=$EDIFFG
NSW=$NSW
POTIM=$POTIM
ISIF=$ISIF
#for DOS:
NEDOS=$NEDOS
EMAX=$EMAX
EMIN=$EMIN
#for MD:
TEBEG=$TEBEG
TEEND=$TEEND
#for thermostat & ensembles:
MDALGO=$MDALGO
LANGEVIN_GAMMA="$LANGEVIN_GAMMA"
LANGEVIN_GAMMA_L="$LANGEVIN_GAMMA_L"
#for machine learned force fields:
ML_LMLFF=$ML_LMLFF
ML_ISTART=$ML_ISTART
ML_RCUT1=$ML_RCUT1
ML_RCUT2=$ML_RCUT2


}
EOF

}
 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
storekpointsvariables () {

echo "kpointsvariables () {" >> $MAINDIR/allvariables/$1
echo " " >> $MAINDIR/allvariables/$1

for str in $allcrystals ; do
str="${str##*/}"
name="KPOINTS_$str"
kpts=`echo ${!name}`
echo "KPOINTS_$str=$kpts" >> $MAINDIR/allvariables/$1
done

echo " " >> $MAINDIR/allvariables/$1

for str in $allcrystals_supercells ; do
str="${str##*/}"
name="KPOINTS_$str"
kpts=`echo ${!name}`
echo "KPOINTS_$str=$kpts" >> $MAINDIR/allvariables/$1
done

echo " " >> $MAINDIR/allvariables/$1

for str in $allsurfaces ; do
str="${str##*/}"
name="KPOINTS_$str"
kpts=`echo ${!name}`
echo "KPOINTS_$str=$kpts" >> $MAINDIR/allvariables/$1
done

echo " " >> $MAINDIR/allvariables/$1

for str in $allsurfaces_supercells ; do
str="${str##*/}"
name="KPOINTS_$str"
kpts=`echo ${!name}`
echo "KPOINTS_$str=$kpts" >> $MAINDIR/allvariables/$1
done

echo " " >> $MAINDIR/allvariables/$1
echo "}" >> $MAINDIR/allvariables/$1
echo " " >> $MAINDIR/allvariables/$1

}


 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
storestructuralvariables () {

echo "structuralvariables () {" >> $MAINDIR/allvariables/$1
echo " " >> $MAINDIR/allvariables/$1

for str in $allcrystals ; do
str="${str##*/}"
name="VOLUME_$str"
vol=`echo ${!name}`
echo "VOLUME_$str=$vol" >> $MAINDIR/allvariables/$1
done

echo " " >> $MAINDIR/allvariables/$1

for str in $allcrystals_supercells ; do
str="${str##*/}"
name="VOLUME_$str"
vol=`echo ${!name}`
echo "VOLUME_$str=$vol" >> $MAINDIR/allvariables/$1
done

echo " " >> $MAINDIR/allvariables/$1

for str in $allcrystals_supercells ; do
str="${str##*/}"
name="SUPERCELL_FACTOR_$str"
fact=`echo ${!name}`
echo "SUPERCELL_FACTOR_$str=$fact" >> $MAINDIR/allvariables/$1
done

echo " " >> $MAINDIR/allvariables/$1

for str in $allcrystals ; do
str="${str##*/}"
mkdir temppp
cd temppp
$str
if [ "$LATTICE_SYSTEM" = hexagonal ]; then
name="C_A_RATIO_$str"
ratio=`echo ${!name}`
echo "C_A_RATIO_$str=$ratio" >> $MAINDIR/allvariables/$1
fi
if [ "$LATTICE_SYSTEM" = tetragonal ]; then
name="C_A_RATIO_$str"
ratio=`echo ${!name}`
echo "C_A_RATIO_$str=$ratio" >> $MAINDIR/allvariables/$1
fi
cd ..
rm -r temppp
done

echo " " >> $MAINDIR/allvariables/$1

for str in $allcrystals_supercells ; do
str="${str##*/}"
mkdir temppp
cd temppp
$str
if [ "$LATTICE_SYSTEM" = hexagonal ]; then
name="C_A_RATIO_$str"
ratio=`echo ${!name}`
echo "C_A_RATIO_$str=$ratio" >> $MAINDIR/allvariables/$1
fi
if [ "$LATTICE_SYSTEM" = tetragonal ]; then
name="C_A_RATIO_$str"
ratio=`echo ${!name}`
echo "C_A_RATIO_$str=$ratio" >> $MAINDIR/allvariables/$1
fi
cd ..
rm -r temppp
done


echo " " >> $MAINDIR/allvariables/$1

for str in $allcrystals ; do
str="${str##*/}"
mkdir temppp
cd temppp
$str
for i in $(seq 1 1 $NUMBER_OF_SHIFTS) ; do
name="SHIFT_${str}_${i}"
shift=`echo ${!name}`
echo "SHIFT_${str}_${i}=$shift" >> $MAINDIR/allvariables/$1
done
cd ..
rm -r temppp
done


echo " " >> $MAINDIR/allvariables/$1

for str in $allcrystals_supercells ; do
str="${str##*/}"
mkdir temppp
cd temppp
$str
for i in $(seq 1 1 $NUMBER_OF_SHIFTS) ; do
name="SHIFT_${str}_${i}"
shift=`echo ${!name}`
echo "SHIFT_${str}_${i}=$shift" >> $MAINDIR/allvariables/$1
done
cd ..
rm -r temppp
done





echo " " >> $MAINDIR/allvariables/$1

for str in $allsurfaces ; do
str="${str##*/}"
name="VOLUME_$str"
vol=`echo ${!name}`
echo "VOLUME_$str=$vol" >> $MAINDIR/allvariables/$1
done

echo " " >> $MAINDIR/allvariables/$1

for str in $allsurfaces ; do
str="${str##*/}"
name="NUMBER_OF_LAYERS_$str"
vol=`echo ${!name}`
echo "NUMBER_OF_LAYERS_$str=$vol" >> $MAINDIR/allvariables/$1
done

echo " " >> $MAINDIR/allvariables/$1

for str in $allsurfaces ; do
str="${str##*/}"
name="VACUUM_SIZE_$str"
vol=`echo ${!name}`
echo "VACUUM_SIZE_$str=$vol" >> $MAINDIR/allvariables/$1
done

echo " " >> $MAINDIR/allvariables/$1

for str in $allsurfaces ; do
str="${str##*/}"
name="SELECTIVE_DYNAMICS_DEPTH_$str"
vol=`echo ${!name}`
echo "SELECTIVE_DYNAMICS_DEPTH_$str=$vol" >> $MAINDIR/allvariables/$1
done

for str in $allsurfaces ; do
str="${str##*/}"
name="LAYER_HIGHTS_$str"
vol=`echo ${!name}`
echo "LAYER_HIGHTS_$str=$vol" >> $MAINDIR/allvariables/$1
done

echo " " >> $MAINDIR/allvariables/$1

for str in $allsurfaces_supercells ; do
str="${str##*/}"
name="VOLUME_$str"
vol=`echo ${!name}`
echo "VOLUME_$str=$vol" >> $MAINDIR/allvariables/$1
done

echo " " >> $MAINDIR/allvariables/$1

for str in $allsurfaces_supercells ; do
str="${str##*/}"
name="SUPERCELL_FACTOR_$str"
fact=`echo ${!name}`
echo "SUPERCELL_FACTOR_$str=$fact" >> $MAINDIR/allvariables/$1
done

echo " " >> $MAINDIR/allvariables/$1

for str in $allsurfaces_supercells ; do
str="${str##*/}"
name="NUMBER_OF_LAYERS_$str"
fact=`echo ${!name}`
echo "NUMBER_OF_LAYERS_$str=$fact" >> $MAINDIR/allvariables/$1
done

echo " " >> $MAINDIR/allvariables/$1

for str in $allsurfaces_supercells ; do
str="${str##*/}"
name="VACUUM_SIZE_$str"
fact=`echo ${!name}`
echo "VACUUM_SIZE_$str=$fact" >> $MAINDIR/allvariables/$1
done

echo " " >> $MAINDIR/allvariables/$1

for str in $allsurfaces_supercells ; do
str="${str##*/}"
name="SELECTIVE_DYNAMICS_DEPTH_$str"
fact=`echo ${!name}`
echo "SELECTIVE_DYNAMICS_DEPTH_$str=$fact" >> $MAINDIR/allvariables/$1
done

echo " " >> $MAINDIR/allvariables/$1

for str in $allsurfaces_supercells ; do
str="${str##*/}"
name="LAYER_HIGHTS_$str"
fact=`echo ${!name}`
echo "LAYER_HIGHTS_$str=$fact" >> $MAINDIR/allvariables/$1
done

echo " " >> $MAINDIR/allvariables/$1

for str in $allsurfaces ; do
str="${str##*/}"
mkdir temppp
cd temppp
$str
if [ "$LATTICE_SYSTEM" = hexagonal ]; then
name="C_A_RATIO_$str"
ratio=`echo ${!name}`
echo "C_A_RATIO_$str=$ratio" >> $MAINDIR/allvariables/$1
fi
if [ "$LATTICE_SYSTEM" = tetragonal ]; then
name="C_A_RATIO_$str"
ratio=`echo ${!name}`
echo "C_A_RATIO_$str=$ratio" >> $MAINDIR/allvariables/$1
fi
cd ..
rm -r temppp
done

echo " " >> $MAINDIR/allvariables/$1

for str in $allsurfaces_supercells ; do
str="${str##*/}"
mkdir temppp
cd temppp
$str
if [ "$LATTICE_SYSTEM" = hexagonal ]; then
name="C_A_RATIO_$str"
ratio=`echo ${!name}`
echo "C_A_RATIO_$str=$ratio" >> $MAINDIR/allvariables/$1
fi
if [ "$LATTICE_SYSTEM" = tetragonal ]; then
name="C_A_RATIO_$str"
ratio=`echo ${!name}`
echo "C_A_RATIO_$str=$ratio" >> $MAINDIR/allvariables/$1
fi
cd ..
rm -r temppp
done

echo " " >> $MAINDIR/allvariables/$1

for str in $allsurfaces ; do
str="${str##*/}"
mkdir temppp
cd temppp
$str
for i in $(seq 1 1 $NUMBER_OF_SHIFTS) ; do
name="SHIFT_${str}_${i}"
shift=`echo ${!name}`
echo "SHIFT_${str}_${i}=$shift" >> $MAINDIR/allvariables/$1
done
cd ..
rm -r temppp
done

echo " " >> $MAINDIR/allvariables/$1

for str in $allsurfaces_supercells ; do
str="${str##*/}"
mkdir temppp
cd temppp
$str
for i in $(seq 1 1 $NUMBER_OF_SHIFTS) ; do
name="SHIFT_${str}_${i}"
shift=`echo ${!name}`
echo "SHIFT_${str}_${i}=$shift" >> $MAINDIR/allvariables/$1
done
cd ..
rm -r temppp
done



echo " " >> $MAINDIR/allvariables/$1
echo "}" >> $MAINDIR/allvariables/$1
echo " " >> $MAINDIR/allvariables/$1

}


 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
storevariables () {

if [ -f $MAINDIR/allvariables ] ; then
x=x
else
mkdir $MAINDIR/allvariables
fi

storeincarvariables $1
storekpointsvariables $1
storestructuralvariables $1
storeenergyvariables $1

}
 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
 
transfercontcars () {

cp $1/contcars/* $MAINDIR/contcars

for contc in $MAINDIR/contcars/* ; do
source $contc
contc="${contc##*/}"
done

}
 
 
 
 
 
 
########################################################################################### 
########################################################################################### 
########################################################################################### 
 
